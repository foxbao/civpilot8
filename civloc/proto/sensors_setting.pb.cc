// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: civloc/proto/sensors_setting.proto

#include "civloc/proto/sensors_setting.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_civloc_2fproto_2fsensors_5fsetting_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AcceleratorPara_civloc_2fproto_2fsensors_5fsetting_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_civloc_2fproto_2fsensors_5fsetting_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CameraPara_civloc_2fproto_2fsensors_5fsetting_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_civloc_2fproto_2fsensors_5fsetting_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Extrinsic_civloc_2fproto_2fsensors_5fsetting_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_civloc_2fproto_2fsensors_5fsetting_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GnssPara_civloc_2fproto_2fsensors_5fsetting_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_civloc_2fproto_2fsensors_5fsetting_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GyroscopePara_civloc_2fproto_2fsensors_5fsetting_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_civloc_2fproto_2fsensors_5fsetting_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_ImuPara_civloc_2fproto_2fsensors_5fsetting_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_civloc_2fproto_2fsensors_5fsetting_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LidarPara_civloc_2fproto_2fsensors_5fsetting_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_civloc_2fproto_2fsensors_5fsetting_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PerceptionPara_civloc_2fproto_2fsensors_5fsetting_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_civloc_2fproto_2fsensors_5fsetting_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WheelOdoPara_civloc_2fproto_2fsensors_5fsetting_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_message_2fcommon_2fproto_2fgeometry_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PointENU_message_2fcommon_2fproto_2fgeometry_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_message_2fcommon_2fproto_2fgeometry_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Quaternion_message_2fcommon_2fproto_2fgeometry_2eproto;
namespace civ {
namespace civloc {
class ExtrinsicDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Extrinsic> _instance;
} _Extrinsic_default_instance_;
class AcceleratorParaDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AcceleratorPara> _instance;
} _AcceleratorPara_default_instance_;
class GyroscopeParaDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GyroscopePara> _instance;
} _GyroscopePara_default_instance_;
class ImuParaDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ImuPara> _instance;
} _ImuPara_default_instance_;
class GnssParaDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GnssPara> _instance;
} _GnssPara_default_instance_;
class CameraParaDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CameraPara> _instance;
} _CameraPara_default_instance_;
class PerceptionParaDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PerceptionPara> _instance;
} _PerceptionPara_default_instance_;
class WheelOdoParaDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WheelOdoPara> _instance;
} _WheelOdoPara_default_instance_;
class LidarParaDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LidarPara> _instance;
} _LidarPara_default_instance_;
class SensorsSettingDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SensorsSetting> _instance;
} _SensorsSetting_default_instance_;
}  // namespace civloc
}  // namespace civ
static void InitDefaultsscc_info_AcceleratorPara_civloc_2fproto_2fsensors_5fsetting_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::civ::civloc::_AcceleratorPara_default_instance_;
    new (ptr) ::civ::civloc::AcceleratorPara();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AcceleratorPara_civloc_2fproto_2fsensors_5fsetting_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AcceleratorPara_civloc_2fproto_2fsensors_5fsetting_2eproto}, {}};

static void InitDefaultsscc_info_CameraPara_civloc_2fproto_2fsensors_5fsetting_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::civ::civloc::_CameraPara_default_instance_;
    new (ptr) ::civ::civloc::CameraPara();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CameraPara_civloc_2fproto_2fsensors_5fsetting_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CameraPara_civloc_2fproto_2fsensors_5fsetting_2eproto}, {
      &scc_info_Extrinsic_civloc_2fproto_2fsensors_5fsetting_2eproto.base,}};

static void InitDefaultsscc_info_Extrinsic_civloc_2fproto_2fsensors_5fsetting_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::civ::civloc::_Extrinsic_default_instance_;
    new (ptr) ::civ::civloc::Extrinsic();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Extrinsic_civloc_2fproto_2fsensors_5fsetting_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Extrinsic_civloc_2fproto_2fsensors_5fsetting_2eproto}, {
      &scc_info_PointENU_message_2fcommon_2fproto_2fgeometry_2eproto.base,
      &scc_info_Quaternion_message_2fcommon_2fproto_2fgeometry_2eproto.base,}};

static void InitDefaultsscc_info_GnssPara_civloc_2fproto_2fsensors_5fsetting_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::civ::civloc::_GnssPara_default_instance_;
    new (ptr) ::civ::civloc::GnssPara();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GnssPara_civloc_2fproto_2fsensors_5fsetting_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GnssPara_civloc_2fproto_2fsensors_5fsetting_2eproto}, {
      &scc_info_Extrinsic_civloc_2fproto_2fsensors_5fsetting_2eproto.base,}};

static void InitDefaultsscc_info_GyroscopePara_civloc_2fproto_2fsensors_5fsetting_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::civ::civloc::_GyroscopePara_default_instance_;
    new (ptr) ::civ::civloc::GyroscopePara();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GyroscopePara_civloc_2fproto_2fsensors_5fsetting_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GyroscopePara_civloc_2fproto_2fsensors_5fsetting_2eproto}, {}};

static void InitDefaultsscc_info_ImuPara_civloc_2fproto_2fsensors_5fsetting_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::civ::civloc::_ImuPara_default_instance_;
    new (ptr) ::civ::civloc::ImuPara();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_ImuPara_civloc_2fproto_2fsensors_5fsetting_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_ImuPara_civloc_2fproto_2fsensors_5fsetting_2eproto}, {
      &scc_info_AcceleratorPara_civloc_2fproto_2fsensors_5fsetting_2eproto.base,
      &scc_info_GyroscopePara_civloc_2fproto_2fsensors_5fsetting_2eproto.base,
      &scc_info_Extrinsic_civloc_2fproto_2fsensors_5fsetting_2eproto.base,}};

static void InitDefaultsscc_info_LidarPara_civloc_2fproto_2fsensors_5fsetting_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::civ::civloc::_LidarPara_default_instance_;
    new (ptr) ::civ::civloc::LidarPara();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LidarPara_civloc_2fproto_2fsensors_5fsetting_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_LidarPara_civloc_2fproto_2fsensors_5fsetting_2eproto}, {
      &scc_info_Extrinsic_civloc_2fproto_2fsensors_5fsetting_2eproto.base,}};

static void InitDefaultsscc_info_PerceptionPara_civloc_2fproto_2fsensors_5fsetting_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::civ::civloc::_PerceptionPara_default_instance_;
    new (ptr) ::civ::civloc::PerceptionPara();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PerceptionPara_civloc_2fproto_2fsensors_5fsetting_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PerceptionPara_civloc_2fproto_2fsensors_5fsetting_2eproto}, {
      &scc_info_CameraPara_civloc_2fproto_2fsensors_5fsetting_2eproto.base,}};

static void InitDefaultsscc_info_SensorsSetting_civloc_2fproto_2fsensors_5fsetting_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::civ::civloc::_SensorsSetting_default_instance_;
    new (ptr) ::civ::civloc::SensorsSetting();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_SensorsSetting_civloc_2fproto_2fsensors_5fsetting_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 5, 0, InitDefaultsscc_info_SensorsSetting_civloc_2fproto_2fsensors_5fsetting_2eproto}, {
      &scc_info_ImuPara_civloc_2fproto_2fsensors_5fsetting_2eproto.base,
      &scc_info_GnssPara_civloc_2fproto_2fsensors_5fsetting_2eproto.base,
      &scc_info_PerceptionPara_civloc_2fproto_2fsensors_5fsetting_2eproto.base,
      &scc_info_WheelOdoPara_civloc_2fproto_2fsensors_5fsetting_2eproto.base,
      &scc_info_LidarPara_civloc_2fproto_2fsensors_5fsetting_2eproto.base,}};

static void InitDefaultsscc_info_WheelOdoPara_civloc_2fproto_2fsensors_5fsetting_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::civ::civloc::_WheelOdoPara_default_instance_;
    new (ptr) ::civ::civloc::WheelOdoPara();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WheelOdoPara_civloc_2fproto_2fsensors_5fsetting_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_WheelOdoPara_civloc_2fproto_2fsensors_5fsetting_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_civloc_2fproto_2fsensors_5fsetting_2eproto[10];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_civloc_2fproto_2fsensors_5fsetting_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_civloc_2fproto_2fsensors_5fsetting_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_civloc_2fproto_2fsensors_5fsetting_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::civ::civloc::Extrinsic, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::civ::civloc::Extrinsic, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::civ::civloc::Extrinsic, translation_),
  PROTOBUF_FIELD_OFFSET(::civ::civloc::Extrinsic, rotation_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::civ::civloc::AcceleratorPara, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::civ::civloc::AcceleratorPara, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::civ::civloc::AcceleratorPara, skew_),
  PROTOBUF_FIELD_OFFSET(::civ::civloc::AcceleratorPara, velocity_random_walk_),
  PROTOBUF_FIELD_OFFSET(::civ::civloc::AcceleratorPara, bias_stability_),
  PROTOBUF_FIELD_OFFSET(::civ::civloc::AcceleratorPara, related_time_s_),
  PROTOBUF_FIELD_OFFSET(::civ::civloc::AcceleratorPara, output_noise_),
  ~0u,
  ~0u,
  ~0u,
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::civ::civloc::GyroscopePara, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::civ::civloc::GyroscopePara, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::civ::civloc::GyroscopePara, skew_),
  PROTOBUF_FIELD_OFFSET(::civ::civloc::GyroscopePara, angle_random_walk_),
  PROTOBUF_FIELD_OFFSET(::civ::civloc::GyroscopePara, bias_stability_),
  PROTOBUF_FIELD_OFFSET(::civ::civloc::GyroscopePara, related_time_s_),
  PROTOBUF_FIELD_OFFSET(::civ::civloc::GyroscopePara, output_noise_),
  ~0u,
  ~0u,
  ~0u,
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::civ::civloc::ImuPara, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::civ::civloc::ImuPara, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::civ::civloc::ImuPara, name_),
  PROTOBUF_FIELD_OFFSET(::civ::civloc::ImuPara, rate_hz_),
  PROTOBUF_FIELD_OFFSET(::civ::civloc::ImuPara, acc_),
  PROTOBUF_FIELD_OFFSET(::civ::civloc::ImuPara, gyr_),
  PROTOBUF_FIELD_OFFSET(::civ::civloc::ImuPara, rot_gyr_acc_),
  PROTOBUF_FIELD_OFFSET(::civ::civloc::ImuPara, ex_para_),
  0,
  4,
  1,
  2,
  ~0u,
  3,
  PROTOBUF_FIELD_OFFSET(::civ::civloc::GnssPara, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::civ::civloc::GnssPara, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::civ::civloc::GnssPara, name_),
  PROTOBUF_FIELD_OFFSET(::civ::civloc::GnssPara, rate_hz_),
  PROTOBUF_FIELD_OFFSET(::civ::civloc::GnssPara, with_differential_information_),
  PROTOBUF_FIELD_OFFSET(::civ::civloc::GnssPara, ex_para_),
  0,
  2,
  3,
  1,
  PROTOBUF_FIELD_OFFSET(::civ::civloc::CameraPara, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::civ::civloc::CameraPara, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::civ::civloc::CameraPara, name_),
  PROTOBUF_FIELD_OFFSET(::civ::civloc::CameraPara, rate_hz_),
  PROTOBUF_FIELD_OFFSET(::civ::civloc::CameraPara, resolution_),
  PROTOBUF_FIELD_OFFSET(::civ::civloc::CameraPara, k_),
  PROTOBUF_FIELD_OFFSET(::civ::civloc::CameraPara, projection_model_),
  PROTOBUF_FIELD_OFFSET(::civ::civloc::CameraPara, distortion_model_),
  PROTOBUF_FIELD_OFFSET(::civ::civloc::CameraPara, distortion_coff__),
  PROTOBUF_FIELD_OFFSET(::civ::civloc::CameraPara, ex_para_),
  0,
  2,
  ~0u,
  ~0u,
  3,
  4,
  ~0u,
  1,
  PROTOBUF_FIELD_OFFSET(::civ::civloc::PerceptionPara, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::civ::civloc::PerceptionPara, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::civ::civloc::PerceptionPara, name_),
  PROTOBUF_FIELD_OFFSET(::civ::civloc::PerceptionPara, type_),
  PROTOBUF_FIELD_OFFSET(::civ::civloc::PerceptionPara, cam_para_),
  0,
  2,
  1,
  PROTOBUF_FIELD_OFFSET(::civ::civloc::WheelOdoPara, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::civ::civloc::WheelOdoPara, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::civ::civloc::WheelOdoPara, name_),
  PROTOBUF_FIELD_OFFSET(::civ::civloc::WheelOdoPara, rate_hz_),
  PROTOBUF_FIELD_OFFSET(::civ::civloc::WheelOdoPara, w_),
  PROTOBUF_FIELD_OFFSET(::civ::civloc::WheelOdoPara, l1_),
  PROTOBUF_FIELD_OFFSET(::civ::civloc::WheelOdoPara, l2_),
  PROTOBUF_FIELD_OFFSET(::civ::civloc::WheelOdoPara, ko_),
  0,
  4,
  1,
  2,
  3,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::civ::civloc::LidarPara, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::civ::civloc::LidarPara, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::civ::civloc::LidarPara, name_),
  PROTOBUF_FIELD_OFFSET(::civ::civloc::LidarPara, rate_hz_),
  PROTOBUF_FIELD_OFFSET(::civ::civloc::LidarPara, ex_para_),
  0,
  2,
  1,
  PROTOBUF_FIELD_OFFSET(::civ::civloc::SensorsSetting, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::civ::civloc::SensorsSetting, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::civ::civloc::SensorsSetting, version_),
  PROTOBUF_FIELD_OFFSET(::civ::civloc::SensorsSetting, vehicle_name_),
  PROTOBUF_FIELD_OFFSET(::civ::civloc::SensorsSetting, imu_),
  PROTOBUF_FIELD_OFFSET(::civ::civloc::SensorsSetting, gnss_),
  PROTOBUF_FIELD_OFFSET(::civ::civloc::SensorsSetting, perc_),
  PROTOBUF_FIELD_OFFSET(::civ::civloc::SensorsSetting, wheel_),
  PROTOBUF_FIELD_OFFSET(::civ::civloc::SensorsSetting, lidar_),
  0,
  1,
  ~0u,
  ~0u,
  ~0u,
  2,
  3,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::civ::civloc::Extrinsic)},
  { 9, 19, sizeof(::civ::civloc::AcceleratorPara)},
  { 24, 34, sizeof(::civ::civloc::GyroscopePara)},
  { 39, 50, sizeof(::civ::civloc::ImuPara)},
  { 56, 65, sizeof(::civ::civloc::GnssPara)},
  { 69, 82, sizeof(::civ::civloc::CameraPara)},
  { 90, 98, sizeof(::civ::civloc::PerceptionPara)},
  { 101, 112, sizeof(::civ::civloc::WheelOdoPara)},
  { 118, 126, sizeof(::civ::civloc::LidarPara)},
  { 129, 141, sizeof(::civ::civloc::SensorsSetting)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::civ::civloc::_Extrinsic_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::civ::civloc::_AcceleratorPara_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::civ::civloc::_GyroscopePara_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::civ::civloc::_ImuPara_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::civ::civloc::_GnssPara_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::civ::civloc::_CameraPara_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::civ::civloc::_PerceptionPara_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::civ::civloc::_WheelOdoPara_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::civ::civloc::_LidarPara_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::civ::civloc::_SensorsSetting_default_instance_),
};

const char descriptor_table_protodef_civloc_2fproto_2fsensors_5fsetting_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\"civloc/proto/sensors_setting.proto\022\nci"
  "v.civloc\032#message/common/proto/geometry."
  "proto\"`\n\tExtrinsic\022)\n\013translation\030\002 \002(\0132"
  "\024.civ.common.PointENU\022(\n\010rotation\030\003 \002(\0132"
  "\026.civ.common.Quaternion\"\203\001\n\017AcceleratorP"
  "ara\022\014\n\004skew\030\001 \003(\001\022\034\n\024velocity_random_wal"
  "k\030\002 \003(\001\022\026\n\016bias_stability\030\003 \003(\001\022\026\n\016relat"
  "ed_time_s\030\004 \002(\001\022\024\n\014output_noise\030\005 \003(\001\"~\n"
  "\rGyroscopePara\022\014\n\004skew\030\001 \003(\001\022\031\n\021angle_ra"
  "ndom_walk\030\002 \003(\001\022\026\n\016bias_stability\030\003 \003(\001\022"
  "\026\n\016related_time_s\030\004 \002(\001\022\024\n\014output_noise\030"
  "\005 \003(\001\"\267\001\n\007ImuPara\022\014\n\004name\030\001 \002(\t\022\017\n\007rate_"
  "hz\030\002 \002(\005\022(\n\003acc\030\003 \002(\0132\033.civ.civloc.Accel"
  "eratorPara\022&\n\003gyr\030\004 \002(\0132\031.civ.civloc.Gyr"
  "oscopePara\022\023\n\013rot_gyr_acc\030\005 \003(\001\022&\n\007ex_pa"
  "ra\030\006 \002(\0132\025.civ.civloc.Extrinsic\"x\n\010GnssP"
  "ara\022\014\n\004name\030\001 \002(\t\022\017\n\007rate_hz\030\002 \002(\005\022%\n\035wi"
  "th_differential_information\030\003 \002(\010\022&\n\007ex_"
  "para\030\004 \002(\0132\025.civ.civloc.Extrinsic\"\340\002\n\nCa"
  "meraPara\022\014\n\004name\030\001 \002(\t\022\017\n\007rate_hz\030\002 \002(\005\022"
  "\022\n\nresolution\030\003 \003(\001\022\t\n\001K\030\005 \003(\001\022I\n\020projec"
  "tion_model\030\006 \002(\0162&.civ.civloc.CameraPara"
  ".ProjectionModel:\007Pinhole\022H\n\020distortion_"
  "model\030\007 \002(\0162&.civ.civloc.CameraPara.Dist"
  "ortionModel:\006Radtan\022\030\n\020distortion_coff_\030"
  "\010 \003(\001\022&\n\007ex_para\030\n \002(\0132\025.civ.civloc.Extr"
  "insic\"\036\n\017ProjectionModel\022\013\n\007Pinhole\020\000\"\035\n"
  "\017DistortionModel\022\n\n\006Radtan\020\000\"\241\001\n\016Percept"
  "ionPara\022\014\n\004name\030\001 \002(\t\0225\n\004type\030\002 \002(\0162\037.ci"
  "v.civloc.PerceptionPara.Type:\006BEV_XY\022(\n\010"
  "cam_para\030\005 \002(\0132\026.civ.civloc.CameraPara\" "
  "\n\004Type\022\014\n\010IMAGE_UV\020\000\022\n\n\006BEV_XY\020\001\"\\\n\014Whee"
  "lOdoPara\022\014\n\004name\030\001 \002(\t\022\017\n\007rate_hz\030\002 \002(\005\022"
  "\t\n\001w\030\003 \002(\001\022\n\n\002l1\030\004 \002(\001\022\n\n\002l2\030\005 \002(\001\022\n\n\002ko"
  "\030\006 \003(\001\"R\n\tLidarPara\022\014\n\004name\030\001 \002(\t\022\017\n\007rat"
  "e_hz\030\002 \002(\005\022&\n\007ex_para\030\003 \002(\0132\025.civ.civloc"
  ".Extrinsic\"\375\001\n\016SensorsSetting\022\026\n\007version"
  "\030\001 \002(\t:\0051.0.0\022\024\n\014vehicle_name\030\002 \002(\t\022 \n\003i"
  "mu\030\003 \003(\0132\023.civ.civloc.ImuPara\022\"\n\004gnss\030\004 "
  "\003(\0132\024.civ.civloc.GnssPara\022(\n\004perc\030\005 \003(\0132"
  "\032.civ.civloc.PerceptionPara\022\'\n\005wheel\030\006 \001"
  "(\0132\030.civ.civloc.WheelOdoPara\022$\n\005lidar\030\007 "
  "\001(\0132\025.civ.civloc.LidarPara"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_civloc_2fproto_2fsensors_5fsetting_2eproto_deps[1] = {
  &::descriptor_table_message_2fcommon_2fproto_2fgeometry_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_civloc_2fproto_2fsensors_5fsetting_2eproto_sccs[10] = {
  &scc_info_AcceleratorPara_civloc_2fproto_2fsensors_5fsetting_2eproto.base,
  &scc_info_CameraPara_civloc_2fproto_2fsensors_5fsetting_2eproto.base,
  &scc_info_Extrinsic_civloc_2fproto_2fsensors_5fsetting_2eproto.base,
  &scc_info_GnssPara_civloc_2fproto_2fsensors_5fsetting_2eproto.base,
  &scc_info_GyroscopePara_civloc_2fproto_2fsensors_5fsetting_2eproto.base,
  &scc_info_ImuPara_civloc_2fproto_2fsensors_5fsetting_2eproto.base,
  &scc_info_LidarPara_civloc_2fproto_2fsensors_5fsetting_2eproto.base,
  &scc_info_PerceptionPara_civloc_2fproto_2fsensors_5fsetting_2eproto.base,
  &scc_info_SensorsSetting_civloc_2fproto_2fsensors_5fsetting_2eproto.base,
  &scc_info_WheelOdoPara_civloc_2fproto_2fsensors_5fsetting_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_civloc_2fproto_2fsensors_5fsetting_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_civloc_2fproto_2fsensors_5fsetting_2eproto = {
  false, false, descriptor_table_protodef_civloc_2fproto_2fsensors_5fsetting_2eproto, "civloc/proto/sensors_setting.proto", 1706,
  &descriptor_table_civloc_2fproto_2fsensors_5fsetting_2eproto_once, descriptor_table_civloc_2fproto_2fsensors_5fsetting_2eproto_sccs, descriptor_table_civloc_2fproto_2fsensors_5fsetting_2eproto_deps, 10, 1,
  schemas, file_default_instances, TableStruct_civloc_2fproto_2fsensors_5fsetting_2eproto::offsets,
  file_level_metadata_civloc_2fproto_2fsensors_5fsetting_2eproto, 10, file_level_enum_descriptors_civloc_2fproto_2fsensors_5fsetting_2eproto, file_level_service_descriptors_civloc_2fproto_2fsensors_5fsetting_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_civloc_2fproto_2fsensors_5fsetting_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_civloc_2fproto_2fsensors_5fsetting_2eproto)), true);
namespace civ {
namespace civloc {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CameraPara_ProjectionModel_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_civloc_2fproto_2fsensors_5fsetting_2eproto);
  return file_level_enum_descriptors_civloc_2fproto_2fsensors_5fsetting_2eproto[0];
}
bool CameraPara_ProjectionModel_IsValid(int value) {
  switch (value) {
    case 0:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr CameraPara_ProjectionModel CameraPara::Pinhole;
constexpr CameraPara_ProjectionModel CameraPara::ProjectionModel_MIN;
constexpr CameraPara_ProjectionModel CameraPara::ProjectionModel_MAX;
constexpr int CameraPara::ProjectionModel_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CameraPara_DistortionModel_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_civloc_2fproto_2fsensors_5fsetting_2eproto);
  return file_level_enum_descriptors_civloc_2fproto_2fsensors_5fsetting_2eproto[1];
}
bool CameraPara_DistortionModel_IsValid(int value) {
  switch (value) {
    case 0:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr CameraPara_DistortionModel CameraPara::Radtan;
constexpr CameraPara_DistortionModel CameraPara::DistortionModel_MIN;
constexpr CameraPara_DistortionModel CameraPara::DistortionModel_MAX;
constexpr int CameraPara::DistortionModel_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PerceptionPara_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_civloc_2fproto_2fsensors_5fsetting_2eproto);
  return file_level_enum_descriptors_civloc_2fproto_2fsensors_5fsetting_2eproto[2];
}
bool PerceptionPara_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr PerceptionPara_Type PerceptionPara::IMAGE_UV;
constexpr PerceptionPara_Type PerceptionPara::BEV_XY;
constexpr PerceptionPara_Type PerceptionPara::Type_MIN;
constexpr PerceptionPara_Type PerceptionPara::Type_MAX;
constexpr int PerceptionPara::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

class Extrinsic::_Internal {
 public:
  using HasBits = decltype(std::declval<Extrinsic>()._has_bits_);
  static const ::civ::common::PointENU& translation(const Extrinsic* msg);
  static void set_has_translation(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::civ::common::Quaternion& rotation(const Extrinsic* msg);
  static void set_has_rotation(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::civ::common::PointENU&
Extrinsic::_Internal::translation(const Extrinsic* msg) {
  return *msg->translation_;
}
const ::civ::common::Quaternion&
Extrinsic::_Internal::rotation(const Extrinsic* msg) {
  return *msg->rotation_;
}
void Extrinsic::clear_translation() {
  if (translation_ != nullptr) translation_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void Extrinsic::clear_rotation() {
  if (rotation_ != nullptr) rotation_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
Extrinsic::Extrinsic(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:civ.civloc.Extrinsic)
}
Extrinsic::Extrinsic(const Extrinsic& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_translation()) {
    translation_ = new ::civ::common::PointENU(*from.translation_);
  } else {
    translation_ = nullptr;
  }
  if (from._internal_has_rotation()) {
    rotation_ = new ::civ::common::Quaternion(*from.rotation_);
  } else {
    rotation_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:civ.civloc.Extrinsic)
}

void Extrinsic::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Extrinsic_civloc_2fproto_2fsensors_5fsetting_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&translation_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&rotation_) -
      reinterpret_cast<char*>(&translation_)) + sizeof(rotation_));
}

Extrinsic::~Extrinsic() {
  // @@protoc_insertion_point(destructor:civ.civloc.Extrinsic)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Extrinsic::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete translation_;
  if (this != internal_default_instance()) delete rotation_;
}

void Extrinsic::ArenaDtor(void* object) {
  Extrinsic* _this = reinterpret_cast< Extrinsic* >(object);
  (void)_this;
}
void Extrinsic::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Extrinsic::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Extrinsic& Extrinsic::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Extrinsic_civloc_2fproto_2fsensors_5fsetting_2eproto.base);
  return *internal_default_instance();
}


void Extrinsic::Clear() {
// @@protoc_insertion_point(message_clear_start:civ.civloc.Extrinsic)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(translation_ != nullptr);
      translation_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(rotation_ != nullptr);
      rotation_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Extrinsic::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .civ.common.PointENU translation = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_translation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .civ.common.Quaternion rotation = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_rotation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Extrinsic::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:civ.civloc.Extrinsic)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .civ.common.PointENU translation = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::translation(this), target, stream);
  }

  // required .civ.common.Quaternion rotation = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::rotation(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:civ.civloc.Extrinsic)
  return target;
}

size_t Extrinsic::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:civ.civloc.Extrinsic)
  size_t total_size = 0;

  if (_internal_has_translation()) {
    // required .civ.common.PointENU translation = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *translation_);
  }

  if (_internal_has_rotation()) {
    // required .civ.common.Quaternion rotation = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rotation_);
  }

  return total_size;
}
size_t Extrinsic::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:civ.civloc.Extrinsic)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .civ.common.PointENU translation = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *translation_);

    // required .civ.common.Quaternion rotation = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rotation_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Extrinsic::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:civ.civloc.Extrinsic)
  GOOGLE_DCHECK_NE(&from, this);
  const Extrinsic* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Extrinsic>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:civ.civloc.Extrinsic)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:civ.civloc.Extrinsic)
    MergeFrom(*source);
  }
}

void Extrinsic::MergeFrom(const Extrinsic& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:civ.civloc.Extrinsic)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_translation()->::civ::common::PointENU::MergeFrom(from._internal_translation());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_rotation()->::civ::common::Quaternion::MergeFrom(from._internal_rotation());
    }
  }
}

void Extrinsic::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:civ.civloc.Extrinsic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Extrinsic::CopyFrom(const Extrinsic& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:civ.civloc.Extrinsic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Extrinsic::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void Extrinsic::InternalSwap(Extrinsic* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Extrinsic, rotation_)
      + sizeof(Extrinsic::rotation_)
      - PROTOBUF_FIELD_OFFSET(Extrinsic, translation_)>(
          reinterpret_cast<char*>(&translation_),
          reinterpret_cast<char*>(&other->translation_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Extrinsic::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AcceleratorPara::_Internal {
 public:
  using HasBits = decltype(std::declval<AcceleratorPara>()._has_bits_);
  static void set_has_related_time_s(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

AcceleratorPara::AcceleratorPara(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  skew_(arena),
  velocity_random_walk_(arena),
  bias_stability_(arena),
  output_noise_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:civ.civloc.AcceleratorPara)
}
AcceleratorPara::AcceleratorPara(const AcceleratorPara& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      skew_(from.skew_),
      velocity_random_walk_(from.velocity_random_walk_),
      bias_stability_(from.bias_stability_),
      output_noise_(from.output_noise_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  related_time_s_ = from.related_time_s_;
  // @@protoc_insertion_point(copy_constructor:civ.civloc.AcceleratorPara)
}

void AcceleratorPara::SharedCtor() {
  related_time_s_ = 0;
}

AcceleratorPara::~AcceleratorPara() {
  // @@protoc_insertion_point(destructor:civ.civloc.AcceleratorPara)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AcceleratorPara::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AcceleratorPara::ArenaDtor(void* object) {
  AcceleratorPara* _this = reinterpret_cast< AcceleratorPara* >(object);
  (void)_this;
}
void AcceleratorPara::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AcceleratorPara::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AcceleratorPara& AcceleratorPara::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AcceleratorPara_civloc_2fproto_2fsensors_5fsetting_2eproto.base);
  return *internal_default_instance();
}


void AcceleratorPara::Clear() {
// @@protoc_insertion_point(message_clear_start:civ.civloc.AcceleratorPara)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  skew_.Clear();
  velocity_random_walk_.Clear();
  bias_stability_.Clear();
  output_noise_.Clear();
  related_time_s_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AcceleratorPara::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated double skew = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_skew(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<9>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_skew(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated double velocity_random_walk = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_velocity_random_walk(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<17>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_velocity_random_walk(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated double bias_stability = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_bias_stability(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<25>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_bias_stability(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required double related_time_s = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_related_time_s(&has_bits);
          related_time_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated double output_noise = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_output_noise(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<41>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_output_noise(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AcceleratorPara::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:civ.civloc.AcceleratorPara)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated double skew = 1;
  for (int i = 0, n = this->_internal_skew_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_skew(i), target);
  }

  // repeated double velocity_random_walk = 2;
  for (int i = 0, n = this->_internal_velocity_random_walk_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_velocity_random_walk(i), target);
  }

  // repeated double bias_stability = 3;
  for (int i = 0, n = this->_internal_bias_stability_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_bias_stability(i), target);
  }

  cached_has_bits = _has_bits_[0];
  // required double related_time_s = 4;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_related_time_s(), target);
  }

  // repeated double output_noise = 5;
  for (int i = 0, n = this->_internal_output_noise_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_output_noise(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:civ.civloc.AcceleratorPara)
  return target;
}

size_t AcceleratorPara::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:civ.civloc.AcceleratorPara)
  size_t total_size = 0;

  // required double related_time_s = 4;
  if (_internal_has_related_time_s()) {
    total_size += 1 + 8;
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double skew = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_skew_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_skew_size());
    total_size += data_size;
  }

  // repeated double velocity_random_walk = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_velocity_random_walk_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_velocity_random_walk_size());
    total_size += data_size;
  }

  // repeated double bias_stability = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_bias_stability_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_bias_stability_size());
    total_size += data_size;
  }

  // repeated double output_noise = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_output_noise_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_output_noise_size());
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AcceleratorPara::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:civ.civloc.AcceleratorPara)
  GOOGLE_DCHECK_NE(&from, this);
  const AcceleratorPara* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AcceleratorPara>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:civ.civloc.AcceleratorPara)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:civ.civloc.AcceleratorPara)
    MergeFrom(*source);
  }
}

void AcceleratorPara::MergeFrom(const AcceleratorPara& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:civ.civloc.AcceleratorPara)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  skew_.MergeFrom(from.skew_);
  velocity_random_walk_.MergeFrom(from.velocity_random_walk_);
  bias_stability_.MergeFrom(from.bias_stability_);
  output_noise_.MergeFrom(from.output_noise_);
  if (from._internal_has_related_time_s()) {
    _internal_set_related_time_s(from._internal_related_time_s());
  }
}

void AcceleratorPara::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:civ.civloc.AcceleratorPara)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AcceleratorPara::CopyFrom(const AcceleratorPara& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:civ.civloc.AcceleratorPara)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AcceleratorPara::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void AcceleratorPara::InternalSwap(AcceleratorPara* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  skew_.InternalSwap(&other->skew_);
  velocity_random_walk_.InternalSwap(&other->velocity_random_walk_);
  bias_stability_.InternalSwap(&other->bias_stability_);
  output_noise_.InternalSwap(&other->output_noise_);
  swap(related_time_s_, other->related_time_s_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AcceleratorPara::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GyroscopePara::_Internal {
 public:
  using HasBits = decltype(std::declval<GyroscopePara>()._has_bits_);
  static void set_has_related_time_s(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

GyroscopePara::GyroscopePara(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  skew_(arena),
  angle_random_walk_(arena),
  bias_stability_(arena),
  output_noise_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:civ.civloc.GyroscopePara)
}
GyroscopePara::GyroscopePara(const GyroscopePara& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      skew_(from.skew_),
      angle_random_walk_(from.angle_random_walk_),
      bias_stability_(from.bias_stability_),
      output_noise_(from.output_noise_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  related_time_s_ = from.related_time_s_;
  // @@protoc_insertion_point(copy_constructor:civ.civloc.GyroscopePara)
}

void GyroscopePara::SharedCtor() {
  related_time_s_ = 0;
}

GyroscopePara::~GyroscopePara() {
  // @@protoc_insertion_point(destructor:civ.civloc.GyroscopePara)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GyroscopePara::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GyroscopePara::ArenaDtor(void* object) {
  GyroscopePara* _this = reinterpret_cast< GyroscopePara* >(object);
  (void)_this;
}
void GyroscopePara::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GyroscopePara::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GyroscopePara& GyroscopePara::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GyroscopePara_civloc_2fproto_2fsensors_5fsetting_2eproto.base);
  return *internal_default_instance();
}


void GyroscopePara::Clear() {
// @@protoc_insertion_point(message_clear_start:civ.civloc.GyroscopePara)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  skew_.Clear();
  angle_random_walk_.Clear();
  bias_stability_.Clear();
  output_noise_.Clear();
  related_time_s_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GyroscopePara::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated double skew = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_skew(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<9>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_skew(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated double angle_random_walk = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_angle_random_walk(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<17>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_angle_random_walk(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated double bias_stability = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_bias_stability(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<25>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_bias_stability(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required double related_time_s = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_related_time_s(&has_bits);
          related_time_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated double output_noise = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_output_noise(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<41>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_output_noise(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GyroscopePara::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:civ.civloc.GyroscopePara)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated double skew = 1;
  for (int i = 0, n = this->_internal_skew_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_skew(i), target);
  }

  // repeated double angle_random_walk = 2;
  for (int i = 0, n = this->_internal_angle_random_walk_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_angle_random_walk(i), target);
  }

  // repeated double bias_stability = 3;
  for (int i = 0, n = this->_internal_bias_stability_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_bias_stability(i), target);
  }

  cached_has_bits = _has_bits_[0];
  // required double related_time_s = 4;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_related_time_s(), target);
  }

  // repeated double output_noise = 5;
  for (int i = 0, n = this->_internal_output_noise_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_output_noise(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:civ.civloc.GyroscopePara)
  return target;
}

size_t GyroscopePara::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:civ.civloc.GyroscopePara)
  size_t total_size = 0;

  // required double related_time_s = 4;
  if (_internal_has_related_time_s()) {
    total_size += 1 + 8;
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double skew = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_skew_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_skew_size());
    total_size += data_size;
  }

  // repeated double angle_random_walk = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_angle_random_walk_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_angle_random_walk_size());
    total_size += data_size;
  }

  // repeated double bias_stability = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_bias_stability_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_bias_stability_size());
    total_size += data_size;
  }

  // repeated double output_noise = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_output_noise_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_output_noise_size());
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GyroscopePara::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:civ.civloc.GyroscopePara)
  GOOGLE_DCHECK_NE(&from, this);
  const GyroscopePara* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GyroscopePara>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:civ.civloc.GyroscopePara)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:civ.civloc.GyroscopePara)
    MergeFrom(*source);
  }
}

void GyroscopePara::MergeFrom(const GyroscopePara& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:civ.civloc.GyroscopePara)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  skew_.MergeFrom(from.skew_);
  angle_random_walk_.MergeFrom(from.angle_random_walk_);
  bias_stability_.MergeFrom(from.bias_stability_);
  output_noise_.MergeFrom(from.output_noise_);
  if (from._internal_has_related_time_s()) {
    _internal_set_related_time_s(from._internal_related_time_s());
  }
}

void GyroscopePara::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:civ.civloc.GyroscopePara)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GyroscopePara::CopyFrom(const GyroscopePara& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:civ.civloc.GyroscopePara)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GyroscopePara::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void GyroscopePara::InternalSwap(GyroscopePara* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  skew_.InternalSwap(&other->skew_);
  angle_random_walk_.InternalSwap(&other->angle_random_walk_);
  bias_stability_.InternalSwap(&other->bias_stability_);
  output_noise_.InternalSwap(&other->output_noise_);
  swap(related_time_s_, other->related_time_s_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GyroscopePara::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ImuPara::_Internal {
 public:
  using HasBits = decltype(std::declval<ImuPara>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_rate_hz(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::civ::civloc::AcceleratorPara& acc(const ImuPara* msg);
  static void set_has_acc(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::civ::civloc::GyroscopePara& gyr(const ImuPara* msg);
  static void set_has_gyr(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::civ::civloc::Extrinsic& ex_para(const ImuPara* msg);
  static void set_has_ex_para(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000001f) ^ 0x0000001f) != 0;
  }
};

const ::civ::civloc::AcceleratorPara&
ImuPara::_Internal::acc(const ImuPara* msg) {
  return *msg->acc_;
}
const ::civ::civloc::GyroscopePara&
ImuPara::_Internal::gyr(const ImuPara* msg) {
  return *msg->gyr_;
}
const ::civ::civloc::Extrinsic&
ImuPara::_Internal::ex_para(const ImuPara* msg) {
  return *msg->ex_para_;
}
ImuPara::ImuPara(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  rot_gyr_acc_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:civ.civloc.ImuPara)
}
ImuPara::ImuPara(const ImuPara& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      rot_gyr_acc_(from.rot_gyr_acc_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  if (from._internal_has_acc()) {
    acc_ = new ::civ::civloc::AcceleratorPara(*from.acc_);
  } else {
    acc_ = nullptr;
  }
  if (from._internal_has_gyr()) {
    gyr_ = new ::civ::civloc::GyroscopePara(*from.gyr_);
  } else {
    gyr_ = nullptr;
  }
  if (from._internal_has_ex_para()) {
    ex_para_ = new ::civ::civloc::Extrinsic(*from.ex_para_);
  } else {
    ex_para_ = nullptr;
  }
  rate_hz_ = from.rate_hz_;
  // @@protoc_insertion_point(copy_constructor:civ.civloc.ImuPara)
}

void ImuPara::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ImuPara_civloc_2fproto_2fsensors_5fsetting_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&acc_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&rate_hz_) -
      reinterpret_cast<char*>(&acc_)) + sizeof(rate_hz_));
}

ImuPara::~ImuPara() {
  // @@protoc_insertion_point(destructor:civ.civloc.ImuPara)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ImuPara::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete acc_;
  if (this != internal_default_instance()) delete gyr_;
  if (this != internal_default_instance()) delete ex_para_;
}

void ImuPara::ArenaDtor(void* object) {
  ImuPara* _this = reinterpret_cast< ImuPara* >(object);
  (void)_this;
}
void ImuPara::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ImuPara::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ImuPara& ImuPara::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ImuPara_civloc_2fproto_2fsensors_5fsetting_2eproto.base);
  return *internal_default_instance();
}


void ImuPara::Clear() {
// @@protoc_insertion_point(message_clear_start:civ.civloc.ImuPara)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rot_gyr_acc_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(acc_ != nullptr);
      acc_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(gyr_ != nullptr);
      gyr_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(ex_para_ != nullptr);
      ex_para_->Clear();
    }
  }
  rate_hz_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ImuPara::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "civ.civloc.ImuPara.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 rate_hz = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_rate_hz(&has_bits);
          rate_hz_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .civ.civloc.AcceleratorPara acc = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_acc(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .civ.civloc.GyroscopePara gyr = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_gyr(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated double rot_gyr_acc = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_rot_gyr_acc(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<41>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_rot_gyr_acc(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .civ.civloc.Extrinsic ex_para = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_ex_para(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ImuPara::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:civ.civloc.ImuPara)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "civ.civloc.ImuPara.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // required int32 rate_hz = 2;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_rate_hz(), target);
  }

  // required .civ.civloc.AcceleratorPara acc = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::acc(this), target, stream);
  }

  // required .civ.civloc.GyroscopePara gyr = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::gyr(this), target, stream);
  }

  // repeated double rot_gyr_acc = 5;
  for (int i = 0, n = this->_internal_rot_gyr_acc_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_rot_gyr_acc(i), target);
  }

  // required .civ.civloc.Extrinsic ex_para = 6;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::ex_para(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:civ.civloc.ImuPara)
  return target;
}

size_t ImuPara::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:civ.civloc.ImuPara)
  size_t total_size = 0;

  if (_internal_has_name()) {
    // required string name = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (_internal_has_acc()) {
    // required .civ.civloc.AcceleratorPara acc = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *acc_);
  }

  if (_internal_has_gyr()) {
    // required .civ.civloc.GyroscopePara gyr = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *gyr_);
  }

  if (_internal_has_ex_para()) {
    // required .civ.civloc.Extrinsic ex_para = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ex_para_);
  }

  if (_internal_has_rate_hz()) {
    // required int32 rate_hz = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_rate_hz());
  }

  return total_size;
}
size_t ImuPara::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:civ.civloc.ImuPara)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required string name = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());

    // required .civ.civloc.AcceleratorPara acc = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *acc_);

    // required .civ.civloc.GyroscopePara gyr = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *gyr_);

    // required .civ.civloc.Extrinsic ex_para = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ex_para_);

    // required int32 rate_hz = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_rate_hz());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double rot_gyr_acc = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_rot_gyr_acc_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_rot_gyr_acc_size());
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ImuPara::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:civ.civloc.ImuPara)
  GOOGLE_DCHECK_NE(&from, this);
  const ImuPara* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ImuPara>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:civ.civloc.ImuPara)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:civ.civloc.ImuPara)
    MergeFrom(*source);
  }
}

void ImuPara::MergeFrom(const ImuPara& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:civ.civloc.ImuPara)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  rot_gyr_acc_.MergeFrom(from.rot_gyr_acc_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_acc()->::civ::civloc::AcceleratorPara::MergeFrom(from._internal_acc());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_gyr()->::civ::civloc::GyroscopePara::MergeFrom(from._internal_gyr());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_ex_para()->::civ::civloc::Extrinsic::MergeFrom(from._internal_ex_para());
    }
    if (cached_has_bits & 0x00000010u) {
      rate_hz_ = from.rate_hz_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ImuPara::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:civ.civloc.ImuPara)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImuPara::CopyFrom(const ImuPara& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:civ.civloc.ImuPara)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImuPara::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_acc()) {
    if (!acc_->IsInitialized()) return false;
  }
  if (_internal_has_gyr()) {
    if (!gyr_->IsInitialized()) return false;
  }
  if (_internal_has_ex_para()) {
    if (!ex_para_->IsInitialized()) return false;
  }
  return true;
}

void ImuPara::InternalSwap(ImuPara* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  rot_gyr_acc_.InternalSwap(&other->rot_gyr_acc_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ImuPara, rate_hz_)
      + sizeof(ImuPara::rate_hz_)
      - PROTOBUF_FIELD_OFFSET(ImuPara, acc_)>(
          reinterpret_cast<char*>(&acc_),
          reinterpret_cast<char*>(&other->acc_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ImuPara::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GnssPara::_Internal {
 public:
  using HasBits = decltype(std::declval<GnssPara>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_rate_hz(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_with_differential_information(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::civ::civloc::Extrinsic& ex_para(const GnssPara* msg);
  static void set_has_ex_para(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000f) ^ 0x0000000f) != 0;
  }
};

const ::civ::civloc::Extrinsic&
GnssPara::_Internal::ex_para(const GnssPara* msg) {
  return *msg->ex_para_;
}
GnssPara::GnssPara(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:civ.civloc.GnssPara)
}
GnssPara::GnssPara(const GnssPara& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  if (from._internal_has_ex_para()) {
    ex_para_ = new ::civ::civloc::Extrinsic(*from.ex_para_);
  } else {
    ex_para_ = nullptr;
  }
  ::memcpy(&rate_hz_, &from.rate_hz_,
    static_cast<size_t>(reinterpret_cast<char*>(&with_differential_information_) -
    reinterpret_cast<char*>(&rate_hz_)) + sizeof(with_differential_information_));
  // @@protoc_insertion_point(copy_constructor:civ.civloc.GnssPara)
}

void GnssPara::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GnssPara_civloc_2fproto_2fsensors_5fsetting_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&ex_para_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&with_differential_information_) -
      reinterpret_cast<char*>(&ex_para_)) + sizeof(with_differential_information_));
}

GnssPara::~GnssPara() {
  // @@protoc_insertion_point(destructor:civ.civloc.GnssPara)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GnssPara::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete ex_para_;
}

void GnssPara::ArenaDtor(void* object) {
  GnssPara* _this = reinterpret_cast< GnssPara* >(object);
  (void)_this;
}
void GnssPara::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GnssPara::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GnssPara& GnssPara::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GnssPara_civloc_2fproto_2fsensors_5fsetting_2eproto.base);
  return *internal_default_instance();
}


void GnssPara::Clear() {
// @@protoc_insertion_point(message_clear_start:civ.civloc.GnssPara)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(ex_para_ != nullptr);
      ex_para_->Clear();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&rate_hz_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&with_differential_information_) -
        reinterpret_cast<char*>(&rate_hz_)) + sizeof(with_differential_information_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GnssPara::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "civ.civloc.GnssPara.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 rate_hz = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_rate_hz(&has_bits);
          rate_hz_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool with_differential_information = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_with_differential_information(&has_bits);
          with_differential_information_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .civ.civloc.Extrinsic ex_para = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_ex_para(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GnssPara::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:civ.civloc.GnssPara)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "civ.civloc.GnssPara.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // required int32 rate_hz = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_rate_hz(), target);
  }

  // required bool with_differential_information = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_with_differential_information(), target);
  }

  // required .civ.civloc.Extrinsic ex_para = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::ex_para(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:civ.civloc.GnssPara)
  return target;
}

size_t GnssPara::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:civ.civloc.GnssPara)
  size_t total_size = 0;

  if (_internal_has_name()) {
    // required string name = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (_internal_has_ex_para()) {
    // required .civ.civloc.Extrinsic ex_para = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ex_para_);
  }

  if (_internal_has_rate_hz()) {
    // required int32 rate_hz = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_rate_hz());
  }

  if (_internal_has_with_differential_information()) {
    // required bool with_differential_information = 3;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t GnssPara::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:civ.civloc.GnssPara)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required string name = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());

    // required .civ.civloc.Extrinsic ex_para = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ex_para_);

    // required int32 rate_hz = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_rate_hz());

    // required bool with_differential_information = 3;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GnssPara::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:civ.civloc.GnssPara)
  GOOGLE_DCHECK_NE(&from, this);
  const GnssPara* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GnssPara>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:civ.civloc.GnssPara)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:civ.civloc.GnssPara)
    MergeFrom(*source);
  }
}

void GnssPara::MergeFrom(const GnssPara& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:civ.civloc.GnssPara)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_ex_para()->::civ::civloc::Extrinsic::MergeFrom(from._internal_ex_para());
    }
    if (cached_has_bits & 0x00000004u) {
      rate_hz_ = from.rate_hz_;
    }
    if (cached_has_bits & 0x00000008u) {
      with_differential_information_ = from.with_differential_information_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GnssPara::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:civ.civloc.GnssPara)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GnssPara::CopyFrom(const GnssPara& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:civ.civloc.GnssPara)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GnssPara::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_ex_para()) {
    if (!ex_para_->IsInitialized()) return false;
  }
  return true;
}

void GnssPara::InternalSwap(GnssPara* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GnssPara, with_differential_information_)
      + sizeof(GnssPara::with_differential_information_)
      - PROTOBUF_FIELD_OFFSET(GnssPara, ex_para_)>(
          reinterpret_cast<char*>(&ex_para_),
          reinterpret_cast<char*>(&other->ex_para_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GnssPara::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CameraPara::_Internal {
 public:
  using HasBits = decltype(std::declval<CameraPara>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_rate_hz(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_projection_model(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_distortion_model(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::civ::civloc::Extrinsic& ex_para(const CameraPara* msg);
  static void set_has_ex_para(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000001f) ^ 0x0000001f) != 0;
  }
};

const ::civ::civloc::Extrinsic&
CameraPara::_Internal::ex_para(const CameraPara* msg) {
  return *msg->ex_para_;
}
CameraPara::CameraPara(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  resolution_(arena),
  k_(arena),
  distortion_coff__(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:civ.civloc.CameraPara)
}
CameraPara::CameraPara(const CameraPara& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      resolution_(from.resolution_),
      k_(from.k_),
      distortion_coff__(from.distortion_coff__) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  if (from._internal_has_ex_para()) {
    ex_para_ = new ::civ::civloc::Extrinsic(*from.ex_para_);
  } else {
    ex_para_ = nullptr;
  }
  ::memcpy(&rate_hz_, &from.rate_hz_,
    static_cast<size_t>(reinterpret_cast<char*>(&distortion_model_) -
    reinterpret_cast<char*>(&rate_hz_)) + sizeof(distortion_model_));
  // @@protoc_insertion_point(copy_constructor:civ.civloc.CameraPara)
}

void CameraPara::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CameraPara_civloc_2fproto_2fsensors_5fsetting_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&ex_para_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&distortion_model_) -
      reinterpret_cast<char*>(&ex_para_)) + sizeof(distortion_model_));
}

CameraPara::~CameraPara() {
  // @@protoc_insertion_point(destructor:civ.civloc.CameraPara)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CameraPara::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete ex_para_;
}

void CameraPara::ArenaDtor(void* object) {
  CameraPara* _this = reinterpret_cast< CameraPara* >(object);
  (void)_this;
}
void CameraPara::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CameraPara::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CameraPara& CameraPara::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CameraPara_civloc_2fproto_2fsensors_5fsetting_2eproto.base);
  return *internal_default_instance();
}


void CameraPara::Clear() {
// @@protoc_insertion_point(message_clear_start:civ.civloc.CameraPara)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  resolution_.Clear();
  k_.Clear();
  distortion_coff__.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(ex_para_ != nullptr);
      ex_para_->Clear();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&rate_hz_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&distortion_model_) -
        reinterpret_cast<char*>(&rate_hz_)) + sizeof(distortion_model_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CameraPara::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "civ.civloc.CameraPara.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 rate_hz = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_rate_hz(&has_bits);
          rate_hz_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated double resolution = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_resolution(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<25>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_resolution(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated double K = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_k(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<41>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_k(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .civ.civloc.CameraPara.ProjectionModel projection_model = 6 [default = Pinhole];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::civ::civloc::CameraPara_ProjectionModel_IsValid(val))) {
            _internal_set_projection_model(static_cast<::civ::civloc::CameraPara_ProjectionModel>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(6, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // required .civ.civloc.CameraPara.DistortionModel distortion_model = 7 [default = Radtan];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::civ::civloc::CameraPara_DistortionModel_IsValid(val))) {
            _internal_set_distortion_model(static_cast<::civ::civloc::CameraPara_DistortionModel>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(7, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // repeated double distortion_coff_ = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_distortion_coff_(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<65>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_distortion_coff_(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .civ.civloc.Extrinsic ex_para = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_ex_para(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CameraPara::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:civ.civloc.CameraPara)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "civ.civloc.CameraPara.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // required int32 rate_hz = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_rate_hz(), target);
  }

  // repeated double resolution = 3;
  for (int i = 0, n = this->_internal_resolution_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_resolution(i), target);
  }

  // repeated double K = 5;
  for (int i = 0, n = this->_internal_k_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_k(i), target);
  }

  // required .civ.civloc.CameraPara.ProjectionModel projection_model = 6 [default = Pinhole];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_projection_model(), target);
  }

  // required .civ.civloc.CameraPara.DistortionModel distortion_model = 7 [default = Radtan];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      7, this->_internal_distortion_model(), target);
  }

  // repeated double distortion_coff_ = 8;
  for (int i = 0, n = this->_internal_distortion_coff__size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_distortion_coff_(i), target);
  }

  // required .civ.civloc.Extrinsic ex_para = 10;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::ex_para(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:civ.civloc.CameraPara)
  return target;
}

size_t CameraPara::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:civ.civloc.CameraPara)
  size_t total_size = 0;

  if (_internal_has_name()) {
    // required string name = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (_internal_has_ex_para()) {
    // required .civ.civloc.Extrinsic ex_para = 10;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ex_para_);
  }

  if (_internal_has_rate_hz()) {
    // required int32 rate_hz = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_rate_hz());
  }

  if (_internal_has_projection_model()) {
    // required .civ.civloc.CameraPara.ProjectionModel projection_model = 6 [default = Pinhole];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_projection_model());
  }

  if (_internal_has_distortion_model()) {
    // required .civ.civloc.CameraPara.DistortionModel distortion_model = 7 [default = Radtan];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_distortion_model());
  }

  return total_size;
}
size_t CameraPara::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:civ.civloc.CameraPara)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required string name = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());

    // required .civ.civloc.Extrinsic ex_para = 10;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ex_para_);

    // required int32 rate_hz = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_rate_hz());

    // required .civ.civloc.CameraPara.ProjectionModel projection_model = 6 [default = Pinhole];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_projection_model());

    // required .civ.civloc.CameraPara.DistortionModel distortion_model = 7 [default = Radtan];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_distortion_model());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double resolution = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_resolution_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_resolution_size());
    total_size += data_size;
  }

  // repeated double K = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_k_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_k_size());
    total_size += data_size;
  }

  // repeated double distortion_coff_ = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_distortion_coff__size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_distortion_coff__size());
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CameraPara::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:civ.civloc.CameraPara)
  GOOGLE_DCHECK_NE(&from, this);
  const CameraPara* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CameraPara>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:civ.civloc.CameraPara)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:civ.civloc.CameraPara)
    MergeFrom(*source);
  }
}

void CameraPara::MergeFrom(const CameraPara& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:civ.civloc.CameraPara)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  resolution_.MergeFrom(from.resolution_);
  k_.MergeFrom(from.k_);
  distortion_coff__.MergeFrom(from.distortion_coff__);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_ex_para()->::civ::civloc::Extrinsic::MergeFrom(from._internal_ex_para());
    }
    if (cached_has_bits & 0x00000004u) {
      rate_hz_ = from.rate_hz_;
    }
    if (cached_has_bits & 0x00000008u) {
      projection_model_ = from.projection_model_;
    }
    if (cached_has_bits & 0x00000010u) {
      distortion_model_ = from.distortion_model_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CameraPara::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:civ.civloc.CameraPara)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CameraPara::CopyFrom(const CameraPara& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:civ.civloc.CameraPara)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CameraPara::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_ex_para()) {
    if (!ex_para_->IsInitialized()) return false;
  }
  return true;
}

void CameraPara::InternalSwap(CameraPara* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  resolution_.InternalSwap(&other->resolution_);
  k_.InternalSwap(&other->k_);
  distortion_coff__.InternalSwap(&other->distortion_coff__);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CameraPara, distortion_model_)
      + sizeof(CameraPara::distortion_model_)
      - PROTOBUF_FIELD_OFFSET(CameraPara, ex_para_)>(
          reinterpret_cast<char*>(&ex_para_),
          reinterpret_cast<char*>(&other->ex_para_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CameraPara::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PerceptionPara::_Internal {
 public:
  using HasBits = decltype(std::declval<PerceptionPara>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::civ::civloc::CameraPara& cam_para(const PerceptionPara* msg);
  static void set_has_cam_para(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

const ::civ::civloc::CameraPara&
PerceptionPara::_Internal::cam_para(const PerceptionPara* msg) {
  return *msg->cam_para_;
}
PerceptionPara::PerceptionPara(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:civ.civloc.PerceptionPara)
}
PerceptionPara::PerceptionPara(const PerceptionPara& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  if (from._internal_has_cam_para()) {
    cam_para_ = new ::civ::civloc::CameraPara(*from.cam_para_);
  } else {
    cam_para_ = nullptr;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:civ.civloc.PerceptionPara)
}

void PerceptionPara::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PerceptionPara_civloc_2fproto_2fsensors_5fsetting_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cam_para_ = nullptr;
  type_ = 1;
}

PerceptionPara::~PerceptionPara() {
  // @@protoc_insertion_point(destructor:civ.civloc.PerceptionPara)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PerceptionPara::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete cam_para_;
}

void PerceptionPara::ArenaDtor(void* object) {
  PerceptionPara* _this = reinterpret_cast< PerceptionPara* >(object);
  (void)_this;
}
void PerceptionPara::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PerceptionPara::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PerceptionPara& PerceptionPara::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PerceptionPara_civloc_2fproto_2fsensors_5fsetting_2eproto.base);
  return *internal_default_instance();
}


void PerceptionPara::Clear() {
// @@protoc_insertion_point(message_clear_start:civ.civloc.PerceptionPara)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(cam_para_ != nullptr);
      cam_para_->Clear();
    }
    type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PerceptionPara::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "civ.civloc.PerceptionPara.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .civ.civloc.PerceptionPara.Type type = 2 [default = BEV_XY];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::civ::civloc::PerceptionPara_Type_IsValid(val))) {
            _internal_set_type(static_cast<::civ::civloc::PerceptionPara_Type>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // required .civ.civloc.CameraPara cam_para = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_cam_para(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PerceptionPara::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:civ.civloc.PerceptionPara)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "civ.civloc.PerceptionPara.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // required .civ.civloc.PerceptionPara.Type type = 2 [default = BEV_XY];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  // required .civ.civloc.CameraPara cam_para = 5;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::cam_para(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:civ.civloc.PerceptionPara)
  return target;
}

size_t PerceptionPara::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:civ.civloc.PerceptionPara)
  size_t total_size = 0;

  if (_internal_has_name()) {
    // required string name = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (_internal_has_cam_para()) {
    // required .civ.civloc.CameraPara cam_para = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cam_para_);
  }

  if (_internal_has_type()) {
    // required .civ.civloc.PerceptionPara.Type type = 2 [default = BEV_XY];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  return total_size;
}
size_t PerceptionPara::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:civ.civloc.PerceptionPara)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string name = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());

    // required .civ.civloc.CameraPara cam_para = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cam_para_);

    // required .civ.civloc.PerceptionPara.Type type = 2 [default = BEV_XY];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PerceptionPara::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:civ.civloc.PerceptionPara)
  GOOGLE_DCHECK_NE(&from, this);
  const PerceptionPara* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PerceptionPara>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:civ.civloc.PerceptionPara)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:civ.civloc.PerceptionPara)
    MergeFrom(*source);
  }
}

void PerceptionPara::MergeFrom(const PerceptionPara& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:civ.civloc.PerceptionPara)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_cam_para()->::civ::civloc::CameraPara::MergeFrom(from._internal_cam_para());
    }
    if (cached_has_bits & 0x00000004u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PerceptionPara::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:civ.civloc.PerceptionPara)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PerceptionPara::CopyFrom(const PerceptionPara& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:civ.civloc.PerceptionPara)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PerceptionPara::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_cam_para()) {
    if (!cam_para_->IsInitialized()) return false;
  }
  return true;
}

void PerceptionPara::InternalSwap(PerceptionPara* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(cam_para_, other->cam_para_);
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PerceptionPara::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class WheelOdoPara::_Internal {
 public:
  using HasBits = decltype(std::declval<WheelOdoPara>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_rate_hz(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_w(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_l1(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_l2(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000001f) ^ 0x0000001f) != 0;
  }
};

WheelOdoPara::WheelOdoPara(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  ko_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:civ.civloc.WheelOdoPara)
}
WheelOdoPara::WheelOdoPara(const WheelOdoPara& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      ko_(from.ko_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  ::memcpy(&w_, &from.w_,
    static_cast<size_t>(reinterpret_cast<char*>(&rate_hz_) -
    reinterpret_cast<char*>(&w_)) + sizeof(rate_hz_));
  // @@protoc_insertion_point(copy_constructor:civ.civloc.WheelOdoPara)
}

void WheelOdoPara::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_WheelOdoPara_civloc_2fproto_2fsensors_5fsetting_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&w_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&rate_hz_) -
      reinterpret_cast<char*>(&w_)) + sizeof(rate_hz_));
}

WheelOdoPara::~WheelOdoPara() {
  // @@protoc_insertion_point(destructor:civ.civloc.WheelOdoPara)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void WheelOdoPara::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void WheelOdoPara::ArenaDtor(void* object) {
  WheelOdoPara* _this = reinterpret_cast< WheelOdoPara* >(object);
  (void)_this;
}
void WheelOdoPara::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WheelOdoPara::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WheelOdoPara& WheelOdoPara::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WheelOdoPara_civloc_2fproto_2fsensors_5fsetting_2eproto.base);
  return *internal_default_instance();
}


void WheelOdoPara::Clear() {
// @@protoc_insertion_point(message_clear_start:civ.civloc.WheelOdoPara)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ko_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&w_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&rate_hz_) -
        reinterpret_cast<char*>(&w_)) + sizeof(rate_hz_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WheelOdoPara::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "civ.civloc.WheelOdoPara.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 rate_hz = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_rate_hz(&has_bits);
          rate_hz_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required double w = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_w(&has_bits);
          w_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required double l1 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_l1(&has_bits);
          l1_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required double l2 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_l2(&has_bits);
          l2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated double ko = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_ko(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<49>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_ko(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WheelOdoPara::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:civ.civloc.WheelOdoPara)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "civ.civloc.WheelOdoPara.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // required int32 rate_hz = 2;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_rate_hz(), target);
  }

  // required double w = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_w(), target);
  }

  // required double l1 = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_l1(), target);
  }

  // required double l2 = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_l2(), target);
  }

  // repeated double ko = 6;
  for (int i = 0, n = this->_internal_ko_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_ko(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:civ.civloc.WheelOdoPara)
  return target;
}

size_t WheelOdoPara::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:civ.civloc.WheelOdoPara)
  size_t total_size = 0;

  if (_internal_has_name()) {
    // required string name = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (_internal_has_w()) {
    // required double w = 3;
    total_size += 1 + 8;
  }

  if (_internal_has_l1()) {
    // required double l1 = 4;
    total_size += 1 + 8;
  }

  if (_internal_has_l2()) {
    // required double l2 = 5;
    total_size += 1 + 8;
  }

  if (_internal_has_rate_hz()) {
    // required int32 rate_hz = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_rate_hz());
  }

  return total_size;
}
size_t WheelOdoPara::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:civ.civloc.WheelOdoPara)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required string name = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());

    // required double w = 3;
    total_size += 1 + 8;

    // required double l1 = 4;
    total_size += 1 + 8;

    // required double l2 = 5;
    total_size += 1 + 8;

    // required int32 rate_hz = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_rate_hz());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double ko = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_ko_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_ko_size());
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WheelOdoPara::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:civ.civloc.WheelOdoPara)
  GOOGLE_DCHECK_NE(&from, this);
  const WheelOdoPara* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WheelOdoPara>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:civ.civloc.WheelOdoPara)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:civ.civloc.WheelOdoPara)
    MergeFrom(*source);
  }
}

void WheelOdoPara::MergeFrom(const WheelOdoPara& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:civ.civloc.WheelOdoPara)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ko_.MergeFrom(from.ko_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      w_ = from.w_;
    }
    if (cached_has_bits & 0x00000004u) {
      l1_ = from.l1_;
    }
    if (cached_has_bits & 0x00000008u) {
      l2_ = from.l2_;
    }
    if (cached_has_bits & 0x00000010u) {
      rate_hz_ = from.rate_hz_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void WheelOdoPara::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:civ.civloc.WheelOdoPara)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WheelOdoPara::CopyFrom(const WheelOdoPara& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:civ.civloc.WheelOdoPara)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WheelOdoPara::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void WheelOdoPara::InternalSwap(WheelOdoPara* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ko_.InternalSwap(&other->ko_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WheelOdoPara, rate_hz_)
      + sizeof(WheelOdoPara::rate_hz_)
      - PROTOBUF_FIELD_OFFSET(WheelOdoPara, w_)>(
          reinterpret_cast<char*>(&w_),
          reinterpret_cast<char*>(&other->w_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WheelOdoPara::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class LidarPara::_Internal {
 public:
  using HasBits = decltype(std::declval<LidarPara>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_rate_hz(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::civ::civloc::Extrinsic& ex_para(const LidarPara* msg);
  static void set_has_ex_para(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

const ::civ::civloc::Extrinsic&
LidarPara::_Internal::ex_para(const LidarPara* msg) {
  return *msg->ex_para_;
}
LidarPara::LidarPara(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:civ.civloc.LidarPara)
}
LidarPara::LidarPara(const LidarPara& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  if (from._internal_has_ex_para()) {
    ex_para_ = new ::civ::civloc::Extrinsic(*from.ex_para_);
  } else {
    ex_para_ = nullptr;
  }
  rate_hz_ = from.rate_hz_;
  // @@protoc_insertion_point(copy_constructor:civ.civloc.LidarPara)
}

void LidarPara::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LidarPara_civloc_2fproto_2fsensors_5fsetting_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&ex_para_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&rate_hz_) -
      reinterpret_cast<char*>(&ex_para_)) + sizeof(rate_hz_));
}

LidarPara::~LidarPara() {
  // @@protoc_insertion_point(destructor:civ.civloc.LidarPara)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LidarPara::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete ex_para_;
}

void LidarPara::ArenaDtor(void* object) {
  LidarPara* _this = reinterpret_cast< LidarPara* >(object);
  (void)_this;
}
void LidarPara::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LidarPara::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LidarPara& LidarPara::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LidarPara_civloc_2fproto_2fsensors_5fsetting_2eproto.base);
  return *internal_default_instance();
}


void LidarPara::Clear() {
// @@protoc_insertion_point(message_clear_start:civ.civloc.LidarPara)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(ex_para_ != nullptr);
      ex_para_->Clear();
    }
  }
  rate_hz_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LidarPara::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "civ.civloc.LidarPara.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 rate_hz = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_rate_hz(&has_bits);
          rate_hz_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .civ.civloc.Extrinsic ex_para = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_ex_para(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LidarPara::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:civ.civloc.LidarPara)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "civ.civloc.LidarPara.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // required int32 rate_hz = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_rate_hz(), target);
  }

  // required .civ.civloc.Extrinsic ex_para = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::ex_para(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:civ.civloc.LidarPara)
  return target;
}

size_t LidarPara::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:civ.civloc.LidarPara)
  size_t total_size = 0;

  if (_internal_has_name()) {
    // required string name = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (_internal_has_ex_para()) {
    // required .civ.civloc.Extrinsic ex_para = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ex_para_);
  }

  if (_internal_has_rate_hz()) {
    // required int32 rate_hz = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_rate_hz());
  }

  return total_size;
}
size_t LidarPara::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:civ.civloc.LidarPara)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string name = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());

    // required .civ.civloc.Extrinsic ex_para = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ex_para_);

    // required int32 rate_hz = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_rate_hz());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LidarPara::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:civ.civloc.LidarPara)
  GOOGLE_DCHECK_NE(&from, this);
  const LidarPara* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LidarPara>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:civ.civloc.LidarPara)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:civ.civloc.LidarPara)
    MergeFrom(*source);
  }
}

void LidarPara::MergeFrom(const LidarPara& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:civ.civloc.LidarPara)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_ex_para()->::civ::civloc::Extrinsic::MergeFrom(from._internal_ex_para());
    }
    if (cached_has_bits & 0x00000004u) {
      rate_hz_ = from.rate_hz_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LidarPara::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:civ.civloc.LidarPara)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LidarPara::CopyFrom(const LidarPara& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:civ.civloc.LidarPara)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LidarPara::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_ex_para()) {
    if (!ex_para_->IsInitialized()) return false;
  }
  return true;
}

void LidarPara::InternalSwap(LidarPara* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LidarPara, rate_hz_)
      + sizeof(LidarPara::rate_hz_)
      - PROTOBUF_FIELD_OFFSET(LidarPara, ex_para_)>(
          reinterpret_cast<char*>(&ex_para_),
          reinterpret_cast<char*>(&other->ex_para_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LidarPara::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SensorsSetting::_Internal {
 public:
  using HasBits = decltype(std::declval<SensorsSetting>()._has_bits_);
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_vehicle_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::civ::civloc::WheelOdoPara& wheel(const SensorsSetting* msg);
  static void set_has_wheel(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::civ::civloc::LidarPara& lidar(const SensorsSetting* msg);
  static void set_has_lidar(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::civ::civloc::WheelOdoPara&
SensorsSetting::_Internal::wheel(const SensorsSetting* msg) {
  return *msg->wheel_;
}
const ::civ::civloc::LidarPara&
SensorsSetting::_Internal::lidar(const SensorsSetting* msg) {
  return *msg->lidar_;
}
const ::PROTOBUF_NAMESPACE_ID::internal::LazyString SensorsSetting::_i_give_permission_to_break_this_code_default_version_{{{"1.0.0", 5}}, {nullptr}};
SensorsSetting::SensorsSetting(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  imu_(arena),
  gnss_(arena),
  perc_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:civ.civloc.SensorsSetting)
}
SensorsSetting::SensorsSetting(const SensorsSetting& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      imu_(from.imu_),
      gnss_(from.gnss_),
      perc_(from.perc_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  version_.UnsafeSetDefault(nullptr);
  if (from._internal_has_version()) {
    version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, from._internal_version(), 
      GetArena());
  }
  vehicle_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_vehicle_name()) {
    vehicle_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_vehicle_name(), 
      GetArena());
  }
  if (from._internal_has_wheel()) {
    wheel_ = new ::civ::civloc::WheelOdoPara(*from.wheel_);
  } else {
    wheel_ = nullptr;
  }
  if (from._internal_has_lidar()) {
    lidar_ = new ::civ::civloc::LidarPara(*from.lidar_);
  } else {
    lidar_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:civ.civloc.SensorsSetting)
}

void SensorsSetting::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SensorsSetting_civloc_2fproto_2fsensors_5fsetting_2eproto.base);
  version_.UnsafeSetDefault(nullptr);
  vehicle_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&wheel_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&lidar_) -
      reinterpret_cast<char*>(&wheel_)) + sizeof(lidar_));
}

SensorsSetting::~SensorsSetting() {
  // @@protoc_insertion_point(destructor:civ.civloc.SensorsSetting)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SensorsSetting::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  version_.DestroyNoArena(nullptr);
  vehicle_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete wheel_;
  if (this != internal_default_instance()) delete lidar_;
}

void SensorsSetting::ArenaDtor(void* object) {
  SensorsSetting* _this = reinterpret_cast< SensorsSetting* >(object);
  (void)_this;
}
void SensorsSetting::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SensorsSetting::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SensorsSetting& SensorsSetting::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SensorsSetting_civloc_2fproto_2fsensors_5fsetting_2eproto.base);
  return *internal_default_instance();
}


void SensorsSetting::Clear() {
// @@protoc_insertion_point(message_clear_start:civ.civloc.SensorsSetting)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  imu_.Clear();
  gnss_.Clear();
  perc_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      version_.ClearToDefault(::civ::civloc::SensorsSetting::_i_give_permission_to_break_this_code_default_version_, GetArena());
       }
    if (cached_has_bits & 0x00000002u) {
      vehicle_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(wheel_ != nullptr);
      wheel_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(lidar_ != nullptr);
      lidar_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SensorsSetting::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string version = 1 [default = "1.0.0"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "civ.civloc.SensorsSetting.version");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string vehicle_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_vehicle_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "civ.civloc.SensorsSetting.vehicle_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .civ.civloc.ImuPara imu = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_imu(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .civ.civloc.GnssPara gnss = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_gnss(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .civ.civloc.PerceptionPara perc = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_perc(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .civ.civloc.WheelOdoPara wheel = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_wheel(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .civ.civloc.LidarPara lidar = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_lidar(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SensorsSetting::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:civ.civloc.SensorsSetting)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string version = 1 [default = "1.0.0"];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "civ.civloc.SensorsSetting.version");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_version(), target);
  }

  // required string vehicle_name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_vehicle_name().data(), static_cast<int>(this->_internal_vehicle_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "civ.civloc.SensorsSetting.vehicle_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_vehicle_name(), target);
  }

  // repeated .civ.civloc.ImuPara imu = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_imu_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_imu(i), target, stream);
  }

  // repeated .civ.civloc.GnssPara gnss = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_gnss_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_gnss(i), target, stream);
  }

  // repeated .civ.civloc.PerceptionPara perc = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_perc_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_perc(i), target, stream);
  }

  // optional .civ.civloc.WheelOdoPara wheel = 6;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::wheel(this), target, stream);
  }

  // optional .civ.civloc.LidarPara lidar = 7;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::lidar(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:civ.civloc.SensorsSetting)
  return target;
}

size_t SensorsSetting::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:civ.civloc.SensorsSetting)
  size_t total_size = 0;

  if (_internal_has_version()) {
    // required string version = 1 [default = "1.0.0"];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version());
  }

  if (_internal_has_vehicle_name()) {
    // required string vehicle_name = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_vehicle_name());
  }

  return total_size;
}
size_t SensorsSetting::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:civ.civloc.SensorsSetting)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string version = 1 [default = "1.0.0"];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version());

    // required string vehicle_name = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_vehicle_name());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .civ.civloc.ImuPara imu = 3;
  total_size += 1UL * this->_internal_imu_size();
  for (const auto& msg : this->imu_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .civ.civloc.GnssPara gnss = 4;
  total_size += 1UL * this->_internal_gnss_size();
  for (const auto& msg : this->gnss_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .civ.civloc.PerceptionPara perc = 5;
  total_size += 1UL * this->_internal_perc_size();
  for (const auto& msg : this->perc_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000cu) {
    // optional .civ.civloc.WheelOdoPara wheel = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *wheel_);
    }

    // optional .civ.civloc.LidarPara lidar = 7;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *lidar_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SensorsSetting::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:civ.civloc.SensorsSetting)
  GOOGLE_DCHECK_NE(&from, this);
  const SensorsSetting* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SensorsSetting>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:civ.civloc.SensorsSetting)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:civ.civloc.SensorsSetting)
    MergeFrom(*source);
  }
}

void SensorsSetting::MergeFrom(const SensorsSetting& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:civ.civloc.SensorsSetting)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  imu_.MergeFrom(from.imu_);
  gnss_.MergeFrom(from.gnss_);
  perc_.MergeFrom(from.perc_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_version(from._internal_version());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_vehicle_name(from._internal_vehicle_name());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_wheel()->::civ::civloc::WheelOdoPara::MergeFrom(from._internal_wheel());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_lidar()->::civ::civloc::LidarPara::MergeFrom(from._internal_lidar());
    }
  }
}

void SensorsSetting::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:civ.civloc.SensorsSetting)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SensorsSetting::CopyFrom(const SensorsSetting& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:civ.civloc.SensorsSetting)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SensorsSetting::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(imu_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(gnss_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(perc_)) return false;
  if (_internal_has_wheel()) {
    if (!wheel_->IsInitialized()) return false;
  }
  if (_internal_has_lidar()) {
    if (!lidar_->IsInitialized()) return false;
  }
  return true;
}

void SensorsSetting::InternalSwap(SensorsSetting* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  imu_.InternalSwap(&other->imu_);
  gnss_.InternalSwap(&other->gnss_);
  perc_.InternalSwap(&other->perc_);
  version_.Swap(&other->version_, nullptr, GetArena());
  vehicle_name_.Swap(&other->vehicle_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SensorsSetting, lidar_)
      + sizeof(SensorsSetting::lidar_)
      - PROTOBUF_FIELD_OFFSET(SensorsSetting, wheel_)>(
          reinterpret_cast<char*>(&wheel_),
          reinterpret_cast<char*>(&other->wheel_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SensorsSetting::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace civloc
}  // namespace civ
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::civ::civloc::Extrinsic* Arena::CreateMaybeMessage< ::civ::civloc::Extrinsic >(Arena* arena) {
  return Arena::CreateMessageInternal< ::civ::civloc::Extrinsic >(arena);
}
template<> PROTOBUF_NOINLINE ::civ::civloc::AcceleratorPara* Arena::CreateMaybeMessage< ::civ::civloc::AcceleratorPara >(Arena* arena) {
  return Arena::CreateMessageInternal< ::civ::civloc::AcceleratorPara >(arena);
}
template<> PROTOBUF_NOINLINE ::civ::civloc::GyroscopePara* Arena::CreateMaybeMessage< ::civ::civloc::GyroscopePara >(Arena* arena) {
  return Arena::CreateMessageInternal< ::civ::civloc::GyroscopePara >(arena);
}
template<> PROTOBUF_NOINLINE ::civ::civloc::ImuPara* Arena::CreateMaybeMessage< ::civ::civloc::ImuPara >(Arena* arena) {
  return Arena::CreateMessageInternal< ::civ::civloc::ImuPara >(arena);
}
template<> PROTOBUF_NOINLINE ::civ::civloc::GnssPara* Arena::CreateMaybeMessage< ::civ::civloc::GnssPara >(Arena* arena) {
  return Arena::CreateMessageInternal< ::civ::civloc::GnssPara >(arena);
}
template<> PROTOBUF_NOINLINE ::civ::civloc::CameraPara* Arena::CreateMaybeMessage< ::civ::civloc::CameraPara >(Arena* arena) {
  return Arena::CreateMessageInternal< ::civ::civloc::CameraPara >(arena);
}
template<> PROTOBUF_NOINLINE ::civ::civloc::PerceptionPara* Arena::CreateMaybeMessage< ::civ::civloc::PerceptionPara >(Arena* arena) {
  return Arena::CreateMessageInternal< ::civ::civloc::PerceptionPara >(arena);
}
template<> PROTOBUF_NOINLINE ::civ::civloc::WheelOdoPara* Arena::CreateMaybeMessage< ::civ::civloc::WheelOdoPara >(Arena* arena) {
  return Arena::CreateMessageInternal< ::civ::civloc::WheelOdoPara >(arena);
}
template<> PROTOBUF_NOINLINE ::civ::civloc::LidarPara* Arena::CreateMaybeMessage< ::civ::civloc::LidarPara >(Arena* arena) {
  return Arena::CreateMessageInternal< ::civ::civloc::LidarPara >(arena);
}
template<> PROTOBUF_NOINLINE ::civ::civloc::SensorsSetting* Arena::CreateMaybeMessage< ::civ::civloc::SensorsSetting >(Arena* arena) {
  return Arena::CreateMessageInternal< ::civ::civloc::SensorsSetting >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
