// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: civloc/proto/locator.proto

#include "civloc/proto/locator.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_civloc_2fproto_2flocator_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CacherConfig_civloc_2fproto_2flocator_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_civloc_2fproto_2flocator_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DetectConfig_civloc_2fproto_2flocator_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_civloc_2fproto_2flocator_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FilterPara_civloc_2fproto_2flocator_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_civloc_2fproto_2flocator_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_FuseConfig_civloc_2fproto_2flocator_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_civloc_2fproto_2flocator_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GnssFilterConfig_civloc_2fproto_2flocator_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_civloc_2fproto_2flocator_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IOConfig_civloc_2fproto_2flocator_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_civloc_2fproto_2flocator_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LidarFilterConfig_civloc_2fproto_2flocator_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_civloc_2fproto_2flocator_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LidarMatchConfig_civloc_2fproto_2flocator_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_civloc_2fproto_2flocator_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NDTConfig_civloc_2fproto_2flocator_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_civloc_2fproto_2flocator_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PointCloudMapConfig_civloc_2fproto_2flocator_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_civloc_2fproto_2flocator_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VehicleModelFilterConfig_civloc_2fproto_2flocator_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_civloc_2fproto_2flocator_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VisionFilterConfig_civloc_2fproto_2flocator_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_civloc_2fproto_2flocator_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VisionMapConfig_civloc_2fproto_2flocator_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_civloc_2fproto_2flocator_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VisionMatchConfig_civloc_2fproto_2flocator_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_civloc_2fproto_2flocator_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WheelOdoFilterConfig_civloc_2fproto_2flocator_2eproto;
namespace civ {
namespace civloc {
class CacherConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CacherConfig> _instance;
} _CacherConfig_default_instance_;
class FilterParaDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FilterPara> _instance;
} _FilterPara_default_instance_;
class GnssFilterConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GnssFilterConfig> _instance;
} _GnssFilterConfig_default_instance_;
class VehicleModelFilterConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VehicleModelFilterConfig> _instance;
} _VehicleModelFilterConfig_default_instance_;
class WheelOdoFilterConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WheelOdoFilterConfig> _instance;
} _WheelOdoFilterConfig_default_instance_;
class NDTConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NDTConfig> _instance;
} _NDTConfig_default_instance_;
class LidarFilterConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LidarFilterConfig> _instance;
} _LidarFilterConfig_default_instance_;
class VisionFilterConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VisionFilterConfig> _instance;
} _VisionFilterConfig_default_instance_;
class FuseConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FuseConfig> _instance;
} _FuseConfig_default_instance_;
class VisionMapConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VisionMapConfig> _instance;
} _VisionMapConfig_default_instance_;
class PointCloudMapConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PointCloudMapConfig> _instance;
} _PointCloudMapConfig_default_instance_;
class IOConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IOConfig> _instance;
} _IOConfig_default_instance_;
class DetectConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DetectConfig> _instance;
} _DetectConfig_default_instance_;
class LidarMatchConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LidarMatchConfig> _instance;
} _LidarMatchConfig_default_instance_;
class VisionMatchConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VisionMatchConfig> _instance;
} _VisionMatchConfig_default_instance_;
class LocatorConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LocatorConfig> _instance;
} _LocatorConfig_default_instance_;
}  // namespace civloc
}  // namespace civ
static void InitDefaultsscc_info_CacherConfig_civloc_2fproto_2flocator_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::civ::civloc::_CacherConfig_default_instance_;
    new (ptr) ::civ::civloc::CacherConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CacherConfig_civloc_2fproto_2flocator_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CacherConfig_civloc_2fproto_2flocator_2eproto}, {}};

static void InitDefaultsscc_info_DetectConfig_civloc_2fproto_2flocator_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::civ::civloc::_DetectConfig_default_instance_;
    new (ptr) ::civ::civloc::DetectConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DetectConfig_civloc_2fproto_2flocator_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DetectConfig_civloc_2fproto_2flocator_2eproto}, {}};

static void InitDefaultsscc_info_FilterPara_civloc_2fproto_2flocator_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::civ::civloc::_FilterPara_default_instance_;
    new (ptr) ::civ::civloc::FilterPara();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FilterPara_civloc_2fproto_2flocator_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FilterPara_civloc_2fproto_2flocator_2eproto}, {}};

static void InitDefaultsscc_info_FuseConfig_civloc_2fproto_2flocator_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::civ::civloc::_FuseConfig_default_instance_;
    new (ptr) ::civ::civloc::FuseConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_FuseConfig_civloc_2fproto_2flocator_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 6, 0, InitDefaultsscc_info_FuseConfig_civloc_2fproto_2flocator_2eproto}, {
      &scc_info_FilterPara_civloc_2fproto_2flocator_2eproto.base,
      &scc_info_GnssFilterConfig_civloc_2fproto_2flocator_2eproto.base,
      &scc_info_VehicleModelFilterConfig_civloc_2fproto_2flocator_2eproto.base,
      &scc_info_WheelOdoFilterConfig_civloc_2fproto_2flocator_2eproto.base,
      &scc_info_LidarFilterConfig_civloc_2fproto_2flocator_2eproto.base,
      &scc_info_VisionFilterConfig_civloc_2fproto_2flocator_2eproto.base,}};

static void InitDefaultsscc_info_GnssFilterConfig_civloc_2fproto_2flocator_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::civ::civloc::_GnssFilterConfig_default_instance_;
    new (ptr) ::civ::civloc::GnssFilterConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GnssFilterConfig_civloc_2fproto_2flocator_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GnssFilterConfig_civloc_2fproto_2flocator_2eproto}, {}};

static void InitDefaultsscc_info_IOConfig_civloc_2fproto_2flocator_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::civ::civloc::_IOConfig_default_instance_;
    new (ptr) ::civ::civloc::IOConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IOConfig_civloc_2fproto_2flocator_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_IOConfig_civloc_2fproto_2flocator_2eproto}, {}};

static void InitDefaultsscc_info_LidarFilterConfig_civloc_2fproto_2flocator_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::civ::civloc::_LidarFilterConfig_default_instance_;
    new (ptr) ::civ::civloc::LidarFilterConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LidarFilterConfig_civloc_2fproto_2flocator_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LidarFilterConfig_civloc_2fproto_2flocator_2eproto}, {}};

static void InitDefaultsscc_info_LidarMatchConfig_civloc_2fproto_2flocator_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::civ::civloc::_LidarMatchConfig_default_instance_;
    new (ptr) ::civ::civloc::LidarMatchConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LidarMatchConfig_civloc_2fproto_2flocator_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_LidarMatchConfig_civloc_2fproto_2flocator_2eproto}, {
      &scc_info_NDTConfig_civloc_2fproto_2flocator_2eproto.base,}};

static void InitDefaultsscc_info_LocatorConfig_civloc_2fproto_2flocator_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::civ::civloc::_LocatorConfig_default_instance_;
    new (ptr) ::civ::civloc::LocatorConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<8> scc_info_LocatorConfig_civloc_2fproto_2flocator_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 8, 0, InitDefaultsscc_info_LocatorConfig_civloc_2fproto_2flocator_2eproto}, {
      &scc_info_CacherConfig_civloc_2fproto_2flocator_2eproto.base,
      &scc_info_VisionMapConfig_civloc_2fproto_2flocator_2eproto.base,
      &scc_info_IOConfig_civloc_2fproto_2flocator_2eproto.base,
      &scc_info_PointCloudMapConfig_civloc_2fproto_2flocator_2eproto.base,
      &scc_info_FuseConfig_civloc_2fproto_2flocator_2eproto.base,
      &scc_info_DetectConfig_civloc_2fproto_2flocator_2eproto.base,
      &scc_info_LidarMatchConfig_civloc_2fproto_2flocator_2eproto.base,
      &scc_info_VisionMatchConfig_civloc_2fproto_2flocator_2eproto.base,}};

static void InitDefaultsscc_info_NDTConfig_civloc_2fproto_2flocator_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::civ::civloc::_NDTConfig_default_instance_;
    new (ptr) ::civ::civloc::NDTConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NDTConfig_civloc_2fproto_2flocator_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_NDTConfig_civloc_2fproto_2flocator_2eproto}, {}};

static void InitDefaultsscc_info_PointCloudMapConfig_civloc_2fproto_2flocator_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::civ::civloc::_PointCloudMapConfig_default_instance_;
    new (ptr) ::civ::civloc::PointCloudMapConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PointCloudMapConfig_civloc_2fproto_2flocator_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PointCloudMapConfig_civloc_2fproto_2flocator_2eproto}, {}};

static void InitDefaultsscc_info_VehicleModelFilterConfig_civloc_2fproto_2flocator_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::civ::civloc::_VehicleModelFilterConfig_default_instance_;
    new (ptr) ::civ::civloc::VehicleModelFilterConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VehicleModelFilterConfig_civloc_2fproto_2flocator_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_VehicleModelFilterConfig_civloc_2fproto_2flocator_2eproto}, {}};

static void InitDefaultsscc_info_VisionFilterConfig_civloc_2fproto_2flocator_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::civ::civloc::_VisionFilterConfig_default_instance_;
    new (ptr) ::civ::civloc::VisionFilterConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VisionFilterConfig_civloc_2fproto_2flocator_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_VisionFilterConfig_civloc_2fproto_2flocator_2eproto}, {}};

static void InitDefaultsscc_info_VisionMapConfig_civloc_2fproto_2flocator_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::civ::civloc::_VisionMapConfig_default_instance_;
    new (ptr) ::civ::civloc::VisionMapConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VisionMapConfig_civloc_2fproto_2flocator_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_VisionMapConfig_civloc_2fproto_2flocator_2eproto}, {}};

static void InitDefaultsscc_info_VisionMatchConfig_civloc_2fproto_2flocator_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::civ::civloc::_VisionMatchConfig_default_instance_;
    new (ptr) ::civ::civloc::VisionMatchConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VisionMatchConfig_civloc_2fproto_2flocator_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_VisionMatchConfig_civloc_2fproto_2flocator_2eproto}, {}};

static void InitDefaultsscc_info_WheelOdoFilterConfig_civloc_2fproto_2flocator_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::civ::civloc::_WheelOdoFilterConfig_default_instance_;
    new (ptr) ::civ::civloc::WheelOdoFilterConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WheelOdoFilterConfig_civloc_2fproto_2flocator_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_WheelOdoFilterConfig_civloc_2fproto_2flocator_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_civloc_2fproto_2flocator_2eproto[16];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_civloc_2fproto_2flocator_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_civloc_2fproto_2flocator_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_civloc_2fproto_2flocator_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::civ::civloc::CacherConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::civ::civloc::CacherConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::civ::civloc::CacherConfig, max_delay_ms_),
  PROTOBUF_FIELD_OFFSET(::civ::civloc::CacherConfig, duration_s_),
  PROTOBUF_FIELD_OFFSET(::civ::civloc::CacherConfig, main_channel_name_),
  1,
  2,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::civ::civloc::FilterPara, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::civ::civloc::FilterPara, init_pos_error_m_),
  PROTOBUF_FIELD_OFFSET(::civ::civloc::FilterPara, init_vel_error_mps_),
  PROTOBUF_FIELD_OFFSET(::civ::civloc::FilterPara, init_att_error_deg_),
  PROTOBUF_FIELD_OFFSET(::civ::civloc::FilterPara, init_acc_bias_error_mg_),
  PROTOBUF_FIELD_OFFSET(::civ::civloc::FilterPara, init_gyr_bias_error_dps_),
  PROTOBUF_FIELD_OFFSET(::civ::civloc::FilterPara, init_qvi_error_deg_),
  PROTOBUF_FIELD_OFFSET(::civ::civloc::FilterPara, init_kod_error_),
  PROTOBUF_FIELD_OFFSET(::civ::civloc::FilterPara, position_random_walk_mpsh_),
  PROTOBUF_FIELD_OFFSET(::civ::civloc::FilterPara, odo_scale_random_walk_psh_),
  PROTOBUF_FIELD_OFFSET(::civ::civloc::FilterPara, qvv1_random_walk_dpsh_),
  PROTOBUF_FIELD_OFFSET(::civ::civloc::GnssFilterConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::civ::civloc::GnssFilterConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::civ::civloc::GnssFilterConfig, enable_gnss_pos_),
  PROTOBUF_FIELD_OFFSET(::civ::civloc::GnssFilterConfig, enable_gnss_vel_),
  PROTOBUF_FIELD_OFFSET(::civ::civloc::GnssFilterConfig, position_noise_m_),
  PROTOBUF_FIELD_OFFSET(::civ::civloc::GnssFilterConfig, velocity_noise_mps_),
  PROTOBUF_FIELD_OFFSET(::civ::civloc::GnssFilterConfig, enable_gnss_dual_),
  PROTOBUF_FIELD_OFFSET(::civ::civloc::GnssFilterConfig, dual_angle_noise_deg_),
  PROTOBUF_FIELD_OFFSET(::civ::civloc::GnssFilterConfig, farme_judge_time_s_),
  PROTOBUF_FIELD_OFFSET(::civ::civloc::GnssFilterConfig, max_change_ratio_),
  PROTOBUF_FIELD_OFFSET(::civ::civloc::GnssFilterConfig, pos_std_m_upper_limit_),
  PROTOBUF_FIELD_OFFSET(::civ::civloc::GnssFilterConfig, residual_drift_m_upper_limit_),
  PROTOBUF_FIELD_OFFSET(::civ::civloc::GnssFilterConfig, heading_std_deg_upper_limit_),
  PROTOBUF_FIELD_OFFSET(::civ::civloc::GnssFilterConfig, heading_std_deg_lower_limit_),
  0,
  1,
  ~0u,
  ~0u,
  2,
  ~0u,
  3,
  4,
  5,
  6,
  7,
  8,
  PROTOBUF_FIELD_OFFSET(::civ::civloc::VehicleModelFilterConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::civ::civloc::VehicleModelFilterConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::civ::civloc::VehicleModelFilterConfig, enable_nhc_),
  PROTOBUF_FIELD_OFFSET(::civ::civloc::VehicleModelFilterConfig, enable_zupt_),
  PROTOBUF_FIELD_OFFSET(::civ::civloc::VehicleModelFilterConfig, enable_zgbc_),
  PROTOBUF_FIELD_OFFSET(::civ::civloc::VehicleModelFilterConfig, enable_zpc_),
  PROTOBUF_FIELD_OFFSET(::civ::civloc::VehicleModelFilterConfig, enable_zac_),
  PROTOBUF_FIELD_OFFSET(::civ::civloc::VehicleModelFilterConfig, nhc_noise_mps_),
  PROTOBUF_FIELD_OFFSET(::civ::civloc::VehicleModelFilterConfig, zupt_noise_mps_),
  PROTOBUF_FIELD_OFFSET(::civ::civloc::VehicleModelFilterConfig, zgbc_noise_dps_),
  PROTOBUF_FIELD_OFFSET(::civ::civloc::VehicleModelFilterConfig, zac_noise_deg_),
  PROTOBUF_FIELD_OFFSET(::civ::civloc::VehicleModelFilterConfig, zpc_noise_m_),
  0,
  1,
  2,
  3,
  4,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::civ::civloc::WheelOdoFilterConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::civ::civloc::WheelOdoFilterConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::civ::civloc::WheelOdoFilterConfig, enable_rear_wheel_),
  PROTOBUF_FIELD_OFFSET(::civ::civloc::WheelOdoFilterConfig, enable_front_wheel_),
  PROTOBUF_FIELD_OFFSET(::civ::civloc::WheelOdoFilterConfig, enable_rear_diff_),
  PROTOBUF_FIELD_OFFSET(::civ::civloc::WheelOdoFilterConfig, enable_front_diff_),
  PROTOBUF_FIELD_OFFSET(::civ::civloc::WheelOdoFilterConfig, rear_wheel_noise_mps_),
  PROTOBUF_FIELD_OFFSET(::civ::civloc::WheelOdoFilterConfig, front_wheel_noise_mps_),
  PROTOBUF_FIELD_OFFSET(::civ::civloc::WheelOdoFilterConfig, rear_diff_noise_mps_),
  PROTOBUF_FIELD_OFFSET(::civ::civloc::WheelOdoFilterConfig, front_diff_noise_mps_),
  0,
  1,
  2,
  3,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::civ::civloc::NDTConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::civ::civloc::NDTConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::civ::civloc::NDTConfig, res_m_),
  PROTOBUF_FIELD_OFFSET(::civ::civloc::NDTConfig, step_size_m_),
  PROTOBUF_FIELD_OFFSET(::civ::civloc::NDTConfig, trans_eps_m_),
  PROTOBUF_FIELD_OFFSET(::civ::civloc::NDTConfig, rot_eps_deg_),
  PROTOBUF_FIELD_OFFSET(::civ::civloc::NDTConfig, max_iter_),
  PROTOBUF_FIELD_OFFSET(::civ::civloc::NDTConfig, score_threshold_),
  PROTOBUF_FIELD_OFFSET(::civ::civloc::NDTConfig, transfer_prob_threshold_),
  PROTOBUF_FIELD_OFFSET(::civ::civloc::NDTConfig, online_scan_voxel_m_),
  PROTOBUF_FIELD_OFFSET(::civ::civloc::NDTConfig, local_map_voxel_m_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::civ::civloc::LidarFilterConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::civ::civloc::LidarFilterConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::civ::civloc::LidarFilterConfig, enable_ndt_map_match_),
  PROTOBUF_FIELD_OFFSET(::civ::civloc::LidarFilterConfig, enable_ndt_frame_match_),
  PROTOBUF_FIELD_OFFSET(::civ::civloc::LidarFilterConfig, ndt_map_match_transfer_prob_threshold_),
  PROTOBUF_FIELD_OFFSET(::civ::civloc::LidarFilterConfig, ndt_map_match_score_threshold_),
  PROTOBUF_FIELD_OFFSET(::civ::civloc::LidarFilterConfig, ndt_map_match_nice_noise_mps_),
  PROTOBUF_FIELD_OFFSET(::civ::civloc::LidarFilterConfig, ndt_map_match_bad_noise_mps_),
  PROTOBUF_FIELD_OFFSET(::civ::civloc::LidarFilterConfig, ndt_frame_match_noise_mps_),
  0,
  1,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::civ::civloc::VisionFilterConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::civ::civloc::VisionFilterConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::civ::civloc::VisionFilterConfig, enable_bev_line_),
  PROTOBUF_FIELD_OFFSET(::civ::civloc::VisionFilterConfig, enable_bev_cubic_curv_),
  PROTOBUF_FIELD_OFFSET(::civ::civloc::VisionFilterConfig, enable_pixel_line_),
  PROTOBUF_FIELD_OFFSET(::civ::civloc::VisionFilterConfig, enable_pixel_cubic_curv_),
  PROTOBUF_FIELD_OFFSET(::civ::civloc::VisionFilterConfig, vision_noise_mps_),
  PROTOBUF_FIELD_OFFSET(::civ::civloc::VisionFilterConfig, perc_range_m_),
  PROTOBUF_FIELD_OFFSET(::civ::civloc::VisionFilterConfig, valid_mean_match_dist_m_),
  PROTOBUF_FIELD_OFFSET(::civ::civloc::VisionFilterConfig, valid_match_point_dist_m_),
  2,
  3,
  4,
  5,
  ~0u,
  ~0u,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::civ::civloc::FuseConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::civ::civloc::FuseConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::civ::civloc::FuseConfig, mode_),
  PROTOBUF_FIELD_OFFSET(::civ::civloc::FuseConfig, filter_para_),
  PROTOBUF_FIELD_OFFSET(::civ::civloc::FuseConfig, gnss_filter_),
  PROTOBUF_FIELD_OFFSET(::civ::civloc::FuseConfig, vm_filter_),
  PROTOBUF_FIELD_OFFSET(::civ::civloc::FuseConfig, wheel_filter_),
  PROTOBUF_FIELD_OFFSET(::civ::civloc::FuseConfig, lidar_filter_),
  PROTOBUF_FIELD_OFFSET(::civ::civloc::FuseConfig, vision_filter_),
  PROTOBUF_FIELD_OFFSET(::civ::civloc::FuseConfig, online_estimation_qvv1_),
  PROTOBUF_FIELD_OFFSET(::civ::civloc::FuseConfig, online_estimation_ko_),
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  7,
  8,
  PROTOBUF_FIELD_OFFSET(::civ::civloc::VisionMapConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::civ::civloc::VisionMapConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::civ::civloc::VisionMapConfig, channel_name_),
  PROTOBUF_FIELD_OFFSET(::civ::civloc::VisionMapConfig, max_leaf_dimension_),
  PROTOBUF_FIELD_OFFSET(::civ::civloc::VisionMapConfig, max_leaf_size_),
  PROTOBUF_FIELD_OFFSET(::civ::civloc::VisionMapConfig, box_half_width_m_),
  PROTOBUF_FIELD_OFFSET(::civ::civloc::VisionMapConfig, search_distance_m_),
  PROTOBUF_FIELD_OFFSET(::civ::civloc::VisionMapConfig, sample_interval_m_),
  0,
  1,
  5,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::civ::civloc::PointCloudMapConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::civ::civloc::PointCloudMapConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::civ::civloc::PointCloudMapConfig, map_path_),
  PROTOBUF_FIELD_OFFSET(::civ::civloc::PointCloudMapConfig, search_radius_m_),
  PROTOBUF_FIELD_OFFSET(::civ::civloc::PointCloudMapConfig, map_cfg_file_),
  0,
  2,
  1,
  PROTOBUF_FIELD_OFFSET(::civ::civloc::IOConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::civ::civloc::IOConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::civ::civloc::IOConfig, data_dir_),
  0,
  PROTOBUF_FIELD_OFFSET(::civ::civloc::DetectConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::civ::civloc::DetectConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::civ::civloc::DetectConfig, sample_range_time_),
  PROTOBUF_FIELD_OFFSET(::civ::civloc::DetectConfig, static_continuous_number_),
  PROTOBUF_FIELD_OFFSET(::civ::civloc::DetectConfig, zero_velocity_detector_threshold_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::civ::civloc::LidarMatchConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::civ::civloc::LidarMatchConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::civ::civloc::LidarMatchConfig, enable_lidar_),
  PROTOBUF_FIELD_OFFSET(::civ::civloc::LidarMatchConfig, online_scan_range_m_),
  PROTOBUF_FIELD_OFFSET(::civ::civloc::LidarMatchConfig, ndt_config_),
  1,
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::civ::civloc::VisionMatchConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::civ::civloc::VisionMatchConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::civ::civloc::VisionMatchConfig, enable_vision_),
  PROTOBUF_FIELD_OFFSET(::civ::civloc::VisionMatchConfig, match_threshold_m_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::civ::civloc::LocatorConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::civ::civloc::LocatorConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::civ::civloc::LocatorConfig, version_),
  PROTOBUF_FIELD_OFFSET(::civ::civloc::LocatorConfig, cacher_cfg_),
  PROTOBUF_FIELD_OFFSET(::civ::civloc::LocatorConfig, visionmap_cfg_),
  PROTOBUF_FIELD_OFFSET(::civ::civloc::LocatorConfig, io_cfg_),
  PROTOBUF_FIELD_OFFSET(::civ::civloc::LocatorConfig, pointcloud_map_cfg_),
  PROTOBUF_FIELD_OFFSET(::civ::civloc::LocatorConfig, fuse_cfg_),
  PROTOBUF_FIELD_OFFSET(::civ::civloc::LocatorConfig, detect_cfg_),
  PROTOBUF_FIELD_OFFSET(::civ::civloc::LocatorConfig, lidar_match_cfg_),
  PROTOBUF_FIELD_OFFSET(::civ::civloc::LocatorConfig, vision_match_cfg_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(::civ::civloc::CacherConfig)},
  { 11, -1, sizeof(::civ::civloc::FilterPara)},
  { 26, 43, sizeof(::civ::civloc::GnssFilterConfig)},
  { 55, 70, sizeof(::civ::civloc::VehicleModelFilterConfig)},
  { 80, 93, sizeof(::civ::civloc::WheelOdoFilterConfig)},
  { 101, 115, sizeof(::civ::civloc::NDTConfig)},
  { 124, 136, sizeof(::civ::civloc::LidarFilterConfig)},
  { 143, 156, sizeof(::civ::civloc::VisionFilterConfig)},
  { 164, 178, sizeof(::civ::civloc::FuseConfig)},
  { 187, 198, sizeof(::civ::civloc::VisionMapConfig)},
  { 204, 212, sizeof(::civ::civloc::PointCloudMapConfig)},
  { 215, 221, sizeof(::civ::civloc::IOConfig)},
  { 222, 230, sizeof(::civ::civloc::DetectConfig)},
  { 233, 241, sizeof(::civ::civloc::LidarMatchConfig)},
  { 244, 251, sizeof(::civ::civloc::VisionMatchConfig)},
  { 253, 267, sizeof(::civ::civloc::LocatorConfig)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::civ::civloc::_CacherConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::civ::civloc::_FilterPara_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::civ::civloc::_GnssFilterConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::civ::civloc::_VehicleModelFilterConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::civ::civloc::_WheelOdoFilterConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::civ::civloc::_NDTConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::civ::civloc::_LidarFilterConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::civ::civloc::_VisionFilterConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::civ::civloc::_FuseConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::civ::civloc::_VisionMapConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::civ::civloc::_PointCloudMapConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::civ::civloc::_IOConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::civ::civloc::_DetectConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::civ::civloc::_LidarMatchConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::civ::civloc::_VisionMatchConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::civ::civloc::_LocatorConfig_default_instance_),
};

const char descriptor_table_protodef_civloc_2fproto_2flocator_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\032civloc/proto/locator.proto\022\nciv.civloc"
  "\"S\n\014CacherConfig\022\024\n\014max_delay_ms\030\001 \002(\002\022\022"
  "\n\nduration_s\030\002 \002(\002\022\031\n\021main_channel_name\030"
  "\003 \001(\t\"\270\002\n\nFilterPara\022\030\n\020init_pos_error_m"
  "\030\001 \003(\001\022\032\n\022init_vel_error_mps\030\002 \003(\001\022\032\n\022in"
  "it_att_error_deg\030\003 \003(\001\022\036\n\026init_acc_bias_"
  "error_mg\030\004 \003(\001\022\037\n\027init_gyr_bias_error_dp"
  "s\030\005 \003(\001\022\032\n\022init_qvi_error_deg\030\006 \003(\001\022\026\n\016i"
  "nit_kod_error\030\007 \003(\001\022!\n\031position_random_w"
  "alk_mpsh\030\010 \003(\001\022!\n\031odo_scale_random_walk_"
  "psh\030\t \003(\001\022\035\n\025qvv1_random_walk_dpsh\030\n \003(\001"
  "\"\367\002\n\020GnssFilterConfig\022\027\n\017enable_gnss_pos"
  "\030\001 \002(\010\022\027\n\017enable_gnss_vel\030\002 \002(\010\022\030\n\020posit"
  "ion_noise_m\030\003 \003(\001\022\032\n\022velocity_noise_mps\030"
  "\004 \003(\001\022\030\n\020enable_gnss_dual\030\005 \002(\010\022\034\n\024dual_"
  "angle_noise_deg\030\006 \003(\001\022\032\n\022farme_judge_tim"
  "e_s\030\007 \002(\002\022\030\n\020max_change_ratio\030\010 \002(\002\022\035\n\025p"
  "os_std_m_upper_limit\030\t \002(\002\022$\n\034residual_d"
  "rift_m_upper_limit\030\n \002(\002\022#\n\033heading_std_"
  "deg_upper_limit\030\013 \002(\002\022#\n\033heading_std_deg"
  "_lower_limit\030\014 \002(\002\"\363\001\n\030VehicleModelFilte"
  "rConfig\022\022\n\nenable_nhc\030\001 \002(\010\022\023\n\013enable_zu"
  "pt\030\002 \002(\010\022\023\n\013enable_zgbc\030\003 \002(\010\022\022\n\nenable_"
  "zpc\030\004 \002(\010\022\022\n\nenable_zac\030\005 \002(\010\022\025\n\rnhc_noi"
  "se_mps\030\n \003(\001\022\026\n\016zupt_noise_mps\030\013 \003(\001\022\026\n\016"
  "zgbc_noise_dps\030\014 \003(\001\022\025\n\rzac_noise_deg\030\r "
  "\003(\001\022\023\n\013zpc_noise_m\030\016 \003(\001\"\372\001\n\024WheelOdoFil"
  "terConfig\022\031\n\021enable_rear_wheel\030\001 \002(\010\022\032\n\022"
  "enable_front_wheel\030\002 \002(\010\022\030\n\020enable_rear_"
  "diff\030\003 \002(\010\022\031\n\021enable_front_diff\030\004 \002(\010\022\034\n"
  "\024rear_wheel_noise_mps\030\005 \003(\001\022\035\n\025front_whe"
  "el_noise_mps\030\006 \003(\001\022\033\n\023rear_diff_noise_mp"
  "s\030\007 \003(\001\022\034\n\024front_diff_noise_mps\030\010 \003(\001\"\335\001"
  "\n\tNDTConfig\022\r\n\005res_m\030\001 \002(\001\022\023\n\013step_size_"
  "m\030\002 \002(\001\022\023\n\013trans_eps_m\030\003 \002(\001\022\023\n\013rot_eps_"
  "deg\030\004 \002(\001\022\020\n\010max_iter\030\005 \002(\001\022\027\n\017score_thr"
  "eshold\030\006 \002(\001\022\037\n\027transfer_prob_threshold\030"
  "\007 \002(\001\022\033\n\023online_scan_voxel_m\030\010 \003(\001\022\031\n\021lo"
  "cal_map_voxel_m\030\t \003(\001\"\225\002\n\021LidarFilterCon"
  "fig\022\034\n\024enable_ndt_map_match\030\001 \002(\010\022\036\n\026ena"
  "ble_ndt_frame_match\030\002 \002(\010\022-\n%ndt_map_mat"
  "ch_transfer_prob_threshold\030\003 \003(\001\022%\n\035ndt_"
  "map_match_score_threshold\030\004 \003(\001\022$\n\034ndt_m"
  "ap_match_nice_noise_mps\030\005 \003(\001\022#\n\033ndt_map"
  "_match_bad_noise_mps\030\006 \003(\001\022!\n\031ndt_frame_"
  "match_noise_mps\030\007 \003(\001\"\373\001\n\022VisionFilterCo"
  "nfig\022\027\n\017enable_bev_line\030\001 \002(\010\022\035\n\025enable_"
  "bev_cubic_curv\030\002 \002(\010\022\031\n\021enable_pixel_lin"
  "e\030\003 \002(\010\022\037\n\027enable_pixel_cubic_curv\030\004 \002(\010"
  "\022\030\n\020vision_noise_mps\030\005 \003(\001\022\024\n\014perc_range"
  "_m\030\006 \003(\001\022\037\n\027valid_mean_match_dist_m\030\007 \002("
  "\001\022 \n\030valid_match_point_dist_m\030\010 \002(\001\"\314\003\n\n"
  "FuseConfig\022-\n\004mode\030\001 \002(\0162\037.civ.civloc.Fu"
  "seConfig.FuseMode\022+\n\013filter_para\030\002 \002(\0132\026"
  ".civ.civloc.FilterPara\0221\n\013gnss_filter\030\003 "
  "\002(\0132\034.civ.civloc.GnssFilterConfig\0227\n\tvm_"
  "filter\030\004 \002(\0132$.civ.civloc.VehicleModelFi"
  "lterConfig\0226\n\014wheel_filter\030\005 \002(\0132 .civ.c"
  "ivloc.WheelOdoFilterConfig\0223\n\014lidar_filt"
  "er\030\006 \001(\0132\035.civ.civloc.LidarFilterConfig\022"
  "5\n\rvision_filter\030\007 \002(\0132\036.civ.civloc.Visi"
  "onFilterConfig\022\036\n\026online_estimation_qvv1"
  "\030\n \002(\010\022\034\n\024online_estimation_ko\030\024 \002(\010\"\024\n\010"
  "FuseMode\022\010\n\004ESKF\020\000\"\252\001\n\017VisionMapConfig\022\024"
  "\n\014channel_name\030\001 \002(\t\022\032\n\022max_leaf_dimensi"
  "on\030\002 \002(\001\022\025\n\rmax_leaf_size\030\003 \002(\005\022\030\n\020box_h"
  "alf_width_m\030\004 \002(\001\022\031\n\021search_distance_m\030\005"
  " \002(\001\022\031\n\021sample_interval_m\030\006 \002(\001\"[\n\023Point"
  "CloudMapConfig\022\020\n\010map_path\030\001 \002(\t\022\034\n\017sear"
  "ch_radius_m\030\002 \001(\002:\003300\022\024\n\014map_cfg_file\030\003"
  " \002(\t\"\034\n\010IOConfig\022\020\n\010data_dir\030\001 \001(\t\"u\n\014De"
  "tectConfig\022\031\n\021sample_range_time\030\001 \002(\001\022 \n"
  "\030static_continuous_number\030\002 \002(\005\022(\n zero_"
  "velocity_detector_threshold\030\003 \003(\001\"w\n\020Lid"
  "arMatchConfig\022\033\n\014enable_lidar\030\001 \002(\010:\005fal"
  "se\022\033\n\023online_scan_range_m\030\002 \003(\001\022)\n\nndt_c"
  "onfig\030\024 \001(\0132\025.civ.civloc.NDTConfig\"E\n\021Vi"
  "sionMatchConfig\022\025\n\renable_vision\030\001 \002(\010\022\031"
  "\n\021match_threshold_m\030\002 \002(\001\"\264\003\n\rLocatorCon"
  "fig\022\026\n\007version\030\001 \002(\t:\0051.0.0\022,\n\ncacher_cf"
  "g\030\002 \002(\0132\030.civ.civloc.CacherConfig\0222\n\rvis"
  "ionmap_cfg\030\004 \002(\0132\033.civ.civloc.VisionMapC"
  "onfig\022$\n\006io_cfg\030\005 \001(\0132\024.civ.civloc.IOCon"
  "fig\022;\n\022pointcloud_map_cfg\030\006 \001(\0132\037.civ.ci"
  "vloc.PointCloudMapConfig\022(\n\010fuse_cfg\030\013 \001"
  "(\0132\026.civ.civloc.FuseConfig\022,\n\ndetect_cfg"
  "\030\014 \001(\0132\030.civ.civloc.DetectConfig\0225\n\017lida"
  "r_match_cfg\030\r \001(\0132\034.civ.civloc.LidarMatc"
  "hConfig\0227\n\020vision_match_cfg\030\016 \001(\0132\035.civ."
  "civloc.VisionMatchConfig"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_civloc_2fproto_2flocator_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_civloc_2fproto_2flocator_2eproto_sccs[16] = {
  &scc_info_CacherConfig_civloc_2fproto_2flocator_2eproto.base,
  &scc_info_DetectConfig_civloc_2fproto_2flocator_2eproto.base,
  &scc_info_FilterPara_civloc_2fproto_2flocator_2eproto.base,
  &scc_info_FuseConfig_civloc_2fproto_2flocator_2eproto.base,
  &scc_info_GnssFilterConfig_civloc_2fproto_2flocator_2eproto.base,
  &scc_info_IOConfig_civloc_2fproto_2flocator_2eproto.base,
  &scc_info_LidarFilterConfig_civloc_2fproto_2flocator_2eproto.base,
  &scc_info_LidarMatchConfig_civloc_2fproto_2flocator_2eproto.base,
  &scc_info_LocatorConfig_civloc_2fproto_2flocator_2eproto.base,
  &scc_info_NDTConfig_civloc_2fproto_2flocator_2eproto.base,
  &scc_info_PointCloudMapConfig_civloc_2fproto_2flocator_2eproto.base,
  &scc_info_VehicleModelFilterConfig_civloc_2fproto_2flocator_2eproto.base,
  &scc_info_VisionFilterConfig_civloc_2fproto_2flocator_2eproto.base,
  &scc_info_VisionMapConfig_civloc_2fproto_2flocator_2eproto.base,
  &scc_info_VisionMatchConfig_civloc_2fproto_2flocator_2eproto.base,
  &scc_info_WheelOdoFilterConfig_civloc_2fproto_2flocator_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_civloc_2fproto_2flocator_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_civloc_2fproto_2flocator_2eproto = {
  false, false, descriptor_table_protodef_civloc_2fproto_2flocator_2eproto, "civloc/proto/locator.proto", 3584,
  &descriptor_table_civloc_2fproto_2flocator_2eproto_once, descriptor_table_civloc_2fproto_2flocator_2eproto_sccs, descriptor_table_civloc_2fproto_2flocator_2eproto_deps, 16, 0,
  schemas, file_default_instances, TableStruct_civloc_2fproto_2flocator_2eproto::offsets,
  file_level_metadata_civloc_2fproto_2flocator_2eproto, 16, file_level_enum_descriptors_civloc_2fproto_2flocator_2eproto, file_level_service_descriptors_civloc_2fproto_2flocator_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_civloc_2fproto_2flocator_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_civloc_2fproto_2flocator_2eproto)), true);
namespace civ {
namespace civloc {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FuseConfig_FuseMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_civloc_2fproto_2flocator_2eproto);
  return file_level_enum_descriptors_civloc_2fproto_2flocator_2eproto[0];
}
bool FuseConfig_FuseMode_IsValid(int value) {
  switch (value) {
    case 0:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr FuseConfig_FuseMode FuseConfig::ESKF;
constexpr FuseConfig_FuseMode FuseConfig::FuseMode_MIN;
constexpr FuseConfig_FuseMode FuseConfig::FuseMode_MAX;
constexpr int FuseConfig::FuseMode_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

class CacherConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<CacherConfig>()._has_bits_);
  static void set_has_max_delay_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_duration_s(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_main_channel_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000006) ^ 0x00000006) != 0;
  }
};

CacherConfig::CacherConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:civ.civloc.CacherConfig)
}
CacherConfig::CacherConfig(const CacherConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  main_channel_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_main_channel_name()) {
    main_channel_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_main_channel_name(), 
      GetArena());
  }
  ::memcpy(&max_delay_ms_, &from.max_delay_ms_,
    static_cast<size_t>(reinterpret_cast<char*>(&duration_s_) -
    reinterpret_cast<char*>(&max_delay_ms_)) + sizeof(duration_s_));
  // @@protoc_insertion_point(copy_constructor:civ.civloc.CacherConfig)
}

void CacherConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CacherConfig_civloc_2fproto_2flocator_2eproto.base);
  main_channel_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&max_delay_ms_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&duration_s_) -
      reinterpret_cast<char*>(&max_delay_ms_)) + sizeof(duration_s_));
}

CacherConfig::~CacherConfig() {
  // @@protoc_insertion_point(destructor:civ.civloc.CacherConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CacherConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  main_channel_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CacherConfig::ArenaDtor(void* object) {
  CacherConfig* _this = reinterpret_cast< CacherConfig* >(object);
  (void)_this;
}
void CacherConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CacherConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CacherConfig& CacherConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CacherConfig_civloc_2fproto_2flocator_2eproto.base);
  return *internal_default_instance();
}


void CacherConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:civ.civloc.CacherConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    main_channel_name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&max_delay_ms_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&duration_s_) -
        reinterpret_cast<char*>(&max_delay_ms_)) + sizeof(duration_s_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CacherConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required float max_delay_ms = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_max_delay_ms(&has_bits);
          max_delay_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float duration_s = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_duration_s(&has_bits);
          duration_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional string main_channel_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_main_channel_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "civ.civloc.CacherConfig.main_channel_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CacherConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:civ.civloc.CacherConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float max_delay_ms = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_max_delay_ms(), target);
  }

  // required float duration_s = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_duration_s(), target);
  }

  // optional string main_channel_name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_main_channel_name().data(), static_cast<int>(this->_internal_main_channel_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "civ.civloc.CacherConfig.main_channel_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_main_channel_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:civ.civloc.CacherConfig)
  return target;
}

size_t CacherConfig::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:civ.civloc.CacherConfig)
  size_t total_size = 0;

  if (_internal_has_max_delay_ms()) {
    // required float max_delay_ms = 1;
    total_size += 1 + 4;
  }

  if (_internal_has_duration_s()) {
    // required float duration_s = 2;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t CacherConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:civ.civloc.CacherConfig)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000006) ^ 0x00000006) == 0) {  // All required fields are present.
    // required float max_delay_ms = 1;
    total_size += 1 + 4;

    // required float duration_s = 2;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string main_channel_name = 3;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_main_channel_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CacherConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:civ.civloc.CacherConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const CacherConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CacherConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:civ.civloc.CacherConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:civ.civloc.CacherConfig)
    MergeFrom(*source);
  }
}

void CacherConfig::MergeFrom(const CacherConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:civ.civloc.CacherConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_main_channel_name(from._internal_main_channel_name());
    }
    if (cached_has_bits & 0x00000002u) {
      max_delay_ms_ = from.max_delay_ms_;
    }
    if (cached_has_bits & 0x00000004u) {
      duration_s_ = from.duration_s_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CacherConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:civ.civloc.CacherConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CacherConfig::CopyFrom(const CacherConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:civ.civloc.CacherConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CacherConfig::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void CacherConfig::InternalSwap(CacherConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  main_channel_name_.Swap(&other->main_channel_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CacherConfig, duration_s_)
      + sizeof(CacherConfig::duration_s_)
      - PROTOBUF_FIELD_OFFSET(CacherConfig, max_delay_ms_)>(
          reinterpret_cast<char*>(&max_delay_ms_),
          reinterpret_cast<char*>(&other->max_delay_ms_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CacherConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class FilterPara::_Internal {
 public:
};

FilterPara::FilterPara(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  init_pos_error_m_(arena),
  init_vel_error_mps_(arena),
  init_att_error_deg_(arena),
  init_acc_bias_error_mg_(arena),
  init_gyr_bias_error_dps_(arena),
  init_qvi_error_deg_(arena),
  init_kod_error_(arena),
  position_random_walk_mpsh_(arena),
  odo_scale_random_walk_psh_(arena),
  qvv1_random_walk_dpsh_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:civ.civloc.FilterPara)
}
FilterPara::FilterPara(const FilterPara& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      init_pos_error_m_(from.init_pos_error_m_),
      init_vel_error_mps_(from.init_vel_error_mps_),
      init_att_error_deg_(from.init_att_error_deg_),
      init_acc_bias_error_mg_(from.init_acc_bias_error_mg_),
      init_gyr_bias_error_dps_(from.init_gyr_bias_error_dps_),
      init_qvi_error_deg_(from.init_qvi_error_deg_),
      init_kod_error_(from.init_kod_error_),
      position_random_walk_mpsh_(from.position_random_walk_mpsh_),
      odo_scale_random_walk_psh_(from.odo_scale_random_walk_psh_),
      qvv1_random_walk_dpsh_(from.qvv1_random_walk_dpsh_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:civ.civloc.FilterPara)
}

void FilterPara::SharedCtor() {
}

FilterPara::~FilterPara() {
  // @@protoc_insertion_point(destructor:civ.civloc.FilterPara)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FilterPara::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void FilterPara::ArenaDtor(void* object) {
  FilterPara* _this = reinterpret_cast< FilterPara* >(object);
  (void)_this;
}
void FilterPara::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FilterPara::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FilterPara& FilterPara::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FilterPara_civloc_2fproto_2flocator_2eproto.base);
  return *internal_default_instance();
}


void FilterPara::Clear() {
// @@protoc_insertion_point(message_clear_start:civ.civloc.FilterPara)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  init_pos_error_m_.Clear();
  init_vel_error_mps_.Clear();
  init_att_error_deg_.Clear();
  init_acc_bias_error_mg_.Clear();
  init_gyr_bias_error_dps_.Clear();
  init_qvi_error_deg_.Clear();
  init_kod_error_.Clear();
  position_random_walk_mpsh_.Clear();
  odo_scale_random_walk_psh_.Clear();
  qvv1_random_walk_dpsh_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FilterPara::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated double init_pos_error_m = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_init_pos_error_m(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<9>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_init_pos_error_m(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated double init_vel_error_mps = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_init_vel_error_mps(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<17>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_init_vel_error_mps(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated double init_att_error_deg = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_init_att_error_deg(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<25>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_init_att_error_deg(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated double init_acc_bias_error_mg = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_init_acc_bias_error_mg(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<33>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_init_acc_bias_error_mg(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated double init_gyr_bias_error_dps = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_init_gyr_bias_error_dps(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<41>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_init_gyr_bias_error_dps(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated double init_qvi_error_deg = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_init_qvi_error_deg(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<49>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_init_qvi_error_deg(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated double init_kod_error = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_init_kod_error(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<57>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_init_kod_error(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated double position_random_walk_mpsh = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_position_random_walk_mpsh(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<65>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_position_random_walk_mpsh(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated double odo_scale_random_walk_psh = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_odo_scale_random_walk_psh(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<73>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_odo_scale_random_walk_psh(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated double qvv1_random_walk_dpsh = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_qvv1_random_walk_dpsh(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<81>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_qvv1_random_walk_dpsh(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FilterPara::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:civ.civloc.FilterPara)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated double init_pos_error_m = 1;
  for (int i = 0, n = this->_internal_init_pos_error_m_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_init_pos_error_m(i), target);
  }

  // repeated double init_vel_error_mps = 2;
  for (int i = 0, n = this->_internal_init_vel_error_mps_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_init_vel_error_mps(i), target);
  }

  // repeated double init_att_error_deg = 3;
  for (int i = 0, n = this->_internal_init_att_error_deg_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_init_att_error_deg(i), target);
  }

  // repeated double init_acc_bias_error_mg = 4;
  for (int i = 0, n = this->_internal_init_acc_bias_error_mg_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_init_acc_bias_error_mg(i), target);
  }

  // repeated double init_gyr_bias_error_dps = 5;
  for (int i = 0, n = this->_internal_init_gyr_bias_error_dps_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_init_gyr_bias_error_dps(i), target);
  }

  // repeated double init_qvi_error_deg = 6;
  for (int i = 0, n = this->_internal_init_qvi_error_deg_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_init_qvi_error_deg(i), target);
  }

  // repeated double init_kod_error = 7;
  for (int i = 0, n = this->_internal_init_kod_error_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_init_kod_error(i), target);
  }

  // repeated double position_random_walk_mpsh = 8;
  for (int i = 0, n = this->_internal_position_random_walk_mpsh_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_position_random_walk_mpsh(i), target);
  }

  // repeated double odo_scale_random_walk_psh = 9;
  for (int i = 0, n = this->_internal_odo_scale_random_walk_psh_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->_internal_odo_scale_random_walk_psh(i), target);
  }

  // repeated double qvv1_random_walk_dpsh = 10;
  for (int i = 0, n = this->_internal_qvv1_random_walk_dpsh_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(10, this->_internal_qvv1_random_walk_dpsh(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:civ.civloc.FilterPara)
  return target;
}

size_t FilterPara::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:civ.civloc.FilterPara)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double init_pos_error_m = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_init_pos_error_m_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_init_pos_error_m_size());
    total_size += data_size;
  }

  // repeated double init_vel_error_mps = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_init_vel_error_mps_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_init_vel_error_mps_size());
    total_size += data_size;
  }

  // repeated double init_att_error_deg = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_init_att_error_deg_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_init_att_error_deg_size());
    total_size += data_size;
  }

  // repeated double init_acc_bias_error_mg = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_init_acc_bias_error_mg_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_init_acc_bias_error_mg_size());
    total_size += data_size;
  }

  // repeated double init_gyr_bias_error_dps = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_init_gyr_bias_error_dps_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_init_gyr_bias_error_dps_size());
    total_size += data_size;
  }

  // repeated double init_qvi_error_deg = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_init_qvi_error_deg_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_init_qvi_error_deg_size());
    total_size += data_size;
  }

  // repeated double init_kod_error = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_init_kod_error_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_init_kod_error_size());
    total_size += data_size;
  }

  // repeated double position_random_walk_mpsh = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_position_random_walk_mpsh_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_position_random_walk_mpsh_size());
    total_size += data_size;
  }

  // repeated double odo_scale_random_walk_psh = 9;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_odo_scale_random_walk_psh_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_odo_scale_random_walk_psh_size());
    total_size += data_size;
  }

  // repeated double qvv1_random_walk_dpsh = 10;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_qvv1_random_walk_dpsh_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_qvv1_random_walk_dpsh_size());
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FilterPara::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:civ.civloc.FilterPara)
  GOOGLE_DCHECK_NE(&from, this);
  const FilterPara* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FilterPara>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:civ.civloc.FilterPara)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:civ.civloc.FilterPara)
    MergeFrom(*source);
  }
}

void FilterPara::MergeFrom(const FilterPara& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:civ.civloc.FilterPara)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  init_pos_error_m_.MergeFrom(from.init_pos_error_m_);
  init_vel_error_mps_.MergeFrom(from.init_vel_error_mps_);
  init_att_error_deg_.MergeFrom(from.init_att_error_deg_);
  init_acc_bias_error_mg_.MergeFrom(from.init_acc_bias_error_mg_);
  init_gyr_bias_error_dps_.MergeFrom(from.init_gyr_bias_error_dps_);
  init_qvi_error_deg_.MergeFrom(from.init_qvi_error_deg_);
  init_kod_error_.MergeFrom(from.init_kod_error_);
  position_random_walk_mpsh_.MergeFrom(from.position_random_walk_mpsh_);
  odo_scale_random_walk_psh_.MergeFrom(from.odo_scale_random_walk_psh_);
  qvv1_random_walk_dpsh_.MergeFrom(from.qvv1_random_walk_dpsh_);
}

void FilterPara::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:civ.civloc.FilterPara)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FilterPara::CopyFrom(const FilterPara& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:civ.civloc.FilterPara)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FilterPara::IsInitialized() const {
  return true;
}

void FilterPara::InternalSwap(FilterPara* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  init_pos_error_m_.InternalSwap(&other->init_pos_error_m_);
  init_vel_error_mps_.InternalSwap(&other->init_vel_error_mps_);
  init_att_error_deg_.InternalSwap(&other->init_att_error_deg_);
  init_acc_bias_error_mg_.InternalSwap(&other->init_acc_bias_error_mg_);
  init_gyr_bias_error_dps_.InternalSwap(&other->init_gyr_bias_error_dps_);
  init_qvi_error_deg_.InternalSwap(&other->init_qvi_error_deg_);
  init_kod_error_.InternalSwap(&other->init_kod_error_);
  position_random_walk_mpsh_.InternalSwap(&other->position_random_walk_mpsh_);
  odo_scale_random_walk_psh_.InternalSwap(&other->odo_scale_random_walk_psh_);
  qvv1_random_walk_dpsh_.InternalSwap(&other->qvv1_random_walk_dpsh_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FilterPara::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GnssFilterConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<GnssFilterConfig>()._has_bits_);
  static void set_has_enable_gnss_pos(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_enable_gnss_vel(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_enable_gnss_dual(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_farme_judge_time_s(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_max_change_ratio(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_pos_std_m_upper_limit(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_residual_drift_m_upper_limit(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_heading_std_deg_upper_limit(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_heading_std_deg_lower_limit(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x000001ff) ^ 0x000001ff) != 0;
  }
};

GnssFilterConfig::GnssFilterConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  position_noise_m_(arena),
  velocity_noise_mps_(arena),
  dual_angle_noise_deg_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:civ.civloc.GnssFilterConfig)
}
GnssFilterConfig::GnssFilterConfig(const GnssFilterConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      position_noise_m_(from.position_noise_m_),
      velocity_noise_mps_(from.velocity_noise_mps_),
      dual_angle_noise_deg_(from.dual_angle_noise_deg_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&enable_gnss_pos_, &from.enable_gnss_pos_,
    static_cast<size_t>(reinterpret_cast<char*>(&heading_std_deg_lower_limit_) -
    reinterpret_cast<char*>(&enable_gnss_pos_)) + sizeof(heading_std_deg_lower_limit_));
  // @@protoc_insertion_point(copy_constructor:civ.civloc.GnssFilterConfig)
}

void GnssFilterConfig::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&enable_gnss_pos_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&heading_std_deg_lower_limit_) -
      reinterpret_cast<char*>(&enable_gnss_pos_)) + sizeof(heading_std_deg_lower_limit_));
}

GnssFilterConfig::~GnssFilterConfig() {
  // @@protoc_insertion_point(destructor:civ.civloc.GnssFilterConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GnssFilterConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GnssFilterConfig::ArenaDtor(void* object) {
  GnssFilterConfig* _this = reinterpret_cast< GnssFilterConfig* >(object);
  (void)_this;
}
void GnssFilterConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GnssFilterConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GnssFilterConfig& GnssFilterConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GnssFilterConfig_civloc_2fproto_2flocator_2eproto.base);
  return *internal_default_instance();
}


void GnssFilterConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:civ.civloc.GnssFilterConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  position_noise_m_.Clear();
  velocity_noise_mps_.Clear();
  dual_angle_noise_deg_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&enable_gnss_pos_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&heading_std_deg_upper_limit_) -
        reinterpret_cast<char*>(&enable_gnss_pos_)) + sizeof(heading_std_deg_upper_limit_));
  }
  heading_std_deg_lower_limit_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GnssFilterConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required bool enable_gnss_pos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_enable_gnss_pos(&has_bits);
          enable_gnss_pos_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool enable_gnss_vel = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_enable_gnss_vel(&has_bits);
          enable_gnss_vel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated double position_noise_m = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_position_noise_m(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<25>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_position_noise_m(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated double velocity_noise_mps = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_velocity_noise_mps(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<33>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_velocity_noise_mps(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool enable_gnss_dual = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_enable_gnss_dual(&has_bits);
          enable_gnss_dual_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated double dual_angle_noise_deg = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_dual_angle_noise_deg(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<49>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_dual_angle_noise_deg(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required float farme_judge_time_s = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          _Internal::set_has_farme_judge_time_s(&has_bits);
          farme_judge_time_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float max_change_ratio = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          _Internal::set_has_max_change_ratio(&has_bits);
          max_change_ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float pos_std_m_upper_limit = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          _Internal::set_has_pos_std_m_upper_limit(&has_bits);
          pos_std_m_upper_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float residual_drift_m_upper_limit = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          _Internal::set_has_residual_drift_m_upper_limit(&has_bits);
          residual_drift_m_upper_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float heading_std_deg_upper_limit = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          _Internal::set_has_heading_std_deg_upper_limit(&has_bits);
          heading_std_deg_upper_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float heading_std_deg_lower_limit = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 101)) {
          _Internal::set_has_heading_std_deg_lower_limit(&has_bits);
          heading_std_deg_lower_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GnssFilterConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:civ.civloc.GnssFilterConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bool enable_gnss_pos = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_enable_gnss_pos(), target);
  }

  // required bool enable_gnss_vel = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_enable_gnss_vel(), target);
  }

  // repeated double position_noise_m = 3;
  for (int i = 0, n = this->_internal_position_noise_m_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_position_noise_m(i), target);
  }

  // repeated double velocity_noise_mps = 4;
  for (int i = 0, n = this->_internal_velocity_noise_mps_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_velocity_noise_mps(i), target);
  }

  // required bool enable_gnss_dual = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_enable_gnss_dual(), target);
  }

  // repeated double dual_angle_noise_deg = 6;
  for (int i = 0, n = this->_internal_dual_angle_noise_deg_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_dual_angle_noise_deg(i), target);
  }

  // required float farme_judge_time_s = 7;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_farme_judge_time_s(), target);
  }

  // required float max_change_ratio = 8;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_max_change_ratio(), target);
  }

  // required float pos_std_m_upper_limit = 9;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_pos_std_m_upper_limit(), target);
  }

  // required float residual_drift_m_upper_limit = 10;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(10, this->_internal_residual_drift_m_upper_limit(), target);
  }

  // required float heading_std_deg_upper_limit = 11;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(11, this->_internal_heading_std_deg_upper_limit(), target);
  }

  // required float heading_std_deg_lower_limit = 12;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(12, this->_internal_heading_std_deg_lower_limit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:civ.civloc.GnssFilterConfig)
  return target;
}

size_t GnssFilterConfig::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:civ.civloc.GnssFilterConfig)
  size_t total_size = 0;

  if (_internal_has_enable_gnss_pos()) {
    // required bool enable_gnss_pos = 1;
    total_size += 1 + 1;
  }

  if (_internal_has_enable_gnss_vel()) {
    // required bool enable_gnss_vel = 2;
    total_size += 1 + 1;
  }

  if (_internal_has_enable_gnss_dual()) {
    // required bool enable_gnss_dual = 5;
    total_size += 1 + 1;
  }

  if (_internal_has_farme_judge_time_s()) {
    // required float farme_judge_time_s = 7;
    total_size += 1 + 4;
  }

  if (_internal_has_max_change_ratio()) {
    // required float max_change_ratio = 8;
    total_size += 1 + 4;
  }

  if (_internal_has_pos_std_m_upper_limit()) {
    // required float pos_std_m_upper_limit = 9;
    total_size += 1 + 4;
  }

  if (_internal_has_residual_drift_m_upper_limit()) {
    // required float residual_drift_m_upper_limit = 10;
    total_size += 1 + 4;
  }

  if (_internal_has_heading_std_deg_upper_limit()) {
    // required float heading_std_deg_upper_limit = 11;
    total_size += 1 + 4;
  }

  if (_internal_has_heading_std_deg_lower_limit()) {
    // required float heading_std_deg_lower_limit = 12;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t GnssFilterConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:civ.civloc.GnssFilterConfig)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x000001ff) ^ 0x000001ff) == 0) {  // All required fields are present.
    // required bool enable_gnss_pos = 1;
    total_size += 1 + 1;

    // required bool enable_gnss_vel = 2;
    total_size += 1 + 1;

    // required bool enable_gnss_dual = 5;
    total_size += 1 + 1;

    // required float farme_judge_time_s = 7;
    total_size += 1 + 4;

    // required float max_change_ratio = 8;
    total_size += 1 + 4;

    // required float pos_std_m_upper_limit = 9;
    total_size += 1 + 4;

    // required float residual_drift_m_upper_limit = 10;
    total_size += 1 + 4;

    // required float heading_std_deg_upper_limit = 11;
    total_size += 1 + 4;

    // required float heading_std_deg_lower_limit = 12;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double position_noise_m = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_position_noise_m_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_position_noise_m_size());
    total_size += data_size;
  }

  // repeated double velocity_noise_mps = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_velocity_noise_mps_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_velocity_noise_mps_size());
    total_size += data_size;
  }

  // repeated double dual_angle_noise_deg = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_dual_angle_noise_deg_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_dual_angle_noise_deg_size());
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GnssFilterConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:civ.civloc.GnssFilterConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const GnssFilterConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GnssFilterConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:civ.civloc.GnssFilterConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:civ.civloc.GnssFilterConfig)
    MergeFrom(*source);
  }
}

void GnssFilterConfig::MergeFrom(const GnssFilterConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:civ.civloc.GnssFilterConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  position_noise_m_.MergeFrom(from.position_noise_m_);
  velocity_noise_mps_.MergeFrom(from.velocity_noise_mps_);
  dual_angle_noise_deg_.MergeFrom(from.dual_angle_noise_deg_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      enable_gnss_pos_ = from.enable_gnss_pos_;
    }
    if (cached_has_bits & 0x00000002u) {
      enable_gnss_vel_ = from.enable_gnss_vel_;
    }
    if (cached_has_bits & 0x00000004u) {
      enable_gnss_dual_ = from.enable_gnss_dual_;
    }
    if (cached_has_bits & 0x00000008u) {
      farme_judge_time_s_ = from.farme_judge_time_s_;
    }
    if (cached_has_bits & 0x00000010u) {
      max_change_ratio_ = from.max_change_ratio_;
    }
    if (cached_has_bits & 0x00000020u) {
      pos_std_m_upper_limit_ = from.pos_std_m_upper_limit_;
    }
    if (cached_has_bits & 0x00000040u) {
      residual_drift_m_upper_limit_ = from.residual_drift_m_upper_limit_;
    }
    if (cached_has_bits & 0x00000080u) {
      heading_std_deg_upper_limit_ = from.heading_std_deg_upper_limit_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_heading_std_deg_lower_limit(from._internal_heading_std_deg_lower_limit());
  }
}

void GnssFilterConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:civ.civloc.GnssFilterConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GnssFilterConfig::CopyFrom(const GnssFilterConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:civ.civloc.GnssFilterConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GnssFilterConfig::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void GnssFilterConfig::InternalSwap(GnssFilterConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  position_noise_m_.InternalSwap(&other->position_noise_m_);
  velocity_noise_mps_.InternalSwap(&other->velocity_noise_mps_);
  dual_angle_noise_deg_.InternalSwap(&other->dual_angle_noise_deg_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GnssFilterConfig, heading_std_deg_lower_limit_)
      + sizeof(GnssFilterConfig::heading_std_deg_lower_limit_)
      - PROTOBUF_FIELD_OFFSET(GnssFilterConfig, enable_gnss_pos_)>(
          reinterpret_cast<char*>(&enable_gnss_pos_),
          reinterpret_cast<char*>(&other->enable_gnss_pos_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GnssFilterConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class VehicleModelFilterConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<VehicleModelFilterConfig>()._has_bits_);
  static void set_has_enable_nhc(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_enable_zupt(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_enable_zgbc(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_enable_zpc(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_enable_zac(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000001f) ^ 0x0000001f) != 0;
  }
};

VehicleModelFilterConfig::VehicleModelFilterConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  nhc_noise_mps_(arena),
  zupt_noise_mps_(arena),
  zgbc_noise_dps_(arena),
  zac_noise_deg_(arena),
  zpc_noise_m_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:civ.civloc.VehicleModelFilterConfig)
}
VehicleModelFilterConfig::VehicleModelFilterConfig(const VehicleModelFilterConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      nhc_noise_mps_(from.nhc_noise_mps_),
      zupt_noise_mps_(from.zupt_noise_mps_),
      zgbc_noise_dps_(from.zgbc_noise_dps_),
      zac_noise_deg_(from.zac_noise_deg_),
      zpc_noise_m_(from.zpc_noise_m_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&enable_nhc_, &from.enable_nhc_,
    static_cast<size_t>(reinterpret_cast<char*>(&enable_zac_) -
    reinterpret_cast<char*>(&enable_nhc_)) + sizeof(enable_zac_));
  // @@protoc_insertion_point(copy_constructor:civ.civloc.VehicleModelFilterConfig)
}

void VehicleModelFilterConfig::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&enable_nhc_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&enable_zac_) -
      reinterpret_cast<char*>(&enable_nhc_)) + sizeof(enable_zac_));
}

VehicleModelFilterConfig::~VehicleModelFilterConfig() {
  // @@protoc_insertion_point(destructor:civ.civloc.VehicleModelFilterConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VehicleModelFilterConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void VehicleModelFilterConfig::ArenaDtor(void* object) {
  VehicleModelFilterConfig* _this = reinterpret_cast< VehicleModelFilterConfig* >(object);
  (void)_this;
}
void VehicleModelFilterConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VehicleModelFilterConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VehicleModelFilterConfig& VehicleModelFilterConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VehicleModelFilterConfig_civloc_2fproto_2flocator_2eproto.base);
  return *internal_default_instance();
}


void VehicleModelFilterConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:civ.civloc.VehicleModelFilterConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nhc_noise_mps_.Clear();
  zupt_noise_mps_.Clear();
  zgbc_noise_dps_.Clear();
  zac_noise_deg_.Clear();
  zpc_noise_m_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&enable_nhc_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&enable_zac_) -
        reinterpret_cast<char*>(&enable_nhc_)) + sizeof(enable_zac_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VehicleModelFilterConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required bool enable_nhc = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_enable_nhc(&has_bits);
          enable_nhc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool enable_zupt = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_enable_zupt(&has_bits);
          enable_zupt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool enable_zgbc = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_enable_zgbc(&has_bits);
          enable_zgbc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool enable_zpc = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_enable_zpc(&has_bits);
          enable_zpc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool enable_zac = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_enable_zac(&has_bits);
          enable_zac_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated double nhc_noise_mps = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_nhc_noise_mps(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<81>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_nhc_noise_mps(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated double zupt_noise_mps = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 89)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_zupt_noise_mps(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<89>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_zupt_noise_mps(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated double zgbc_noise_dps = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 97)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_zgbc_noise_dps(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<97>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_zgbc_noise_dps(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated double zac_noise_deg = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 105)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_zac_noise_deg(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<105>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_zac_noise_deg(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated double zpc_noise_m = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 113)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_zpc_noise_m(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<113>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_zpc_noise_m(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VehicleModelFilterConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:civ.civloc.VehicleModelFilterConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bool enable_nhc = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_enable_nhc(), target);
  }

  // required bool enable_zupt = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_enable_zupt(), target);
  }

  // required bool enable_zgbc = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_enable_zgbc(), target);
  }

  // required bool enable_zpc = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_enable_zpc(), target);
  }

  // required bool enable_zac = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_enable_zac(), target);
  }

  // repeated double nhc_noise_mps = 10;
  for (int i = 0, n = this->_internal_nhc_noise_mps_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(10, this->_internal_nhc_noise_mps(i), target);
  }

  // repeated double zupt_noise_mps = 11;
  for (int i = 0, n = this->_internal_zupt_noise_mps_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(11, this->_internal_zupt_noise_mps(i), target);
  }

  // repeated double zgbc_noise_dps = 12;
  for (int i = 0, n = this->_internal_zgbc_noise_dps_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(12, this->_internal_zgbc_noise_dps(i), target);
  }

  // repeated double zac_noise_deg = 13;
  for (int i = 0, n = this->_internal_zac_noise_deg_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(13, this->_internal_zac_noise_deg(i), target);
  }

  // repeated double zpc_noise_m = 14;
  for (int i = 0, n = this->_internal_zpc_noise_m_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(14, this->_internal_zpc_noise_m(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:civ.civloc.VehicleModelFilterConfig)
  return target;
}

size_t VehicleModelFilterConfig::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:civ.civloc.VehicleModelFilterConfig)
  size_t total_size = 0;

  if (_internal_has_enable_nhc()) {
    // required bool enable_nhc = 1;
    total_size += 1 + 1;
  }

  if (_internal_has_enable_zupt()) {
    // required bool enable_zupt = 2;
    total_size += 1 + 1;
  }

  if (_internal_has_enable_zgbc()) {
    // required bool enable_zgbc = 3;
    total_size += 1 + 1;
  }

  if (_internal_has_enable_zpc()) {
    // required bool enable_zpc = 4;
    total_size += 1 + 1;
  }

  if (_internal_has_enable_zac()) {
    // required bool enable_zac = 5;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t VehicleModelFilterConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:civ.civloc.VehicleModelFilterConfig)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required bool enable_nhc = 1;
    total_size += 1 + 1;

    // required bool enable_zupt = 2;
    total_size += 1 + 1;

    // required bool enable_zgbc = 3;
    total_size += 1 + 1;

    // required bool enable_zpc = 4;
    total_size += 1 + 1;

    // required bool enable_zac = 5;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double nhc_noise_mps = 10;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_nhc_noise_mps_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_nhc_noise_mps_size());
    total_size += data_size;
  }

  // repeated double zupt_noise_mps = 11;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_zupt_noise_mps_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_zupt_noise_mps_size());
    total_size += data_size;
  }

  // repeated double zgbc_noise_dps = 12;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_zgbc_noise_dps_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_zgbc_noise_dps_size());
    total_size += data_size;
  }

  // repeated double zac_noise_deg = 13;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_zac_noise_deg_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_zac_noise_deg_size());
    total_size += data_size;
  }

  // repeated double zpc_noise_m = 14;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_zpc_noise_m_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_zpc_noise_m_size());
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VehicleModelFilterConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:civ.civloc.VehicleModelFilterConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const VehicleModelFilterConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VehicleModelFilterConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:civ.civloc.VehicleModelFilterConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:civ.civloc.VehicleModelFilterConfig)
    MergeFrom(*source);
  }
}

void VehicleModelFilterConfig::MergeFrom(const VehicleModelFilterConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:civ.civloc.VehicleModelFilterConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  nhc_noise_mps_.MergeFrom(from.nhc_noise_mps_);
  zupt_noise_mps_.MergeFrom(from.zupt_noise_mps_);
  zgbc_noise_dps_.MergeFrom(from.zgbc_noise_dps_);
  zac_noise_deg_.MergeFrom(from.zac_noise_deg_);
  zpc_noise_m_.MergeFrom(from.zpc_noise_m_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      enable_nhc_ = from.enable_nhc_;
    }
    if (cached_has_bits & 0x00000002u) {
      enable_zupt_ = from.enable_zupt_;
    }
    if (cached_has_bits & 0x00000004u) {
      enable_zgbc_ = from.enable_zgbc_;
    }
    if (cached_has_bits & 0x00000008u) {
      enable_zpc_ = from.enable_zpc_;
    }
    if (cached_has_bits & 0x00000010u) {
      enable_zac_ = from.enable_zac_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void VehicleModelFilterConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:civ.civloc.VehicleModelFilterConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VehicleModelFilterConfig::CopyFrom(const VehicleModelFilterConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:civ.civloc.VehicleModelFilterConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VehicleModelFilterConfig::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void VehicleModelFilterConfig::InternalSwap(VehicleModelFilterConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  nhc_noise_mps_.InternalSwap(&other->nhc_noise_mps_);
  zupt_noise_mps_.InternalSwap(&other->zupt_noise_mps_);
  zgbc_noise_dps_.InternalSwap(&other->zgbc_noise_dps_);
  zac_noise_deg_.InternalSwap(&other->zac_noise_deg_);
  zpc_noise_m_.InternalSwap(&other->zpc_noise_m_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VehicleModelFilterConfig, enable_zac_)
      + sizeof(VehicleModelFilterConfig::enable_zac_)
      - PROTOBUF_FIELD_OFFSET(VehicleModelFilterConfig, enable_nhc_)>(
          reinterpret_cast<char*>(&enable_nhc_),
          reinterpret_cast<char*>(&other->enable_nhc_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VehicleModelFilterConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class WheelOdoFilterConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<WheelOdoFilterConfig>()._has_bits_);
  static void set_has_enable_rear_wheel(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_enable_front_wheel(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_enable_rear_diff(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_enable_front_diff(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000f) ^ 0x0000000f) != 0;
  }
};

WheelOdoFilterConfig::WheelOdoFilterConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  rear_wheel_noise_mps_(arena),
  front_wheel_noise_mps_(arena),
  rear_diff_noise_mps_(arena),
  front_diff_noise_mps_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:civ.civloc.WheelOdoFilterConfig)
}
WheelOdoFilterConfig::WheelOdoFilterConfig(const WheelOdoFilterConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      rear_wheel_noise_mps_(from.rear_wheel_noise_mps_),
      front_wheel_noise_mps_(from.front_wheel_noise_mps_),
      rear_diff_noise_mps_(from.rear_diff_noise_mps_),
      front_diff_noise_mps_(from.front_diff_noise_mps_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&enable_rear_wheel_, &from.enable_rear_wheel_,
    static_cast<size_t>(reinterpret_cast<char*>(&enable_front_diff_) -
    reinterpret_cast<char*>(&enable_rear_wheel_)) + sizeof(enable_front_diff_));
  // @@protoc_insertion_point(copy_constructor:civ.civloc.WheelOdoFilterConfig)
}

void WheelOdoFilterConfig::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&enable_rear_wheel_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&enable_front_diff_) -
      reinterpret_cast<char*>(&enable_rear_wheel_)) + sizeof(enable_front_diff_));
}

WheelOdoFilterConfig::~WheelOdoFilterConfig() {
  // @@protoc_insertion_point(destructor:civ.civloc.WheelOdoFilterConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void WheelOdoFilterConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void WheelOdoFilterConfig::ArenaDtor(void* object) {
  WheelOdoFilterConfig* _this = reinterpret_cast< WheelOdoFilterConfig* >(object);
  (void)_this;
}
void WheelOdoFilterConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WheelOdoFilterConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WheelOdoFilterConfig& WheelOdoFilterConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WheelOdoFilterConfig_civloc_2fproto_2flocator_2eproto.base);
  return *internal_default_instance();
}


void WheelOdoFilterConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:civ.civloc.WheelOdoFilterConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rear_wheel_noise_mps_.Clear();
  front_wheel_noise_mps_.Clear();
  rear_diff_noise_mps_.Clear();
  front_diff_noise_mps_.Clear();
  ::memset(&enable_rear_wheel_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&enable_front_diff_) -
      reinterpret_cast<char*>(&enable_rear_wheel_)) + sizeof(enable_front_diff_));
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WheelOdoFilterConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required bool enable_rear_wheel = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_enable_rear_wheel(&has_bits);
          enable_rear_wheel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool enable_front_wheel = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_enable_front_wheel(&has_bits);
          enable_front_wheel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool enable_rear_diff = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_enable_rear_diff(&has_bits);
          enable_rear_diff_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool enable_front_diff = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_enable_front_diff(&has_bits);
          enable_front_diff_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated double rear_wheel_noise_mps = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_rear_wheel_noise_mps(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<41>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_rear_wheel_noise_mps(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated double front_wheel_noise_mps = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_front_wheel_noise_mps(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<49>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_front_wheel_noise_mps(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated double rear_diff_noise_mps = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_rear_diff_noise_mps(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<57>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_rear_diff_noise_mps(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated double front_diff_noise_mps = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_front_diff_noise_mps(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<65>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_front_diff_noise_mps(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WheelOdoFilterConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:civ.civloc.WheelOdoFilterConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bool enable_rear_wheel = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_enable_rear_wheel(), target);
  }

  // required bool enable_front_wheel = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_enable_front_wheel(), target);
  }

  // required bool enable_rear_diff = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_enable_rear_diff(), target);
  }

  // required bool enable_front_diff = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_enable_front_diff(), target);
  }

  // repeated double rear_wheel_noise_mps = 5;
  for (int i = 0, n = this->_internal_rear_wheel_noise_mps_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_rear_wheel_noise_mps(i), target);
  }

  // repeated double front_wheel_noise_mps = 6;
  for (int i = 0, n = this->_internal_front_wheel_noise_mps_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_front_wheel_noise_mps(i), target);
  }

  // repeated double rear_diff_noise_mps = 7;
  for (int i = 0, n = this->_internal_rear_diff_noise_mps_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_rear_diff_noise_mps(i), target);
  }

  // repeated double front_diff_noise_mps = 8;
  for (int i = 0, n = this->_internal_front_diff_noise_mps_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_front_diff_noise_mps(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:civ.civloc.WheelOdoFilterConfig)
  return target;
}

size_t WheelOdoFilterConfig::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:civ.civloc.WheelOdoFilterConfig)
  size_t total_size = 0;

  if (_internal_has_enable_rear_wheel()) {
    // required bool enable_rear_wheel = 1;
    total_size += 1 + 1;
  }

  if (_internal_has_enable_front_wheel()) {
    // required bool enable_front_wheel = 2;
    total_size += 1 + 1;
  }

  if (_internal_has_enable_rear_diff()) {
    // required bool enable_rear_diff = 3;
    total_size += 1 + 1;
  }

  if (_internal_has_enable_front_diff()) {
    // required bool enable_front_diff = 4;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t WheelOdoFilterConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:civ.civloc.WheelOdoFilterConfig)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required bool enable_rear_wheel = 1;
    total_size += 1 + 1;

    // required bool enable_front_wheel = 2;
    total_size += 1 + 1;

    // required bool enable_rear_diff = 3;
    total_size += 1 + 1;

    // required bool enable_front_diff = 4;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double rear_wheel_noise_mps = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_rear_wheel_noise_mps_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_rear_wheel_noise_mps_size());
    total_size += data_size;
  }

  // repeated double front_wheel_noise_mps = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_front_wheel_noise_mps_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_front_wheel_noise_mps_size());
    total_size += data_size;
  }

  // repeated double rear_diff_noise_mps = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_rear_diff_noise_mps_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_rear_diff_noise_mps_size());
    total_size += data_size;
  }

  // repeated double front_diff_noise_mps = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_front_diff_noise_mps_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_front_diff_noise_mps_size());
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WheelOdoFilterConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:civ.civloc.WheelOdoFilterConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const WheelOdoFilterConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WheelOdoFilterConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:civ.civloc.WheelOdoFilterConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:civ.civloc.WheelOdoFilterConfig)
    MergeFrom(*source);
  }
}

void WheelOdoFilterConfig::MergeFrom(const WheelOdoFilterConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:civ.civloc.WheelOdoFilterConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  rear_wheel_noise_mps_.MergeFrom(from.rear_wheel_noise_mps_);
  front_wheel_noise_mps_.MergeFrom(from.front_wheel_noise_mps_);
  rear_diff_noise_mps_.MergeFrom(from.rear_diff_noise_mps_);
  front_diff_noise_mps_.MergeFrom(from.front_diff_noise_mps_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      enable_rear_wheel_ = from.enable_rear_wheel_;
    }
    if (cached_has_bits & 0x00000002u) {
      enable_front_wheel_ = from.enable_front_wheel_;
    }
    if (cached_has_bits & 0x00000004u) {
      enable_rear_diff_ = from.enable_rear_diff_;
    }
    if (cached_has_bits & 0x00000008u) {
      enable_front_diff_ = from.enable_front_diff_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void WheelOdoFilterConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:civ.civloc.WheelOdoFilterConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WheelOdoFilterConfig::CopyFrom(const WheelOdoFilterConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:civ.civloc.WheelOdoFilterConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WheelOdoFilterConfig::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void WheelOdoFilterConfig::InternalSwap(WheelOdoFilterConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  rear_wheel_noise_mps_.InternalSwap(&other->rear_wheel_noise_mps_);
  front_wheel_noise_mps_.InternalSwap(&other->front_wheel_noise_mps_);
  rear_diff_noise_mps_.InternalSwap(&other->rear_diff_noise_mps_);
  front_diff_noise_mps_.InternalSwap(&other->front_diff_noise_mps_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WheelOdoFilterConfig, enable_front_diff_)
      + sizeof(WheelOdoFilterConfig::enable_front_diff_)
      - PROTOBUF_FIELD_OFFSET(WheelOdoFilterConfig, enable_rear_wheel_)>(
          reinterpret_cast<char*>(&enable_rear_wheel_),
          reinterpret_cast<char*>(&other->enable_rear_wheel_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WheelOdoFilterConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class NDTConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<NDTConfig>()._has_bits_);
  static void set_has_res_m(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_step_size_m(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_trans_eps_m(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_rot_eps_deg(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_max_iter(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_score_threshold(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_transfer_prob_threshold(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000007f) ^ 0x0000007f) != 0;
  }
};

NDTConfig::NDTConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  online_scan_voxel_m_(arena),
  local_map_voxel_m_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:civ.civloc.NDTConfig)
}
NDTConfig::NDTConfig(const NDTConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      online_scan_voxel_m_(from.online_scan_voxel_m_),
      local_map_voxel_m_(from.local_map_voxel_m_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&res_m_, &from.res_m_,
    static_cast<size_t>(reinterpret_cast<char*>(&transfer_prob_threshold_) -
    reinterpret_cast<char*>(&res_m_)) + sizeof(transfer_prob_threshold_));
  // @@protoc_insertion_point(copy_constructor:civ.civloc.NDTConfig)
}

void NDTConfig::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&res_m_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&transfer_prob_threshold_) -
      reinterpret_cast<char*>(&res_m_)) + sizeof(transfer_prob_threshold_));
}

NDTConfig::~NDTConfig() {
  // @@protoc_insertion_point(destructor:civ.civloc.NDTConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NDTConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void NDTConfig::ArenaDtor(void* object) {
  NDTConfig* _this = reinterpret_cast< NDTConfig* >(object);
  (void)_this;
}
void NDTConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NDTConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NDTConfig& NDTConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NDTConfig_civloc_2fproto_2flocator_2eproto.base);
  return *internal_default_instance();
}


void NDTConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:civ.civloc.NDTConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  online_scan_voxel_m_.Clear();
  local_map_voxel_m_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    ::memset(&res_m_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&transfer_prob_threshold_) -
        reinterpret_cast<char*>(&res_m_)) + sizeof(transfer_prob_threshold_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NDTConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required double res_m = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_res_m(&has_bits);
          res_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required double step_size_m = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_step_size_m(&has_bits);
          step_size_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required double trans_eps_m = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_trans_eps_m(&has_bits);
          trans_eps_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required double rot_eps_deg = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_rot_eps_deg(&has_bits);
          rot_eps_deg_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required double max_iter = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_max_iter(&has_bits);
          max_iter_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required double score_threshold = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _Internal::set_has_score_threshold(&has_bits);
          score_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required double transfer_prob_threshold = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          _Internal::set_has_transfer_prob_threshold(&has_bits);
          transfer_prob_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated double online_scan_voxel_m = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_online_scan_voxel_m(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<65>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_online_scan_voxel_m(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated double local_map_voxel_m = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_local_map_voxel_m(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<73>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_local_map_voxel_m(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NDTConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:civ.civloc.NDTConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required double res_m = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_res_m(), target);
  }

  // required double step_size_m = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_step_size_m(), target);
  }

  // required double trans_eps_m = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_trans_eps_m(), target);
  }

  // required double rot_eps_deg = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_rot_eps_deg(), target);
  }

  // required double max_iter = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_max_iter(), target);
  }

  // required double score_threshold = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_score_threshold(), target);
  }

  // required double transfer_prob_threshold = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_transfer_prob_threshold(), target);
  }

  // repeated double online_scan_voxel_m = 8;
  for (int i = 0, n = this->_internal_online_scan_voxel_m_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_online_scan_voxel_m(i), target);
  }

  // repeated double local_map_voxel_m = 9;
  for (int i = 0, n = this->_internal_local_map_voxel_m_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->_internal_local_map_voxel_m(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:civ.civloc.NDTConfig)
  return target;
}

size_t NDTConfig::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:civ.civloc.NDTConfig)
  size_t total_size = 0;

  if (_internal_has_res_m()) {
    // required double res_m = 1;
    total_size += 1 + 8;
  }

  if (_internal_has_step_size_m()) {
    // required double step_size_m = 2;
    total_size += 1 + 8;
  }

  if (_internal_has_trans_eps_m()) {
    // required double trans_eps_m = 3;
    total_size += 1 + 8;
  }

  if (_internal_has_rot_eps_deg()) {
    // required double rot_eps_deg = 4;
    total_size += 1 + 8;
  }

  if (_internal_has_max_iter()) {
    // required double max_iter = 5;
    total_size += 1 + 8;
  }

  if (_internal_has_score_threshold()) {
    // required double score_threshold = 6;
    total_size += 1 + 8;
  }

  if (_internal_has_transfer_prob_threshold()) {
    // required double transfer_prob_threshold = 7;
    total_size += 1 + 8;
  }

  return total_size;
}
size_t NDTConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:civ.civloc.NDTConfig)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000007f) ^ 0x0000007f) == 0) {  // All required fields are present.
    // required double res_m = 1;
    total_size += 1 + 8;

    // required double step_size_m = 2;
    total_size += 1 + 8;

    // required double trans_eps_m = 3;
    total_size += 1 + 8;

    // required double rot_eps_deg = 4;
    total_size += 1 + 8;

    // required double max_iter = 5;
    total_size += 1 + 8;

    // required double score_threshold = 6;
    total_size += 1 + 8;

    // required double transfer_prob_threshold = 7;
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double online_scan_voxel_m = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_online_scan_voxel_m_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_online_scan_voxel_m_size());
    total_size += data_size;
  }

  // repeated double local_map_voxel_m = 9;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_local_map_voxel_m_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_local_map_voxel_m_size());
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NDTConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:civ.civloc.NDTConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const NDTConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NDTConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:civ.civloc.NDTConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:civ.civloc.NDTConfig)
    MergeFrom(*source);
  }
}

void NDTConfig::MergeFrom(const NDTConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:civ.civloc.NDTConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  online_scan_voxel_m_.MergeFrom(from.online_scan_voxel_m_);
  local_map_voxel_m_.MergeFrom(from.local_map_voxel_m_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      res_m_ = from.res_m_;
    }
    if (cached_has_bits & 0x00000002u) {
      step_size_m_ = from.step_size_m_;
    }
    if (cached_has_bits & 0x00000004u) {
      trans_eps_m_ = from.trans_eps_m_;
    }
    if (cached_has_bits & 0x00000008u) {
      rot_eps_deg_ = from.rot_eps_deg_;
    }
    if (cached_has_bits & 0x00000010u) {
      max_iter_ = from.max_iter_;
    }
    if (cached_has_bits & 0x00000020u) {
      score_threshold_ = from.score_threshold_;
    }
    if (cached_has_bits & 0x00000040u) {
      transfer_prob_threshold_ = from.transfer_prob_threshold_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void NDTConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:civ.civloc.NDTConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NDTConfig::CopyFrom(const NDTConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:civ.civloc.NDTConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NDTConfig::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void NDTConfig::InternalSwap(NDTConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  online_scan_voxel_m_.InternalSwap(&other->online_scan_voxel_m_);
  local_map_voxel_m_.InternalSwap(&other->local_map_voxel_m_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NDTConfig, transfer_prob_threshold_)
      + sizeof(NDTConfig::transfer_prob_threshold_)
      - PROTOBUF_FIELD_OFFSET(NDTConfig, res_m_)>(
          reinterpret_cast<char*>(&res_m_),
          reinterpret_cast<char*>(&other->res_m_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NDTConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class LidarFilterConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<LidarFilterConfig>()._has_bits_);
  static void set_has_enable_ndt_map_match(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_enable_ndt_frame_match(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

LidarFilterConfig::LidarFilterConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  ndt_map_match_transfer_prob_threshold_(arena),
  ndt_map_match_score_threshold_(arena),
  ndt_map_match_nice_noise_mps_(arena),
  ndt_map_match_bad_noise_mps_(arena),
  ndt_frame_match_noise_mps_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:civ.civloc.LidarFilterConfig)
}
LidarFilterConfig::LidarFilterConfig(const LidarFilterConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      ndt_map_match_transfer_prob_threshold_(from.ndt_map_match_transfer_prob_threshold_),
      ndt_map_match_score_threshold_(from.ndt_map_match_score_threshold_),
      ndt_map_match_nice_noise_mps_(from.ndt_map_match_nice_noise_mps_),
      ndt_map_match_bad_noise_mps_(from.ndt_map_match_bad_noise_mps_),
      ndt_frame_match_noise_mps_(from.ndt_frame_match_noise_mps_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&enable_ndt_map_match_, &from.enable_ndt_map_match_,
    static_cast<size_t>(reinterpret_cast<char*>(&enable_ndt_frame_match_) -
    reinterpret_cast<char*>(&enable_ndt_map_match_)) + sizeof(enable_ndt_frame_match_));
  // @@protoc_insertion_point(copy_constructor:civ.civloc.LidarFilterConfig)
}

void LidarFilterConfig::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&enable_ndt_map_match_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&enable_ndt_frame_match_) -
      reinterpret_cast<char*>(&enable_ndt_map_match_)) + sizeof(enable_ndt_frame_match_));
}

LidarFilterConfig::~LidarFilterConfig() {
  // @@protoc_insertion_point(destructor:civ.civloc.LidarFilterConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LidarFilterConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void LidarFilterConfig::ArenaDtor(void* object) {
  LidarFilterConfig* _this = reinterpret_cast< LidarFilterConfig* >(object);
  (void)_this;
}
void LidarFilterConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LidarFilterConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LidarFilterConfig& LidarFilterConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LidarFilterConfig_civloc_2fproto_2flocator_2eproto.base);
  return *internal_default_instance();
}


void LidarFilterConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:civ.civloc.LidarFilterConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ndt_map_match_transfer_prob_threshold_.Clear();
  ndt_map_match_score_threshold_.Clear();
  ndt_map_match_nice_noise_mps_.Clear();
  ndt_map_match_bad_noise_mps_.Clear();
  ndt_frame_match_noise_mps_.Clear();
  ::memset(&enable_ndt_map_match_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&enable_ndt_frame_match_) -
      reinterpret_cast<char*>(&enable_ndt_map_match_)) + sizeof(enable_ndt_frame_match_));
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LidarFilterConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required bool enable_ndt_map_match = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_enable_ndt_map_match(&has_bits);
          enable_ndt_map_match_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool enable_ndt_frame_match = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_enable_ndt_frame_match(&has_bits);
          enable_ndt_frame_match_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated double ndt_map_match_transfer_prob_threshold = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_ndt_map_match_transfer_prob_threshold(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<25>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_ndt_map_match_transfer_prob_threshold(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated double ndt_map_match_score_threshold = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_ndt_map_match_score_threshold(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<33>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_ndt_map_match_score_threshold(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated double ndt_map_match_nice_noise_mps = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_ndt_map_match_nice_noise_mps(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<41>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_ndt_map_match_nice_noise_mps(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated double ndt_map_match_bad_noise_mps = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_ndt_map_match_bad_noise_mps(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<49>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_ndt_map_match_bad_noise_mps(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated double ndt_frame_match_noise_mps = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_ndt_frame_match_noise_mps(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<57>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_ndt_frame_match_noise_mps(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LidarFilterConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:civ.civloc.LidarFilterConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bool enable_ndt_map_match = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_enable_ndt_map_match(), target);
  }

  // required bool enable_ndt_frame_match = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_enable_ndt_frame_match(), target);
  }

  // repeated double ndt_map_match_transfer_prob_threshold = 3;
  for (int i = 0, n = this->_internal_ndt_map_match_transfer_prob_threshold_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_ndt_map_match_transfer_prob_threshold(i), target);
  }

  // repeated double ndt_map_match_score_threshold = 4;
  for (int i = 0, n = this->_internal_ndt_map_match_score_threshold_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_ndt_map_match_score_threshold(i), target);
  }

  // repeated double ndt_map_match_nice_noise_mps = 5;
  for (int i = 0, n = this->_internal_ndt_map_match_nice_noise_mps_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_ndt_map_match_nice_noise_mps(i), target);
  }

  // repeated double ndt_map_match_bad_noise_mps = 6;
  for (int i = 0, n = this->_internal_ndt_map_match_bad_noise_mps_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_ndt_map_match_bad_noise_mps(i), target);
  }

  // repeated double ndt_frame_match_noise_mps = 7;
  for (int i = 0, n = this->_internal_ndt_frame_match_noise_mps_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_ndt_frame_match_noise_mps(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:civ.civloc.LidarFilterConfig)
  return target;
}

size_t LidarFilterConfig::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:civ.civloc.LidarFilterConfig)
  size_t total_size = 0;

  if (_internal_has_enable_ndt_map_match()) {
    // required bool enable_ndt_map_match = 1;
    total_size += 1 + 1;
  }

  if (_internal_has_enable_ndt_frame_match()) {
    // required bool enable_ndt_frame_match = 2;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t LidarFilterConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:civ.civloc.LidarFilterConfig)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required bool enable_ndt_map_match = 1;
    total_size += 1 + 1;

    // required bool enable_ndt_frame_match = 2;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double ndt_map_match_transfer_prob_threshold = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_ndt_map_match_transfer_prob_threshold_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_ndt_map_match_transfer_prob_threshold_size());
    total_size += data_size;
  }

  // repeated double ndt_map_match_score_threshold = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_ndt_map_match_score_threshold_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_ndt_map_match_score_threshold_size());
    total_size += data_size;
  }

  // repeated double ndt_map_match_nice_noise_mps = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_ndt_map_match_nice_noise_mps_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_ndt_map_match_nice_noise_mps_size());
    total_size += data_size;
  }

  // repeated double ndt_map_match_bad_noise_mps = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_ndt_map_match_bad_noise_mps_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_ndt_map_match_bad_noise_mps_size());
    total_size += data_size;
  }

  // repeated double ndt_frame_match_noise_mps = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_ndt_frame_match_noise_mps_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_ndt_frame_match_noise_mps_size());
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LidarFilterConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:civ.civloc.LidarFilterConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const LidarFilterConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LidarFilterConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:civ.civloc.LidarFilterConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:civ.civloc.LidarFilterConfig)
    MergeFrom(*source);
  }
}

void LidarFilterConfig::MergeFrom(const LidarFilterConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:civ.civloc.LidarFilterConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ndt_map_match_transfer_prob_threshold_.MergeFrom(from.ndt_map_match_transfer_prob_threshold_);
  ndt_map_match_score_threshold_.MergeFrom(from.ndt_map_match_score_threshold_);
  ndt_map_match_nice_noise_mps_.MergeFrom(from.ndt_map_match_nice_noise_mps_);
  ndt_map_match_bad_noise_mps_.MergeFrom(from.ndt_map_match_bad_noise_mps_);
  ndt_frame_match_noise_mps_.MergeFrom(from.ndt_frame_match_noise_mps_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      enable_ndt_map_match_ = from.enable_ndt_map_match_;
    }
    if (cached_has_bits & 0x00000002u) {
      enable_ndt_frame_match_ = from.enable_ndt_frame_match_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LidarFilterConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:civ.civloc.LidarFilterConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LidarFilterConfig::CopyFrom(const LidarFilterConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:civ.civloc.LidarFilterConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LidarFilterConfig::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void LidarFilterConfig::InternalSwap(LidarFilterConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ndt_map_match_transfer_prob_threshold_.InternalSwap(&other->ndt_map_match_transfer_prob_threshold_);
  ndt_map_match_score_threshold_.InternalSwap(&other->ndt_map_match_score_threshold_);
  ndt_map_match_nice_noise_mps_.InternalSwap(&other->ndt_map_match_nice_noise_mps_);
  ndt_map_match_bad_noise_mps_.InternalSwap(&other->ndt_map_match_bad_noise_mps_);
  ndt_frame_match_noise_mps_.InternalSwap(&other->ndt_frame_match_noise_mps_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LidarFilterConfig, enable_ndt_frame_match_)
      + sizeof(LidarFilterConfig::enable_ndt_frame_match_)
      - PROTOBUF_FIELD_OFFSET(LidarFilterConfig, enable_ndt_map_match_)>(
          reinterpret_cast<char*>(&enable_ndt_map_match_),
          reinterpret_cast<char*>(&other->enable_ndt_map_match_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LidarFilterConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class VisionFilterConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<VisionFilterConfig>()._has_bits_);
  static void set_has_enable_bev_line(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_enable_bev_cubic_curv(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_enable_pixel_line(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_enable_pixel_cubic_curv(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_valid_mean_match_dist_m(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_valid_match_point_dist_m(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000003f) ^ 0x0000003f) != 0;
  }
};

VisionFilterConfig::VisionFilterConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  vision_noise_mps_(arena),
  perc_range_m_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:civ.civloc.VisionFilterConfig)
}
VisionFilterConfig::VisionFilterConfig(const VisionFilterConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      vision_noise_mps_(from.vision_noise_mps_),
      perc_range_m_(from.perc_range_m_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&valid_mean_match_dist_m_, &from.valid_mean_match_dist_m_,
    static_cast<size_t>(reinterpret_cast<char*>(&enable_pixel_cubic_curv_) -
    reinterpret_cast<char*>(&valid_mean_match_dist_m_)) + sizeof(enable_pixel_cubic_curv_));
  // @@protoc_insertion_point(copy_constructor:civ.civloc.VisionFilterConfig)
}

void VisionFilterConfig::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&valid_mean_match_dist_m_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&enable_pixel_cubic_curv_) -
      reinterpret_cast<char*>(&valid_mean_match_dist_m_)) + sizeof(enable_pixel_cubic_curv_));
}

VisionFilterConfig::~VisionFilterConfig() {
  // @@protoc_insertion_point(destructor:civ.civloc.VisionFilterConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VisionFilterConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void VisionFilterConfig::ArenaDtor(void* object) {
  VisionFilterConfig* _this = reinterpret_cast< VisionFilterConfig* >(object);
  (void)_this;
}
void VisionFilterConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VisionFilterConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VisionFilterConfig& VisionFilterConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VisionFilterConfig_civloc_2fproto_2flocator_2eproto.base);
  return *internal_default_instance();
}


void VisionFilterConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:civ.civloc.VisionFilterConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vision_noise_mps_.Clear();
  perc_range_m_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&valid_mean_match_dist_m_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&enable_pixel_cubic_curv_) -
        reinterpret_cast<char*>(&valid_mean_match_dist_m_)) + sizeof(enable_pixel_cubic_curv_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VisionFilterConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required bool enable_bev_line = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_enable_bev_line(&has_bits);
          enable_bev_line_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool enable_bev_cubic_curv = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_enable_bev_cubic_curv(&has_bits);
          enable_bev_cubic_curv_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool enable_pixel_line = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_enable_pixel_line(&has_bits);
          enable_pixel_line_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool enable_pixel_cubic_curv = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_enable_pixel_cubic_curv(&has_bits);
          enable_pixel_cubic_curv_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated double vision_noise_mps = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_vision_noise_mps(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<41>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_vision_noise_mps(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated double perc_range_m = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_perc_range_m(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<49>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_perc_range_m(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required double valid_mean_match_dist_m = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          _Internal::set_has_valid_mean_match_dist_m(&has_bits);
          valid_mean_match_dist_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required double valid_match_point_dist_m = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          _Internal::set_has_valid_match_point_dist_m(&has_bits);
          valid_match_point_dist_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VisionFilterConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:civ.civloc.VisionFilterConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bool enable_bev_line = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_enable_bev_line(), target);
  }

  // required bool enable_bev_cubic_curv = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_enable_bev_cubic_curv(), target);
  }

  // required bool enable_pixel_line = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_enable_pixel_line(), target);
  }

  // required bool enable_pixel_cubic_curv = 4;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_enable_pixel_cubic_curv(), target);
  }

  // repeated double vision_noise_mps = 5;
  for (int i = 0, n = this->_internal_vision_noise_mps_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_vision_noise_mps(i), target);
  }

  // repeated double perc_range_m = 6;
  for (int i = 0, n = this->_internal_perc_range_m_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_perc_range_m(i), target);
  }

  // required double valid_mean_match_dist_m = 7;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_valid_mean_match_dist_m(), target);
  }

  // required double valid_match_point_dist_m = 8;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_valid_match_point_dist_m(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:civ.civloc.VisionFilterConfig)
  return target;
}

size_t VisionFilterConfig::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:civ.civloc.VisionFilterConfig)
  size_t total_size = 0;

  if (_internal_has_valid_mean_match_dist_m()) {
    // required double valid_mean_match_dist_m = 7;
    total_size += 1 + 8;
  }

  if (_internal_has_valid_match_point_dist_m()) {
    // required double valid_match_point_dist_m = 8;
    total_size += 1 + 8;
  }

  if (_internal_has_enable_bev_line()) {
    // required bool enable_bev_line = 1;
    total_size += 1 + 1;
  }

  if (_internal_has_enable_bev_cubic_curv()) {
    // required bool enable_bev_cubic_curv = 2;
    total_size += 1 + 1;
  }

  if (_internal_has_enable_pixel_line()) {
    // required bool enable_pixel_line = 3;
    total_size += 1 + 1;
  }

  if (_internal_has_enable_pixel_cubic_curv()) {
    // required bool enable_pixel_cubic_curv = 4;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t VisionFilterConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:civ.civloc.VisionFilterConfig)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000003f) ^ 0x0000003f) == 0) {  // All required fields are present.
    // required double valid_mean_match_dist_m = 7;
    total_size += 1 + 8;

    // required double valid_match_point_dist_m = 8;
    total_size += 1 + 8;

    // required bool enable_bev_line = 1;
    total_size += 1 + 1;

    // required bool enable_bev_cubic_curv = 2;
    total_size += 1 + 1;

    // required bool enable_pixel_line = 3;
    total_size += 1 + 1;

    // required bool enable_pixel_cubic_curv = 4;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double vision_noise_mps = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_vision_noise_mps_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_vision_noise_mps_size());
    total_size += data_size;
  }

  // repeated double perc_range_m = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_perc_range_m_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_perc_range_m_size());
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VisionFilterConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:civ.civloc.VisionFilterConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const VisionFilterConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VisionFilterConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:civ.civloc.VisionFilterConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:civ.civloc.VisionFilterConfig)
    MergeFrom(*source);
  }
}

void VisionFilterConfig::MergeFrom(const VisionFilterConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:civ.civloc.VisionFilterConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  vision_noise_mps_.MergeFrom(from.vision_noise_mps_);
  perc_range_m_.MergeFrom(from.perc_range_m_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      valid_mean_match_dist_m_ = from.valid_mean_match_dist_m_;
    }
    if (cached_has_bits & 0x00000002u) {
      valid_match_point_dist_m_ = from.valid_match_point_dist_m_;
    }
    if (cached_has_bits & 0x00000004u) {
      enable_bev_line_ = from.enable_bev_line_;
    }
    if (cached_has_bits & 0x00000008u) {
      enable_bev_cubic_curv_ = from.enable_bev_cubic_curv_;
    }
    if (cached_has_bits & 0x00000010u) {
      enable_pixel_line_ = from.enable_pixel_line_;
    }
    if (cached_has_bits & 0x00000020u) {
      enable_pixel_cubic_curv_ = from.enable_pixel_cubic_curv_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void VisionFilterConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:civ.civloc.VisionFilterConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VisionFilterConfig::CopyFrom(const VisionFilterConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:civ.civloc.VisionFilterConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VisionFilterConfig::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void VisionFilterConfig::InternalSwap(VisionFilterConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  vision_noise_mps_.InternalSwap(&other->vision_noise_mps_);
  perc_range_m_.InternalSwap(&other->perc_range_m_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VisionFilterConfig, enable_pixel_cubic_curv_)
      + sizeof(VisionFilterConfig::enable_pixel_cubic_curv_)
      - PROTOBUF_FIELD_OFFSET(VisionFilterConfig, valid_mean_match_dist_m_)>(
          reinterpret_cast<char*>(&valid_mean_match_dist_m_),
          reinterpret_cast<char*>(&other->valid_mean_match_dist_m_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VisionFilterConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class FuseConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<FuseConfig>()._has_bits_);
  static void set_has_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::civ::civloc::FilterPara& filter_para(const FuseConfig* msg);
  static void set_has_filter_para(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::civ::civloc::GnssFilterConfig& gnss_filter(const FuseConfig* msg);
  static void set_has_gnss_filter(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::civ::civloc::VehicleModelFilterConfig& vm_filter(const FuseConfig* msg);
  static void set_has_vm_filter(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::civ::civloc::WheelOdoFilterConfig& wheel_filter(const FuseConfig* msg);
  static void set_has_wheel_filter(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::civ::civloc::LidarFilterConfig& lidar_filter(const FuseConfig* msg);
  static void set_has_lidar_filter(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::civ::civloc::VisionFilterConfig& vision_filter(const FuseConfig* msg);
  static void set_has_vision_filter(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_online_estimation_qvv1(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_online_estimation_ko(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x000001ef) ^ 0x000001ef) != 0;
  }
};

const ::civ::civloc::FilterPara&
FuseConfig::_Internal::filter_para(const FuseConfig* msg) {
  return *msg->filter_para_;
}
const ::civ::civloc::GnssFilterConfig&
FuseConfig::_Internal::gnss_filter(const FuseConfig* msg) {
  return *msg->gnss_filter_;
}
const ::civ::civloc::VehicleModelFilterConfig&
FuseConfig::_Internal::vm_filter(const FuseConfig* msg) {
  return *msg->vm_filter_;
}
const ::civ::civloc::WheelOdoFilterConfig&
FuseConfig::_Internal::wheel_filter(const FuseConfig* msg) {
  return *msg->wheel_filter_;
}
const ::civ::civloc::LidarFilterConfig&
FuseConfig::_Internal::lidar_filter(const FuseConfig* msg) {
  return *msg->lidar_filter_;
}
const ::civ::civloc::VisionFilterConfig&
FuseConfig::_Internal::vision_filter(const FuseConfig* msg) {
  return *msg->vision_filter_;
}
FuseConfig::FuseConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:civ.civloc.FuseConfig)
}
FuseConfig::FuseConfig(const FuseConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_filter_para()) {
    filter_para_ = new ::civ::civloc::FilterPara(*from.filter_para_);
  } else {
    filter_para_ = nullptr;
  }
  if (from._internal_has_gnss_filter()) {
    gnss_filter_ = new ::civ::civloc::GnssFilterConfig(*from.gnss_filter_);
  } else {
    gnss_filter_ = nullptr;
  }
  if (from._internal_has_vm_filter()) {
    vm_filter_ = new ::civ::civloc::VehicleModelFilterConfig(*from.vm_filter_);
  } else {
    vm_filter_ = nullptr;
  }
  if (from._internal_has_wheel_filter()) {
    wheel_filter_ = new ::civ::civloc::WheelOdoFilterConfig(*from.wheel_filter_);
  } else {
    wheel_filter_ = nullptr;
  }
  if (from._internal_has_lidar_filter()) {
    lidar_filter_ = new ::civ::civloc::LidarFilterConfig(*from.lidar_filter_);
  } else {
    lidar_filter_ = nullptr;
  }
  if (from._internal_has_vision_filter()) {
    vision_filter_ = new ::civ::civloc::VisionFilterConfig(*from.vision_filter_);
  } else {
    vision_filter_ = nullptr;
  }
  ::memcpy(&mode_, &from.mode_,
    static_cast<size_t>(reinterpret_cast<char*>(&online_estimation_ko_) -
    reinterpret_cast<char*>(&mode_)) + sizeof(online_estimation_ko_));
  // @@protoc_insertion_point(copy_constructor:civ.civloc.FuseConfig)
}

void FuseConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FuseConfig_civloc_2fproto_2flocator_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&filter_para_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&online_estimation_ko_) -
      reinterpret_cast<char*>(&filter_para_)) + sizeof(online_estimation_ko_));
}

FuseConfig::~FuseConfig() {
  // @@protoc_insertion_point(destructor:civ.civloc.FuseConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FuseConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete filter_para_;
  if (this != internal_default_instance()) delete gnss_filter_;
  if (this != internal_default_instance()) delete vm_filter_;
  if (this != internal_default_instance()) delete wheel_filter_;
  if (this != internal_default_instance()) delete lidar_filter_;
  if (this != internal_default_instance()) delete vision_filter_;
}

void FuseConfig::ArenaDtor(void* object) {
  FuseConfig* _this = reinterpret_cast< FuseConfig* >(object);
  (void)_this;
}
void FuseConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FuseConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FuseConfig& FuseConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FuseConfig_civloc_2fproto_2flocator_2eproto.base);
  return *internal_default_instance();
}


void FuseConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:civ.civloc.FuseConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(filter_para_ != nullptr);
      filter_para_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(gnss_filter_ != nullptr);
      gnss_filter_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(vm_filter_ != nullptr);
      vm_filter_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(wheel_filter_ != nullptr);
      wheel_filter_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(lidar_filter_ != nullptr);
      lidar_filter_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(vision_filter_ != nullptr);
      vision_filter_->Clear();
    }
  }
  if (cached_has_bits & 0x000000c0u) {
    ::memset(&mode_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&online_estimation_qvv1_) -
        reinterpret_cast<char*>(&mode_)) + sizeof(online_estimation_qvv1_));
  }
  online_estimation_ko_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FuseConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .civ.civloc.FuseConfig.FuseMode mode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::civ::civloc::FuseConfig_FuseMode_IsValid(val))) {
            _internal_set_mode(static_cast<::civ::civloc::FuseConfig_FuseMode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // required .civ.civloc.FilterPara filter_para = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_filter_para(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .civ.civloc.GnssFilterConfig gnss_filter = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_gnss_filter(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .civ.civloc.VehicleModelFilterConfig vm_filter = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_vm_filter(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .civ.civloc.WheelOdoFilterConfig wheel_filter = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_wheel_filter(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .civ.civloc.LidarFilterConfig lidar_filter = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_lidar_filter(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .civ.civloc.VisionFilterConfig vision_filter = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_vision_filter(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool online_estimation_qvv1 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_online_estimation_qvv1(&has_bits);
          online_estimation_qvv1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool online_estimation_ko = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_online_estimation_ko(&has_bits);
          online_estimation_ko_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FuseConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:civ.civloc.FuseConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .civ.civloc.FuseConfig.FuseMode mode = 1;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_mode(), target);
  }

  // required .civ.civloc.FilterPara filter_para = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::filter_para(this), target, stream);
  }

  // required .civ.civloc.GnssFilterConfig gnss_filter = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::gnss_filter(this), target, stream);
  }

  // required .civ.civloc.VehicleModelFilterConfig vm_filter = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::vm_filter(this), target, stream);
  }

  // required .civ.civloc.WheelOdoFilterConfig wheel_filter = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::wheel_filter(this), target, stream);
  }

  // optional .civ.civloc.LidarFilterConfig lidar_filter = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::lidar_filter(this), target, stream);
  }

  // required .civ.civloc.VisionFilterConfig vision_filter = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::vision_filter(this), target, stream);
  }

  // required bool online_estimation_qvv1 = 10;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_online_estimation_qvv1(), target);
  }

  // required bool online_estimation_ko = 20;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(20, this->_internal_online_estimation_ko(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:civ.civloc.FuseConfig)
  return target;
}

size_t FuseConfig::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:civ.civloc.FuseConfig)
  size_t total_size = 0;

  if (_internal_has_filter_para()) {
    // required .civ.civloc.FilterPara filter_para = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *filter_para_);
  }

  if (_internal_has_gnss_filter()) {
    // required .civ.civloc.GnssFilterConfig gnss_filter = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *gnss_filter_);
  }

  if (_internal_has_vm_filter()) {
    // required .civ.civloc.VehicleModelFilterConfig vm_filter = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *vm_filter_);
  }

  if (_internal_has_wheel_filter()) {
    // required .civ.civloc.WheelOdoFilterConfig wheel_filter = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *wheel_filter_);
  }

  if (_internal_has_vision_filter()) {
    // required .civ.civloc.VisionFilterConfig vision_filter = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *vision_filter_);
  }

  if (_internal_has_mode()) {
    // required .civ.civloc.FuseConfig.FuseMode mode = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_mode());
  }

  if (_internal_has_online_estimation_qvv1()) {
    // required bool online_estimation_qvv1 = 10;
    total_size += 1 + 1;
  }

  if (_internal_has_online_estimation_ko()) {
    // required bool online_estimation_ko = 20;
    total_size += 2 + 1;
  }

  return total_size;
}
size_t FuseConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:civ.civloc.FuseConfig)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x000001ef) ^ 0x000001ef) == 0) {  // All required fields are present.
    // required .civ.civloc.FilterPara filter_para = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *filter_para_);

    // required .civ.civloc.GnssFilterConfig gnss_filter = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *gnss_filter_);

    // required .civ.civloc.VehicleModelFilterConfig vm_filter = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *vm_filter_);

    // required .civ.civloc.WheelOdoFilterConfig wheel_filter = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *wheel_filter_);

    // required .civ.civloc.VisionFilterConfig vision_filter = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *vision_filter_);

    // required .civ.civloc.FuseConfig.FuseMode mode = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_mode());

    // required bool online_estimation_qvv1 = 10;
    total_size += 1 + 1;

    // required bool online_estimation_ko = 20;
    total_size += 2 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .civ.civloc.LidarFilterConfig lidar_filter = 6;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000010u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *lidar_filter_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FuseConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:civ.civloc.FuseConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const FuseConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FuseConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:civ.civloc.FuseConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:civ.civloc.FuseConfig)
    MergeFrom(*source);
  }
}

void FuseConfig::MergeFrom(const FuseConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:civ.civloc.FuseConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_filter_para()->::civ::civloc::FilterPara::MergeFrom(from._internal_filter_para());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_gnss_filter()->::civ::civloc::GnssFilterConfig::MergeFrom(from._internal_gnss_filter());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_vm_filter()->::civ::civloc::VehicleModelFilterConfig::MergeFrom(from._internal_vm_filter());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_wheel_filter()->::civ::civloc::WheelOdoFilterConfig::MergeFrom(from._internal_wheel_filter());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_lidar_filter()->::civ::civloc::LidarFilterConfig::MergeFrom(from._internal_lidar_filter());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_vision_filter()->::civ::civloc::VisionFilterConfig::MergeFrom(from._internal_vision_filter());
    }
    if (cached_has_bits & 0x00000040u) {
      mode_ = from.mode_;
    }
    if (cached_has_bits & 0x00000080u) {
      online_estimation_qvv1_ = from.online_estimation_qvv1_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_online_estimation_ko(from._internal_online_estimation_ko());
  }
}

void FuseConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:civ.civloc.FuseConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FuseConfig::CopyFrom(const FuseConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:civ.civloc.FuseConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FuseConfig::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_gnss_filter()) {
    if (!gnss_filter_->IsInitialized()) return false;
  }
  if (_internal_has_vm_filter()) {
    if (!vm_filter_->IsInitialized()) return false;
  }
  if (_internal_has_wheel_filter()) {
    if (!wheel_filter_->IsInitialized()) return false;
  }
  if (_internal_has_lidar_filter()) {
    if (!lidar_filter_->IsInitialized()) return false;
  }
  if (_internal_has_vision_filter()) {
    if (!vision_filter_->IsInitialized()) return false;
  }
  return true;
}

void FuseConfig::InternalSwap(FuseConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FuseConfig, online_estimation_ko_)
      + sizeof(FuseConfig::online_estimation_ko_)
      - PROTOBUF_FIELD_OFFSET(FuseConfig, filter_para_)>(
          reinterpret_cast<char*>(&filter_para_),
          reinterpret_cast<char*>(&other->filter_para_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FuseConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class VisionMapConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<VisionMapConfig>()._has_bits_);
  static void set_has_channel_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_max_leaf_dimension(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_max_leaf_size(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_box_half_width_m(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_search_distance_m(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_sample_interval_m(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000003f) ^ 0x0000003f) != 0;
  }
};

VisionMapConfig::VisionMapConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:civ.civloc.VisionMapConfig)
}
VisionMapConfig::VisionMapConfig(const VisionMapConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  channel_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_channel_name()) {
    channel_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_channel_name(), 
      GetArena());
  }
  ::memcpy(&max_leaf_dimension_, &from.max_leaf_dimension_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_leaf_size_) -
    reinterpret_cast<char*>(&max_leaf_dimension_)) + sizeof(max_leaf_size_));
  // @@protoc_insertion_point(copy_constructor:civ.civloc.VisionMapConfig)
}

void VisionMapConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_VisionMapConfig_civloc_2fproto_2flocator_2eproto.base);
  channel_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&max_leaf_dimension_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&max_leaf_size_) -
      reinterpret_cast<char*>(&max_leaf_dimension_)) + sizeof(max_leaf_size_));
}

VisionMapConfig::~VisionMapConfig() {
  // @@protoc_insertion_point(destructor:civ.civloc.VisionMapConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VisionMapConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  channel_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void VisionMapConfig::ArenaDtor(void* object) {
  VisionMapConfig* _this = reinterpret_cast< VisionMapConfig* >(object);
  (void)_this;
}
void VisionMapConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VisionMapConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VisionMapConfig& VisionMapConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VisionMapConfig_civloc_2fproto_2flocator_2eproto.base);
  return *internal_default_instance();
}


void VisionMapConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:civ.civloc.VisionMapConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    channel_name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000003eu) {
    ::memset(&max_leaf_dimension_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&max_leaf_size_) -
        reinterpret_cast<char*>(&max_leaf_dimension_)) + sizeof(max_leaf_size_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VisionMapConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string channel_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_channel_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "civ.civloc.VisionMapConfig.channel_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required double max_leaf_dimension = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_max_leaf_dimension(&has_bits);
          max_leaf_dimension_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required int32 max_leaf_size = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_max_leaf_size(&has_bits);
          max_leaf_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required double box_half_width_m = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_box_half_width_m(&has_bits);
          box_half_width_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required double search_distance_m = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_search_distance_m(&has_bits);
          search_distance_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required double sample_interval_m = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _Internal::set_has_sample_interval_m(&has_bits);
          sample_interval_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VisionMapConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:civ.civloc.VisionMapConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string channel_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_channel_name().data(), static_cast<int>(this->_internal_channel_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "civ.civloc.VisionMapConfig.channel_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_channel_name(), target);
  }

  // required double max_leaf_dimension = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_max_leaf_dimension(), target);
  }

  // required int32 max_leaf_size = 3;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_max_leaf_size(), target);
  }

  // required double box_half_width_m = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_box_half_width_m(), target);
  }

  // required double search_distance_m = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_search_distance_m(), target);
  }

  // required double sample_interval_m = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_sample_interval_m(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:civ.civloc.VisionMapConfig)
  return target;
}

size_t VisionMapConfig::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:civ.civloc.VisionMapConfig)
  size_t total_size = 0;

  if (_internal_has_channel_name()) {
    // required string channel_name = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_channel_name());
  }

  if (_internal_has_max_leaf_dimension()) {
    // required double max_leaf_dimension = 2;
    total_size += 1 + 8;
  }

  if (_internal_has_box_half_width_m()) {
    // required double box_half_width_m = 4;
    total_size += 1 + 8;
  }

  if (_internal_has_search_distance_m()) {
    // required double search_distance_m = 5;
    total_size += 1 + 8;
  }

  if (_internal_has_sample_interval_m()) {
    // required double sample_interval_m = 6;
    total_size += 1 + 8;
  }

  if (_internal_has_max_leaf_size()) {
    // required int32 max_leaf_size = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_max_leaf_size());
  }

  return total_size;
}
size_t VisionMapConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:civ.civloc.VisionMapConfig)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000003f) ^ 0x0000003f) == 0) {  // All required fields are present.
    // required string channel_name = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_channel_name());

    // required double max_leaf_dimension = 2;
    total_size += 1 + 8;

    // required double box_half_width_m = 4;
    total_size += 1 + 8;

    // required double search_distance_m = 5;
    total_size += 1 + 8;

    // required double sample_interval_m = 6;
    total_size += 1 + 8;

    // required int32 max_leaf_size = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_max_leaf_size());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VisionMapConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:civ.civloc.VisionMapConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const VisionMapConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VisionMapConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:civ.civloc.VisionMapConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:civ.civloc.VisionMapConfig)
    MergeFrom(*source);
  }
}

void VisionMapConfig::MergeFrom(const VisionMapConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:civ.civloc.VisionMapConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_channel_name(from._internal_channel_name());
    }
    if (cached_has_bits & 0x00000002u) {
      max_leaf_dimension_ = from.max_leaf_dimension_;
    }
    if (cached_has_bits & 0x00000004u) {
      box_half_width_m_ = from.box_half_width_m_;
    }
    if (cached_has_bits & 0x00000008u) {
      search_distance_m_ = from.search_distance_m_;
    }
    if (cached_has_bits & 0x00000010u) {
      sample_interval_m_ = from.sample_interval_m_;
    }
    if (cached_has_bits & 0x00000020u) {
      max_leaf_size_ = from.max_leaf_size_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void VisionMapConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:civ.civloc.VisionMapConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VisionMapConfig::CopyFrom(const VisionMapConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:civ.civloc.VisionMapConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VisionMapConfig::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void VisionMapConfig::InternalSwap(VisionMapConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  channel_name_.Swap(&other->channel_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VisionMapConfig, max_leaf_size_)
      + sizeof(VisionMapConfig::max_leaf_size_)
      - PROTOBUF_FIELD_OFFSET(VisionMapConfig, max_leaf_dimension_)>(
          reinterpret_cast<char*>(&max_leaf_dimension_),
          reinterpret_cast<char*>(&other->max_leaf_dimension_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VisionMapConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PointCloudMapConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<PointCloudMapConfig>()._has_bits_);
  static void set_has_map_path(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_search_radius_m(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_map_cfg_file(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

PointCloudMapConfig::PointCloudMapConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:civ.civloc.PointCloudMapConfig)
}
PointCloudMapConfig::PointCloudMapConfig(const PointCloudMapConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  map_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_map_path()) {
    map_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_map_path(), 
      GetArena());
  }
  map_cfg_file_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_map_cfg_file()) {
    map_cfg_file_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_map_cfg_file(), 
      GetArena());
  }
  search_radius_m_ = from.search_radius_m_;
  // @@protoc_insertion_point(copy_constructor:civ.civloc.PointCloudMapConfig)
}

void PointCloudMapConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PointCloudMapConfig_civloc_2fproto_2flocator_2eproto.base);
  map_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  map_cfg_file_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  search_radius_m_ = 300;
}

PointCloudMapConfig::~PointCloudMapConfig() {
  // @@protoc_insertion_point(destructor:civ.civloc.PointCloudMapConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PointCloudMapConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  map_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  map_cfg_file_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PointCloudMapConfig::ArenaDtor(void* object) {
  PointCloudMapConfig* _this = reinterpret_cast< PointCloudMapConfig* >(object);
  (void)_this;
}
void PointCloudMapConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PointCloudMapConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PointCloudMapConfig& PointCloudMapConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PointCloudMapConfig_civloc_2fproto_2flocator_2eproto.base);
  return *internal_default_instance();
}


void PointCloudMapConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:civ.civloc.PointCloudMapConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      map_path_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      map_cfg_file_.ClearNonDefaultToEmpty();
    }
    search_radius_m_ = 300;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PointCloudMapConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string map_path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_map_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "civ.civloc.PointCloudMapConfig.map_path");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float search_radius_m = 2 [default = 300];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_search_radius_m(&has_bits);
          search_radius_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required string map_cfg_file = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_map_cfg_file();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "civ.civloc.PointCloudMapConfig.map_cfg_file");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PointCloudMapConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:civ.civloc.PointCloudMapConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string map_path = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_map_path().data(), static_cast<int>(this->_internal_map_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "civ.civloc.PointCloudMapConfig.map_path");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_map_path(), target);
  }

  // optional float search_radius_m = 2 [default = 300];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_search_radius_m(), target);
  }

  // required string map_cfg_file = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_map_cfg_file().data(), static_cast<int>(this->_internal_map_cfg_file().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "civ.civloc.PointCloudMapConfig.map_cfg_file");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_map_cfg_file(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:civ.civloc.PointCloudMapConfig)
  return target;
}

size_t PointCloudMapConfig::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:civ.civloc.PointCloudMapConfig)
  size_t total_size = 0;

  if (_internal_has_map_path()) {
    // required string map_path = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_map_path());
  }

  if (_internal_has_map_cfg_file()) {
    // required string map_cfg_file = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_map_cfg_file());
  }

  return total_size;
}
size_t PointCloudMapConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:civ.civloc.PointCloudMapConfig)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string map_path = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_map_path());

    // required string map_cfg_file = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_map_cfg_file());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional float search_radius_m = 2 [default = 300];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000004u) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PointCloudMapConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:civ.civloc.PointCloudMapConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const PointCloudMapConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PointCloudMapConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:civ.civloc.PointCloudMapConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:civ.civloc.PointCloudMapConfig)
    MergeFrom(*source);
  }
}

void PointCloudMapConfig::MergeFrom(const PointCloudMapConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:civ.civloc.PointCloudMapConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_map_path(from._internal_map_path());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_map_cfg_file(from._internal_map_cfg_file());
    }
    if (cached_has_bits & 0x00000004u) {
      search_radius_m_ = from.search_radius_m_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PointCloudMapConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:civ.civloc.PointCloudMapConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PointCloudMapConfig::CopyFrom(const PointCloudMapConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:civ.civloc.PointCloudMapConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PointCloudMapConfig::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void PointCloudMapConfig::InternalSwap(PointCloudMapConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  map_path_.Swap(&other->map_path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  map_cfg_file_.Swap(&other->map_cfg_file_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(search_radius_m_, other->search_radius_m_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PointCloudMapConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class IOConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<IOConfig>()._has_bits_);
  static void set_has_data_dir(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

IOConfig::IOConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:civ.civloc.IOConfig)
}
IOConfig::IOConfig(const IOConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  data_dir_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_data_dir()) {
    data_dir_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_data_dir(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:civ.civloc.IOConfig)
}

void IOConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_IOConfig_civloc_2fproto_2flocator_2eproto.base);
  data_dir_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

IOConfig::~IOConfig() {
  // @@protoc_insertion_point(destructor:civ.civloc.IOConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void IOConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  data_dir_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void IOConfig::ArenaDtor(void* object) {
  IOConfig* _this = reinterpret_cast< IOConfig* >(object);
  (void)_this;
}
void IOConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IOConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IOConfig& IOConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IOConfig_civloc_2fproto_2flocator_2eproto.base);
  return *internal_default_instance();
}


void IOConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:civ.civloc.IOConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    data_dir_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IOConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string data_dir = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_data_dir();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "civ.civloc.IOConfig.data_dir");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IOConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:civ.civloc.IOConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string data_dir = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_data_dir().data(), static_cast<int>(this->_internal_data_dir().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "civ.civloc.IOConfig.data_dir");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_data_dir(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:civ.civloc.IOConfig)
  return target;
}

size_t IOConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:civ.civloc.IOConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string data_dir = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_data_dir());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IOConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:civ.civloc.IOConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const IOConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IOConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:civ.civloc.IOConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:civ.civloc.IOConfig)
    MergeFrom(*source);
  }
}

void IOConfig::MergeFrom(const IOConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:civ.civloc.IOConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_data_dir()) {
    _internal_set_data_dir(from._internal_data_dir());
  }
}

void IOConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:civ.civloc.IOConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IOConfig::CopyFrom(const IOConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:civ.civloc.IOConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IOConfig::IsInitialized() const {
  return true;
}

void IOConfig::InternalSwap(IOConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  data_dir_.Swap(&other->data_dir_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata IOConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class DetectConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<DetectConfig>()._has_bits_);
  static void set_has_sample_range_time(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_static_continuous_number(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

DetectConfig::DetectConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  zero_velocity_detector_threshold_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:civ.civloc.DetectConfig)
}
DetectConfig::DetectConfig(const DetectConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      zero_velocity_detector_threshold_(from.zero_velocity_detector_threshold_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&sample_range_time_, &from.sample_range_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&static_continuous_number_) -
    reinterpret_cast<char*>(&sample_range_time_)) + sizeof(static_continuous_number_));
  // @@protoc_insertion_point(copy_constructor:civ.civloc.DetectConfig)
}

void DetectConfig::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&sample_range_time_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&static_continuous_number_) -
      reinterpret_cast<char*>(&sample_range_time_)) + sizeof(static_continuous_number_));
}

DetectConfig::~DetectConfig() {
  // @@protoc_insertion_point(destructor:civ.civloc.DetectConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DetectConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DetectConfig::ArenaDtor(void* object) {
  DetectConfig* _this = reinterpret_cast< DetectConfig* >(object);
  (void)_this;
}
void DetectConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DetectConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DetectConfig& DetectConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DetectConfig_civloc_2fproto_2flocator_2eproto.base);
  return *internal_default_instance();
}


void DetectConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:civ.civloc.DetectConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  zero_velocity_detector_threshold_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&sample_range_time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&static_continuous_number_) -
        reinterpret_cast<char*>(&sample_range_time_)) + sizeof(static_continuous_number_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DetectConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required double sample_range_time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_sample_range_time(&has_bits);
          sample_range_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required int32 static_continuous_number = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_static_continuous_number(&has_bits);
          static_continuous_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated double zero_velocity_detector_threshold = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_zero_velocity_detector_threshold(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<25>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_zero_velocity_detector_threshold(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DetectConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:civ.civloc.DetectConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required double sample_range_time = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_sample_range_time(), target);
  }

  // required int32 static_continuous_number = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_static_continuous_number(), target);
  }

  // repeated double zero_velocity_detector_threshold = 3;
  for (int i = 0, n = this->_internal_zero_velocity_detector_threshold_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_zero_velocity_detector_threshold(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:civ.civloc.DetectConfig)
  return target;
}

size_t DetectConfig::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:civ.civloc.DetectConfig)
  size_t total_size = 0;

  if (_internal_has_sample_range_time()) {
    // required double sample_range_time = 1;
    total_size += 1 + 8;
  }

  if (_internal_has_static_continuous_number()) {
    // required int32 static_continuous_number = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_static_continuous_number());
  }

  return total_size;
}
size_t DetectConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:civ.civloc.DetectConfig)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required double sample_range_time = 1;
    total_size += 1 + 8;

    // required int32 static_continuous_number = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_static_continuous_number());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double zero_velocity_detector_threshold = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_zero_velocity_detector_threshold_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_zero_velocity_detector_threshold_size());
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DetectConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:civ.civloc.DetectConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const DetectConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DetectConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:civ.civloc.DetectConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:civ.civloc.DetectConfig)
    MergeFrom(*source);
  }
}

void DetectConfig::MergeFrom(const DetectConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:civ.civloc.DetectConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  zero_velocity_detector_threshold_.MergeFrom(from.zero_velocity_detector_threshold_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      sample_range_time_ = from.sample_range_time_;
    }
    if (cached_has_bits & 0x00000002u) {
      static_continuous_number_ = from.static_continuous_number_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DetectConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:civ.civloc.DetectConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DetectConfig::CopyFrom(const DetectConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:civ.civloc.DetectConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DetectConfig::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void DetectConfig::InternalSwap(DetectConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  zero_velocity_detector_threshold_.InternalSwap(&other->zero_velocity_detector_threshold_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DetectConfig, static_continuous_number_)
      + sizeof(DetectConfig::static_continuous_number_)
      - PROTOBUF_FIELD_OFFSET(DetectConfig, sample_range_time_)>(
          reinterpret_cast<char*>(&sample_range_time_),
          reinterpret_cast<char*>(&other->sample_range_time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DetectConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class LidarMatchConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<LidarMatchConfig>()._has_bits_);
  static void set_has_enable_lidar(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::civ::civloc::NDTConfig& ndt_config(const LidarMatchConfig* msg);
  static void set_has_ndt_config(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

const ::civ::civloc::NDTConfig&
LidarMatchConfig::_Internal::ndt_config(const LidarMatchConfig* msg) {
  return *msg->ndt_config_;
}
LidarMatchConfig::LidarMatchConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  online_scan_range_m_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:civ.civloc.LidarMatchConfig)
}
LidarMatchConfig::LidarMatchConfig(const LidarMatchConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      online_scan_range_m_(from.online_scan_range_m_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_ndt_config()) {
    ndt_config_ = new ::civ::civloc::NDTConfig(*from.ndt_config_);
  } else {
    ndt_config_ = nullptr;
  }
  enable_lidar_ = from.enable_lidar_;
  // @@protoc_insertion_point(copy_constructor:civ.civloc.LidarMatchConfig)
}

void LidarMatchConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LidarMatchConfig_civloc_2fproto_2flocator_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&ndt_config_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&enable_lidar_) -
      reinterpret_cast<char*>(&ndt_config_)) + sizeof(enable_lidar_));
}

LidarMatchConfig::~LidarMatchConfig() {
  // @@protoc_insertion_point(destructor:civ.civloc.LidarMatchConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LidarMatchConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete ndt_config_;
}

void LidarMatchConfig::ArenaDtor(void* object) {
  LidarMatchConfig* _this = reinterpret_cast< LidarMatchConfig* >(object);
  (void)_this;
}
void LidarMatchConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LidarMatchConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LidarMatchConfig& LidarMatchConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LidarMatchConfig_civloc_2fproto_2flocator_2eproto.base);
  return *internal_default_instance();
}


void LidarMatchConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:civ.civloc.LidarMatchConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  online_scan_range_m_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(ndt_config_ != nullptr);
    ndt_config_->Clear();
  }
  enable_lidar_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LidarMatchConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required bool enable_lidar = 1 [default = false];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_enable_lidar(&has_bits);
          enable_lidar_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated double online_scan_range_m = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_online_scan_range_m(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<17>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_online_scan_range_m(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .civ.civloc.NDTConfig ndt_config = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_ndt_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LidarMatchConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:civ.civloc.LidarMatchConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bool enable_lidar = 1 [default = false];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_enable_lidar(), target);
  }

  // repeated double online_scan_range_m = 2;
  for (int i = 0, n = this->_internal_online_scan_range_m_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_online_scan_range_m(i), target);
  }

  // optional .civ.civloc.NDTConfig ndt_config = 20;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        20, _Internal::ndt_config(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:civ.civloc.LidarMatchConfig)
  return target;
}

size_t LidarMatchConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:civ.civloc.LidarMatchConfig)
  size_t total_size = 0;

  // required bool enable_lidar = 1 [default = false];
  if (_internal_has_enable_lidar()) {
    total_size += 1 + 1;
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double online_scan_range_m = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_online_scan_range_m_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_online_scan_range_m_size());
    total_size += data_size;
  }

  // optional .civ.civloc.NDTConfig ndt_config = 20;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ndt_config_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LidarMatchConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:civ.civloc.LidarMatchConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const LidarMatchConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LidarMatchConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:civ.civloc.LidarMatchConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:civ.civloc.LidarMatchConfig)
    MergeFrom(*source);
  }
}

void LidarMatchConfig::MergeFrom(const LidarMatchConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:civ.civloc.LidarMatchConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  online_scan_range_m_.MergeFrom(from.online_scan_range_m_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_ndt_config()->::civ::civloc::NDTConfig::MergeFrom(from._internal_ndt_config());
    }
    if (cached_has_bits & 0x00000002u) {
      enable_lidar_ = from.enable_lidar_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LidarMatchConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:civ.civloc.LidarMatchConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LidarMatchConfig::CopyFrom(const LidarMatchConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:civ.civloc.LidarMatchConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LidarMatchConfig::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_ndt_config()) {
    if (!ndt_config_->IsInitialized()) return false;
  }
  return true;
}

void LidarMatchConfig::InternalSwap(LidarMatchConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  online_scan_range_m_.InternalSwap(&other->online_scan_range_m_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LidarMatchConfig, enable_lidar_)
      + sizeof(LidarMatchConfig::enable_lidar_)
      - PROTOBUF_FIELD_OFFSET(LidarMatchConfig, ndt_config_)>(
          reinterpret_cast<char*>(&ndt_config_),
          reinterpret_cast<char*>(&other->ndt_config_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LidarMatchConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class VisionMatchConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<VisionMatchConfig>()._has_bits_);
  static void set_has_enable_vision(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_match_threshold_m(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

VisionMatchConfig::VisionMatchConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:civ.civloc.VisionMatchConfig)
}
VisionMatchConfig::VisionMatchConfig(const VisionMatchConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&match_threshold_m_, &from.match_threshold_m_,
    static_cast<size_t>(reinterpret_cast<char*>(&enable_vision_) -
    reinterpret_cast<char*>(&match_threshold_m_)) + sizeof(enable_vision_));
  // @@protoc_insertion_point(copy_constructor:civ.civloc.VisionMatchConfig)
}

void VisionMatchConfig::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&match_threshold_m_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&enable_vision_) -
      reinterpret_cast<char*>(&match_threshold_m_)) + sizeof(enable_vision_));
}

VisionMatchConfig::~VisionMatchConfig() {
  // @@protoc_insertion_point(destructor:civ.civloc.VisionMatchConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VisionMatchConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void VisionMatchConfig::ArenaDtor(void* object) {
  VisionMatchConfig* _this = reinterpret_cast< VisionMatchConfig* >(object);
  (void)_this;
}
void VisionMatchConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VisionMatchConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VisionMatchConfig& VisionMatchConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VisionMatchConfig_civloc_2fproto_2flocator_2eproto.base);
  return *internal_default_instance();
}


void VisionMatchConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:civ.civloc.VisionMatchConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&match_threshold_m_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&enable_vision_) -
        reinterpret_cast<char*>(&match_threshold_m_)) + sizeof(enable_vision_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VisionMatchConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required bool enable_vision = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_enable_vision(&has_bits);
          enable_vision_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required double match_threshold_m = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_match_threshold_m(&has_bits);
          match_threshold_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VisionMatchConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:civ.civloc.VisionMatchConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bool enable_vision = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_enable_vision(), target);
  }

  // required double match_threshold_m = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_match_threshold_m(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:civ.civloc.VisionMatchConfig)
  return target;
}

size_t VisionMatchConfig::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:civ.civloc.VisionMatchConfig)
  size_t total_size = 0;

  if (_internal_has_match_threshold_m()) {
    // required double match_threshold_m = 2;
    total_size += 1 + 8;
  }

  if (_internal_has_enable_vision()) {
    // required bool enable_vision = 1;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t VisionMatchConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:civ.civloc.VisionMatchConfig)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required double match_threshold_m = 2;
    total_size += 1 + 8;

    // required bool enable_vision = 1;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VisionMatchConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:civ.civloc.VisionMatchConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const VisionMatchConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VisionMatchConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:civ.civloc.VisionMatchConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:civ.civloc.VisionMatchConfig)
    MergeFrom(*source);
  }
}

void VisionMatchConfig::MergeFrom(const VisionMatchConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:civ.civloc.VisionMatchConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      match_threshold_m_ = from.match_threshold_m_;
    }
    if (cached_has_bits & 0x00000002u) {
      enable_vision_ = from.enable_vision_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void VisionMatchConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:civ.civloc.VisionMatchConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VisionMatchConfig::CopyFrom(const VisionMatchConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:civ.civloc.VisionMatchConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VisionMatchConfig::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void VisionMatchConfig::InternalSwap(VisionMatchConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VisionMatchConfig, enable_vision_)
      + sizeof(VisionMatchConfig::enable_vision_)
      - PROTOBUF_FIELD_OFFSET(VisionMatchConfig, match_threshold_m_)>(
          reinterpret_cast<char*>(&match_threshold_m_),
          reinterpret_cast<char*>(&other->match_threshold_m_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VisionMatchConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class LocatorConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<LocatorConfig>()._has_bits_);
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::civ::civloc::CacherConfig& cacher_cfg(const LocatorConfig* msg);
  static void set_has_cacher_cfg(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::civ::civloc::VisionMapConfig& visionmap_cfg(const LocatorConfig* msg);
  static void set_has_visionmap_cfg(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::civ::civloc::IOConfig& io_cfg(const LocatorConfig* msg);
  static void set_has_io_cfg(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::civ::civloc::PointCloudMapConfig& pointcloud_map_cfg(const LocatorConfig* msg);
  static void set_has_pointcloud_map_cfg(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::civ::civloc::FuseConfig& fuse_cfg(const LocatorConfig* msg);
  static void set_has_fuse_cfg(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::civ::civloc::DetectConfig& detect_cfg(const LocatorConfig* msg);
  static void set_has_detect_cfg(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::civ::civloc::LidarMatchConfig& lidar_match_cfg(const LocatorConfig* msg);
  static void set_has_lidar_match_cfg(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::civ::civloc::VisionMatchConfig& vision_match_cfg(const LocatorConfig* msg);
  static void set_has_vision_match_cfg(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

const ::civ::civloc::CacherConfig&
LocatorConfig::_Internal::cacher_cfg(const LocatorConfig* msg) {
  return *msg->cacher_cfg_;
}
const ::civ::civloc::VisionMapConfig&
LocatorConfig::_Internal::visionmap_cfg(const LocatorConfig* msg) {
  return *msg->visionmap_cfg_;
}
const ::civ::civloc::IOConfig&
LocatorConfig::_Internal::io_cfg(const LocatorConfig* msg) {
  return *msg->io_cfg_;
}
const ::civ::civloc::PointCloudMapConfig&
LocatorConfig::_Internal::pointcloud_map_cfg(const LocatorConfig* msg) {
  return *msg->pointcloud_map_cfg_;
}
const ::civ::civloc::FuseConfig&
LocatorConfig::_Internal::fuse_cfg(const LocatorConfig* msg) {
  return *msg->fuse_cfg_;
}
const ::civ::civloc::DetectConfig&
LocatorConfig::_Internal::detect_cfg(const LocatorConfig* msg) {
  return *msg->detect_cfg_;
}
const ::civ::civloc::LidarMatchConfig&
LocatorConfig::_Internal::lidar_match_cfg(const LocatorConfig* msg) {
  return *msg->lidar_match_cfg_;
}
const ::civ::civloc::VisionMatchConfig&
LocatorConfig::_Internal::vision_match_cfg(const LocatorConfig* msg) {
  return *msg->vision_match_cfg_;
}
const ::PROTOBUF_NAMESPACE_ID::internal::LazyString LocatorConfig::_i_give_permission_to_break_this_code_default_version_{{{"1.0.0", 5}}, {nullptr}};
LocatorConfig::LocatorConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:civ.civloc.LocatorConfig)
}
LocatorConfig::LocatorConfig(const LocatorConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  version_.UnsafeSetDefault(nullptr);
  if (from._internal_has_version()) {
    version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, from._internal_version(), 
      GetArena());
  }
  if (from._internal_has_cacher_cfg()) {
    cacher_cfg_ = new ::civ::civloc::CacherConfig(*from.cacher_cfg_);
  } else {
    cacher_cfg_ = nullptr;
  }
  if (from._internal_has_visionmap_cfg()) {
    visionmap_cfg_ = new ::civ::civloc::VisionMapConfig(*from.visionmap_cfg_);
  } else {
    visionmap_cfg_ = nullptr;
  }
  if (from._internal_has_io_cfg()) {
    io_cfg_ = new ::civ::civloc::IOConfig(*from.io_cfg_);
  } else {
    io_cfg_ = nullptr;
  }
  if (from._internal_has_pointcloud_map_cfg()) {
    pointcloud_map_cfg_ = new ::civ::civloc::PointCloudMapConfig(*from.pointcloud_map_cfg_);
  } else {
    pointcloud_map_cfg_ = nullptr;
  }
  if (from._internal_has_fuse_cfg()) {
    fuse_cfg_ = new ::civ::civloc::FuseConfig(*from.fuse_cfg_);
  } else {
    fuse_cfg_ = nullptr;
  }
  if (from._internal_has_detect_cfg()) {
    detect_cfg_ = new ::civ::civloc::DetectConfig(*from.detect_cfg_);
  } else {
    detect_cfg_ = nullptr;
  }
  if (from._internal_has_lidar_match_cfg()) {
    lidar_match_cfg_ = new ::civ::civloc::LidarMatchConfig(*from.lidar_match_cfg_);
  } else {
    lidar_match_cfg_ = nullptr;
  }
  if (from._internal_has_vision_match_cfg()) {
    vision_match_cfg_ = new ::civ::civloc::VisionMatchConfig(*from.vision_match_cfg_);
  } else {
    vision_match_cfg_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:civ.civloc.LocatorConfig)
}

void LocatorConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LocatorConfig_civloc_2fproto_2flocator_2eproto.base);
  version_.UnsafeSetDefault(nullptr);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&cacher_cfg_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&vision_match_cfg_) -
      reinterpret_cast<char*>(&cacher_cfg_)) + sizeof(vision_match_cfg_));
}

LocatorConfig::~LocatorConfig() {
  // @@protoc_insertion_point(destructor:civ.civloc.LocatorConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LocatorConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  version_.DestroyNoArena(nullptr);
  if (this != internal_default_instance()) delete cacher_cfg_;
  if (this != internal_default_instance()) delete visionmap_cfg_;
  if (this != internal_default_instance()) delete io_cfg_;
  if (this != internal_default_instance()) delete pointcloud_map_cfg_;
  if (this != internal_default_instance()) delete fuse_cfg_;
  if (this != internal_default_instance()) delete detect_cfg_;
  if (this != internal_default_instance()) delete lidar_match_cfg_;
  if (this != internal_default_instance()) delete vision_match_cfg_;
}

void LocatorConfig::ArenaDtor(void* object) {
  LocatorConfig* _this = reinterpret_cast< LocatorConfig* >(object);
  (void)_this;
}
void LocatorConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LocatorConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LocatorConfig& LocatorConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LocatorConfig_civloc_2fproto_2flocator_2eproto.base);
  return *internal_default_instance();
}


void LocatorConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:civ.civloc.LocatorConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      version_.ClearToDefault(::civ::civloc::LocatorConfig::_i_give_permission_to_break_this_code_default_version_, GetArena());
       }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(cacher_cfg_ != nullptr);
      cacher_cfg_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(visionmap_cfg_ != nullptr);
      visionmap_cfg_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(io_cfg_ != nullptr);
      io_cfg_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(pointcloud_map_cfg_ != nullptr);
      pointcloud_map_cfg_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(fuse_cfg_ != nullptr);
      fuse_cfg_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(detect_cfg_ != nullptr);
      detect_cfg_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(lidar_match_cfg_ != nullptr);
      lidar_match_cfg_->Clear();
    }
  }
  if (cached_has_bits & 0x00000100u) {
    GOOGLE_DCHECK(vision_match_cfg_ != nullptr);
    vision_match_cfg_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LocatorConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string version = 1 [default = "1.0.0"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "civ.civloc.LocatorConfig.version");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .civ.civloc.CacherConfig cacher_cfg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_cacher_cfg(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .civ.civloc.VisionMapConfig visionmap_cfg = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_visionmap_cfg(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .civ.civloc.IOConfig io_cfg = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_io_cfg(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .civ.civloc.PointCloudMapConfig pointcloud_map_cfg = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_pointcloud_map_cfg(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .civ.civloc.FuseConfig fuse_cfg = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_fuse_cfg(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .civ.civloc.DetectConfig detect_cfg = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_detect_cfg(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .civ.civloc.LidarMatchConfig lidar_match_cfg = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_lidar_match_cfg(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .civ.civloc.VisionMatchConfig vision_match_cfg = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_vision_match_cfg(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LocatorConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:civ.civloc.LocatorConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string version = 1 [default = "1.0.0"];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "civ.civloc.LocatorConfig.version");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_version(), target);
  }

  // required .civ.civloc.CacherConfig cacher_cfg = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::cacher_cfg(this), target, stream);
  }

  // required .civ.civloc.VisionMapConfig visionmap_cfg = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::visionmap_cfg(this), target, stream);
  }

  // optional .civ.civloc.IOConfig io_cfg = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::io_cfg(this), target, stream);
  }

  // optional .civ.civloc.PointCloudMapConfig pointcloud_map_cfg = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::pointcloud_map_cfg(this), target, stream);
  }

  // optional .civ.civloc.FuseConfig fuse_cfg = 11;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::fuse_cfg(this), target, stream);
  }

  // optional .civ.civloc.DetectConfig detect_cfg = 12;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::detect_cfg(this), target, stream);
  }

  // optional .civ.civloc.LidarMatchConfig lidar_match_cfg = 13;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::lidar_match_cfg(this), target, stream);
  }

  // optional .civ.civloc.VisionMatchConfig vision_match_cfg = 14;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::vision_match_cfg(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:civ.civloc.LocatorConfig)
  return target;
}

size_t LocatorConfig::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:civ.civloc.LocatorConfig)
  size_t total_size = 0;

  if (_internal_has_version()) {
    // required string version = 1 [default = "1.0.0"];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version());
  }

  if (_internal_has_cacher_cfg()) {
    // required .civ.civloc.CacherConfig cacher_cfg = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cacher_cfg_);
  }

  if (_internal_has_visionmap_cfg()) {
    // required .civ.civloc.VisionMapConfig visionmap_cfg = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *visionmap_cfg_);
  }

  return total_size;
}
size_t LocatorConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:civ.civloc.LocatorConfig)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string version = 1 [default = "1.0.0"];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version());

    // required .civ.civloc.CacherConfig cacher_cfg = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cacher_cfg_);

    // required .civ.civloc.VisionMapConfig visionmap_cfg = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *visionmap_cfg_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000f8u) {
    // optional .civ.civloc.IOConfig io_cfg = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *io_cfg_);
    }

    // optional .civ.civloc.PointCloudMapConfig pointcloud_map_cfg = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *pointcloud_map_cfg_);
    }

    // optional .civ.civloc.FuseConfig fuse_cfg = 11;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *fuse_cfg_);
    }

    // optional .civ.civloc.DetectConfig detect_cfg = 12;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *detect_cfg_);
    }

    // optional .civ.civloc.LidarMatchConfig lidar_match_cfg = 13;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *lidar_match_cfg_);
    }

  }
  // optional .civ.civloc.VisionMatchConfig vision_match_cfg = 14;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *vision_match_cfg_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LocatorConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:civ.civloc.LocatorConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const LocatorConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LocatorConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:civ.civloc.LocatorConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:civ.civloc.LocatorConfig)
    MergeFrom(*source);
  }
}

void LocatorConfig::MergeFrom(const LocatorConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:civ.civloc.LocatorConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_version(from._internal_version());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_cacher_cfg()->::civ::civloc::CacherConfig::MergeFrom(from._internal_cacher_cfg());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_visionmap_cfg()->::civ::civloc::VisionMapConfig::MergeFrom(from._internal_visionmap_cfg());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_io_cfg()->::civ::civloc::IOConfig::MergeFrom(from._internal_io_cfg());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_pointcloud_map_cfg()->::civ::civloc::PointCloudMapConfig::MergeFrom(from._internal_pointcloud_map_cfg());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_fuse_cfg()->::civ::civloc::FuseConfig::MergeFrom(from._internal_fuse_cfg());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_detect_cfg()->::civ::civloc::DetectConfig::MergeFrom(from._internal_detect_cfg());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_lidar_match_cfg()->::civ::civloc::LidarMatchConfig::MergeFrom(from._internal_lidar_match_cfg());
    }
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_mutable_vision_match_cfg()->::civ::civloc::VisionMatchConfig::MergeFrom(from._internal_vision_match_cfg());
  }
}

void LocatorConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:civ.civloc.LocatorConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LocatorConfig::CopyFrom(const LocatorConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:civ.civloc.LocatorConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocatorConfig::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_cacher_cfg()) {
    if (!cacher_cfg_->IsInitialized()) return false;
  }
  if (_internal_has_visionmap_cfg()) {
    if (!visionmap_cfg_->IsInitialized()) return false;
  }
  if (_internal_has_pointcloud_map_cfg()) {
    if (!pointcloud_map_cfg_->IsInitialized()) return false;
  }
  if (_internal_has_fuse_cfg()) {
    if (!fuse_cfg_->IsInitialized()) return false;
  }
  if (_internal_has_detect_cfg()) {
    if (!detect_cfg_->IsInitialized()) return false;
  }
  if (_internal_has_lidar_match_cfg()) {
    if (!lidar_match_cfg_->IsInitialized()) return false;
  }
  if (_internal_has_vision_match_cfg()) {
    if (!vision_match_cfg_->IsInitialized()) return false;
  }
  return true;
}

void LocatorConfig::InternalSwap(LocatorConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  version_.Swap(&other->version_, nullptr, GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LocatorConfig, vision_match_cfg_)
      + sizeof(LocatorConfig::vision_match_cfg_)
      - PROTOBUF_FIELD_OFFSET(LocatorConfig, cacher_cfg_)>(
          reinterpret_cast<char*>(&cacher_cfg_),
          reinterpret_cast<char*>(&other->cacher_cfg_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LocatorConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace civloc
}  // namespace civ
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::civ::civloc::CacherConfig* Arena::CreateMaybeMessage< ::civ::civloc::CacherConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::civ::civloc::CacherConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::civ::civloc::FilterPara* Arena::CreateMaybeMessage< ::civ::civloc::FilterPara >(Arena* arena) {
  return Arena::CreateMessageInternal< ::civ::civloc::FilterPara >(arena);
}
template<> PROTOBUF_NOINLINE ::civ::civloc::GnssFilterConfig* Arena::CreateMaybeMessage< ::civ::civloc::GnssFilterConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::civ::civloc::GnssFilterConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::civ::civloc::VehicleModelFilterConfig* Arena::CreateMaybeMessage< ::civ::civloc::VehicleModelFilterConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::civ::civloc::VehicleModelFilterConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::civ::civloc::WheelOdoFilterConfig* Arena::CreateMaybeMessage< ::civ::civloc::WheelOdoFilterConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::civ::civloc::WheelOdoFilterConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::civ::civloc::NDTConfig* Arena::CreateMaybeMessage< ::civ::civloc::NDTConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::civ::civloc::NDTConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::civ::civloc::LidarFilterConfig* Arena::CreateMaybeMessage< ::civ::civloc::LidarFilterConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::civ::civloc::LidarFilterConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::civ::civloc::VisionFilterConfig* Arena::CreateMaybeMessage< ::civ::civloc::VisionFilterConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::civ::civloc::VisionFilterConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::civ::civloc::FuseConfig* Arena::CreateMaybeMessage< ::civ::civloc::FuseConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::civ::civloc::FuseConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::civ::civloc::VisionMapConfig* Arena::CreateMaybeMessage< ::civ::civloc::VisionMapConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::civ::civloc::VisionMapConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::civ::civloc::PointCloudMapConfig* Arena::CreateMaybeMessage< ::civ::civloc::PointCloudMapConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::civ::civloc::PointCloudMapConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::civ::civloc::IOConfig* Arena::CreateMaybeMessage< ::civ::civloc::IOConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::civ::civloc::IOConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::civ::civloc::DetectConfig* Arena::CreateMaybeMessage< ::civ::civloc::DetectConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::civ::civloc::DetectConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::civ::civloc::LidarMatchConfig* Arena::CreateMaybeMessage< ::civ::civloc::LidarMatchConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::civ::civloc::LidarMatchConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::civ::civloc::VisionMatchConfig* Arena::CreateMaybeMessage< ::civ::civloc::VisionMatchConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::civ::civloc::VisionMatchConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::civ::civloc::LocatorConfig* Arena::CreateMaybeMessage< ::civ::civloc::LocatorConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::civ::civloc::LocatorConfig >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
