// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: civloc/proto/civloc.proto

#include "civloc/proto/civloc.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_civloc_2fproto_2fcivloc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ChanelConfig_civloc_2fproto_2fcivloc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_civloc_2fproto_2fcivloc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PerceptionChanelConfig_civloc_2fproto_2fcivloc_2eproto;
namespace civ {
namespace civloc {
class PerceptionChanelConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PerceptionChanelConfig> _instance;
} _PerceptionChanelConfig_default_instance_;
class TFConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TFConfig> _instance;
} _TFConfig_default_instance_;
class ChanelConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ChanelConfig> _instance;
} _ChanelConfig_default_instance_;
class CivLocConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CivLocConfig> _instance;
} _CivLocConfig_default_instance_;
}  // namespace civloc
}  // namespace civ
static void InitDefaultsscc_info_ChanelConfig_civloc_2fproto_2fcivloc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::civ::civloc::_ChanelConfig_default_instance_;
    new (ptr) ::civ::civloc::ChanelConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ChanelConfig_civloc_2fproto_2fcivloc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ChanelConfig_civloc_2fproto_2fcivloc_2eproto}, {}};

static void InitDefaultsscc_info_CivLocConfig_civloc_2fproto_2fcivloc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::civ::civloc::_CivLocConfig_default_instance_;
    new (ptr) ::civ::civloc::CivLocConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_CivLocConfig_civloc_2fproto_2fcivloc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_CivLocConfig_civloc_2fproto_2fcivloc_2eproto}, {
      &scc_info_ChanelConfig_civloc_2fproto_2fcivloc_2eproto.base,
      &scc_info_PerceptionChanelConfig_civloc_2fproto_2fcivloc_2eproto.base,}};

static void InitDefaultsscc_info_PerceptionChanelConfig_civloc_2fproto_2fcivloc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::civ::civloc::_PerceptionChanelConfig_default_instance_;
    new (ptr) ::civ::civloc::PerceptionChanelConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PerceptionChanelConfig_civloc_2fproto_2fcivloc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PerceptionChanelConfig_civloc_2fproto_2fcivloc_2eproto}, {}};

static void InitDefaultsscc_info_TFConfig_civloc_2fproto_2fcivloc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::civ::civloc::_TFConfig_default_instance_;
    new (ptr) ::civ::civloc::TFConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TFConfig_civloc_2fproto_2fcivloc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TFConfig_civloc_2fproto_2fcivloc_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_civloc_2fproto_2fcivloc_2eproto[4];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_civloc_2fproto_2fcivloc_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_civloc_2fproto_2fcivloc_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_civloc_2fproto_2fcivloc_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::civ::civloc::PerceptionChanelConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::civ::civloc::PerceptionChanelConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::civ::civloc::PerceptionChanelConfig, name_),
  PROTOBUF_FIELD_OFFSET(::civ::civloc::PerceptionChanelConfig, vendor_),
  PROTOBUF_FIELD_OFFSET(::civ::civloc::PerceptionChanelConfig, rate_hz_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::civ::civloc::TFConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::civ::civloc::TFConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::civ::civloc::TFConfig, broadcast_tf_frame_id_),
  PROTOBUF_FIELD_OFFSET(::civ::civloc::TFConfig, broadcast_tf_child_frame_id_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::civ::civloc::ChanelConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::civ::civloc::ChanelConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::civ::civloc::ChanelConfig, name_),
  PROTOBUF_FIELD_OFFSET(::civ::civloc::ChanelConfig, rate_hz_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::civ::civloc::CivLocConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::civ::civloc::CivLocConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::civ::civloc::CivLocConfig, version_),
  PROTOBUF_FIELD_OFFSET(::civ::civloc::CivLocConfig, mode_),
  PROTOBUF_FIELD_OFFSET(::civ::civloc::CivLocConfig, chassis_),
  PROTOBUF_FIELD_OFFSET(::civ::civloc::CivLocConfig, cgi610_),
  PROTOBUF_FIELD_OFFSET(::civ::civloc::CivLocConfig, raw_cgi610_bestpos_),
  PROTOBUF_FIELD_OFFSET(::civ::civloc::CivLocConfig, raw_cgi610_bestvel_),
  PROTOBUF_FIELD_OFFSET(::civ::civloc::CivLocConfig, raw_cgi610_heading2_),
  PROTOBUF_FIELD_OFFSET(::civ::civloc::CivLocConfig, raw_wheeltec_imu_),
  PROTOBUF_FIELD_OFFSET(::civ::civloc::CivLocConfig, perception_),
  PROTOBUF_FIELD_OFFSET(::civ::civloc::CivLocConfig, pointcloud_),
  PROTOBUF_FIELD_OFFSET(::civ::civloc::CivLocConfig, pointcloud_map_),
  PROTOBUF_FIELD_OFFSET(::civ::civloc::CivLocConfig, zloc_map_),
  PROTOBUF_FIELD_OFFSET(::civ::civloc::CivLocConfig, cpt7_),
  PROTOBUF_FIELD_OFFSET(::civ::civloc::CivLocConfig, zloc_fuse_),
  PROTOBUF_FIELD_OFFSET(::civ::civloc::CivLocConfig, forward_cfg_),
  0,
  13,
  1,
  2,
  3,
  4,
  5,
  6,
  ~0u,
  7,
  8,
  9,
  10,
  11,
  12,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(::civ::civloc::PerceptionChanelConfig)},
  { 11, 18, sizeof(::civ::civloc::TFConfig)},
  { 20, 27, sizeof(::civ::civloc::ChanelConfig)},
  { 29, 49, sizeof(::civ::civloc::CivLocConfig)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::civ::civloc::_PerceptionChanelConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::civ::civloc::_TFConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::civ::civloc::_ChanelConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::civ::civloc::_CivLocConfig_default_instance_),
};

const char descriptor_table_protodef_civloc_2fproto_2fcivloc_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\031civloc/proto/civloc.proto\022\nciv.civloc\""
  "\335\001\n\026PerceptionChanelConfig\022\014\n\004name\030\001 \001(\t"
  "\022>\n\006vendor\030\002 \001(\0162).civ.civloc.Perception"
  "ChanelConfig.Vendor:\003SIM\022\023\n\007rate_hz\030\003 \001("
  "\r:\00210\"`\n\006Vendor\022\n\n\006OTHERS\020\000\022\007\n\003SIM\020\001\022\t\n\005"
  "ZHITO\020\002\022\014\n\010MOBILEYE\020\003\022\013\n\007MAXIEYE\020\004\022\016\n\nSM"
  "ARTEREYE\020\005\022\013\n\007HORIZON\020\006\"N\n\010TFConfig\022\035\n\025b"
  "roadcast_tf_frame_id\030\t \001(\t\022#\n\033broadcast_"
  "tf_child_frame_id\030\n \001(\t\"-\n\014ChanelConfig\022"
  "\014\n\004name\030\001 \001(\t\022\017\n\007rate_hz\030\002 \001(\r\"\215\006\n\014CivLo"
  "cConfig\022,\n\007version\030\001 \002(\t:\033zloc_component"
  " config 1.0.0\0228\n\004mode\030\002 \001(\0162!.civ.civloc"
  ".CivLocConfig.WorkMode:\007Forward\022)\n\007chass"
  "is\030\010 \002(\0132\030.civ.civloc.ChanelConfig\022(\n\006cg"
  "i610\030\014 \002(\0132\030.civ.civloc.ChanelConfig\0224\n\022"
  "raw_cgi610_bestpos\030\r \002(\0132\030.civ.civloc.Ch"
  "anelConfig\0224\n\022raw_cgi610_bestvel\030\016 \002(\0132\030"
  ".civ.civloc.ChanelConfig\0225\n\023raw_cgi610_h"
  "eading2\030\017 \002(\0132\030.civ.civloc.ChanelConfig\022"
  "2\n\020raw_wheeltec_imu\030\020 \002(\0132\030.civ.civloc.C"
  "hanelConfig\0226\n\nperception\030\021 \003(\0132\".civ.ci"
  "vloc.PerceptionChanelConfig\022,\n\npointclou"
  "d\030\022 \002(\0132\030.civ.civloc.ChanelConfig\0220\n\016poi"
  "ntcloud_map\030\023 \001(\0132\030.civ.civloc.ChanelCon"
  "fig\022*\n\010zloc_map\030\024 \001(\0132\030.civ.civloc.Chane"
  "lConfig\022&\n\004cpt7\030\025 \001(\0132\030.civ.civloc.Chane"
  "lConfig\022+\n\tzloc_fuse\030\026 \002(\0132\030.civ.civloc."
  "ChanelConfig\022-\n\013forward_cfg\030\027 \002(\0132\030.civ."
  "civloc.ChanelConfig\"!\n\010WorkMode\022\013\n\007Forwa"
  "rd\020\000\022\010\n\004Fuse\020\001"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_civloc_2fproto_2fcivloc_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_civloc_2fproto_2fcivloc_2eproto_sccs[4] = {
  &scc_info_ChanelConfig_civloc_2fproto_2fcivloc_2eproto.base,
  &scc_info_CivLocConfig_civloc_2fproto_2fcivloc_2eproto.base,
  &scc_info_PerceptionChanelConfig_civloc_2fproto_2fcivloc_2eproto.base,
  &scc_info_TFConfig_civloc_2fproto_2fcivloc_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_civloc_2fproto_2fcivloc_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_civloc_2fproto_2fcivloc_2eproto = {
  false, false, descriptor_table_protodef_civloc_2fproto_2fcivloc_2eproto, "civloc/proto/civloc.proto", 1174,
  &descriptor_table_civloc_2fproto_2fcivloc_2eproto_once, descriptor_table_civloc_2fproto_2fcivloc_2eproto_sccs, descriptor_table_civloc_2fproto_2fcivloc_2eproto_deps, 4, 0,
  schemas, file_default_instances, TableStruct_civloc_2fproto_2fcivloc_2eproto::offsets,
  file_level_metadata_civloc_2fproto_2fcivloc_2eproto, 4, file_level_enum_descriptors_civloc_2fproto_2fcivloc_2eproto, file_level_service_descriptors_civloc_2fproto_2fcivloc_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_civloc_2fproto_2fcivloc_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_civloc_2fproto_2fcivloc_2eproto)), true);
namespace civ {
namespace civloc {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PerceptionChanelConfig_Vendor_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_civloc_2fproto_2fcivloc_2eproto);
  return file_level_enum_descriptors_civloc_2fproto_2fcivloc_2eproto[0];
}
bool PerceptionChanelConfig_Vendor_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr PerceptionChanelConfig_Vendor PerceptionChanelConfig::OTHERS;
constexpr PerceptionChanelConfig_Vendor PerceptionChanelConfig::SIM;
constexpr PerceptionChanelConfig_Vendor PerceptionChanelConfig::ZHITO;
constexpr PerceptionChanelConfig_Vendor PerceptionChanelConfig::MOBILEYE;
constexpr PerceptionChanelConfig_Vendor PerceptionChanelConfig::MAXIEYE;
constexpr PerceptionChanelConfig_Vendor PerceptionChanelConfig::SMARTEREYE;
constexpr PerceptionChanelConfig_Vendor PerceptionChanelConfig::HORIZON;
constexpr PerceptionChanelConfig_Vendor PerceptionChanelConfig::Vendor_MIN;
constexpr PerceptionChanelConfig_Vendor PerceptionChanelConfig::Vendor_MAX;
constexpr int PerceptionChanelConfig::Vendor_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CivLocConfig_WorkMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_civloc_2fproto_2fcivloc_2eproto);
  return file_level_enum_descriptors_civloc_2fproto_2fcivloc_2eproto[1];
}
bool CivLocConfig_WorkMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr CivLocConfig_WorkMode CivLocConfig::Forward;
constexpr CivLocConfig_WorkMode CivLocConfig::Fuse;
constexpr CivLocConfig_WorkMode CivLocConfig::WorkMode_MIN;
constexpr CivLocConfig_WorkMode CivLocConfig::WorkMode_MAX;
constexpr int CivLocConfig::WorkMode_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

class PerceptionChanelConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<PerceptionChanelConfig>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_vendor(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_rate_hz(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

PerceptionChanelConfig::PerceptionChanelConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:civ.civloc.PerceptionChanelConfig)
}
PerceptionChanelConfig::PerceptionChanelConfig(const PerceptionChanelConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  ::memcpy(&vendor_, &from.vendor_,
    static_cast<size_t>(reinterpret_cast<char*>(&rate_hz_) -
    reinterpret_cast<char*>(&vendor_)) + sizeof(rate_hz_));
  // @@protoc_insertion_point(copy_constructor:civ.civloc.PerceptionChanelConfig)
}

void PerceptionChanelConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PerceptionChanelConfig_civloc_2fproto_2fcivloc_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  vendor_ = 1;
  rate_hz_ = 10u;
}

PerceptionChanelConfig::~PerceptionChanelConfig() {
  // @@protoc_insertion_point(destructor:civ.civloc.PerceptionChanelConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PerceptionChanelConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PerceptionChanelConfig::ArenaDtor(void* object) {
  PerceptionChanelConfig* _this = reinterpret_cast< PerceptionChanelConfig* >(object);
  (void)_this;
}
void PerceptionChanelConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PerceptionChanelConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PerceptionChanelConfig& PerceptionChanelConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PerceptionChanelConfig_civloc_2fproto_2fcivloc_2eproto.base);
  return *internal_default_instance();
}


void PerceptionChanelConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:civ.civloc.PerceptionChanelConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    vendor_ = 1;
    rate_hz_ = 10u;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PerceptionChanelConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "civ.civloc.PerceptionChanelConfig.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .civ.civloc.PerceptionChanelConfig.Vendor vendor = 2 [default = SIM];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::civ::civloc::PerceptionChanelConfig_Vendor_IsValid(val))) {
            _internal_set_vendor(static_cast<::civ::civloc::PerceptionChanelConfig_Vendor>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 rate_hz = 3 [default = 10];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_rate_hz(&has_bits);
          rate_hz_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PerceptionChanelConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:civ.civloc.PerceptionChanelConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "civ.civloc.PerceptionChanelConfig.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional .civ.civloc.PerceptionChanelConfig.Vendor vendor = 2 [default = SIM];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_vendor(), target);
  }

  // optional uint32 rate_hz = 3 [default = 10];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_rate_hz(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:civ.civloc.PerceptionChanelConfig)
  return target;
}

size_t PerceptionChanelConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:civ.civloc.PerceptionChanelConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional .civ.civloc.PerceptionChanelConfig.Vendor vendor = 2 [default = SIM];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_vendor());
    }

    // optional uint32 rate_hz = 3 [default = 10];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_rate_hz());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PerceptionChanelConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:civ.civloc.PerceptionChanelConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const PerceptionChanelConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PerceptionChanelConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:civ.civloc.PerceptionChanelConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:civ.civloc.PerceptionChanelConfig)
    MergeFrom(*source);
  }
}

void PerceptionChanelConfig::MergeFrom(const PerceptionChanelConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:civ.civloc.PerceptionChanelConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      vendor_ = from.vendor_;
    }
    if (cached_has_bits & 0x00000004u) {
      rate_hz_ = from.rate_hz_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PerceptionChanelConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:civ.civloc.PerceptionChanelConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PerceptionChanelConfig::CopyFrom(const PerceptionChanelConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:civ.civloc.PerceptionChanelConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PerceptionChanelConfig::IsInitialized() const {
  return true;
}

void PerceptionChanelConfig::InternalSwap(PerceptionChanelConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(vendor_, other->vendor_);
  swap(rate_hz_, other->rate_hz_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PerceptionChanelConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class TFConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<TFConfig>()._has_bits_);
  static void set_has_broadcast_tf_frame_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_broadcast_tf_child_frame_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

TFConfig::TFConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:civ.civloc.TFConfig)
}
TFConfig::TFConfig(const TFConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  broadcast_tf_frame_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_broadcast_tf_frame_id()) {
    broadcast_tf_frame_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_broadcast_tf_frame_id(), 
      GetArena());
  }
  broadcast_tf_child_frame_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_broadcast_tf_child_frame_id()) {
    broadcast_tf_child_frame_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_broadcast_tf_child_frame_id(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:civ.civloc.TFConfig)
}

void TFConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TFConfig_civloc_2fproto_2fcivloc_2eproto.base);
  broadcast_tf_frame_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  broadcast_tf_child_frame_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

TFConfig::~TFConfig() {
  // @@protoc_insertion_point(destructor:civ.civloc.TFConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TFConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  broadcast_tf_frame_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  broadcast_tf_child_frame_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TFConfig::ArenaDtor(void* object) {
  TFConfig* _this = reinterpret_cast< TFConfig* >(object);
  (void)_this;
}
void TFConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TFConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TFConfig& TFConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TFConfig_civloc_2fproto_2fcivloc_2eproto.base);
  return *internal_default_instance();
}


void TFConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:civ.civloc.TFConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      broadcast_tf_frame_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      broadcast_tf_child_frame_id_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TFConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string broadcast_tf_frame_id = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_broadcast_tf_frame_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "civ.civloc.TFConfig.broadcast_tf_frame_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string broadcast_tf_child_frame_id = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_broadcast_tf_child_frame_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "civ.civloc.TFConfig.broadcast_tf_child_frame_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TFConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:civ.civloc.TFConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string broadcast_tf_frame_id = 9;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_broadcast_tf_frame_id().data(), static_cast<int>(this->_internal_broadcast_tf_frame_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "civ.civloc.TFConfig.broadcast_tf_frame_id");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_broadcast_tf_frame_id(), target);
  }

  // optional string broadcast_tf_child_frame_id = 10;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_broadcast_tf_child_frame_id().data(), static_cast<int>(this->_internal_broadcast_tf_child_frame_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "civ.civloc.TFConfig.broadcast_tf_child_frame_id");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_broadcast_tf_child_frame_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:civ.civloc.TFConfig)
  return target;
}

size_t TFConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:civ.civloc.TFConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string broadcast_tf_frame_id = 9;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_broadcast_tf_frame_id());
    }

    // optional string broadcast_tf_child_frame_id = 10;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_broadcast_tf_child_frame_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TFConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:civ.civloc.TFConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const TFConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TFConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:civ.civloc.TFConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:civ.civloc.TFConfig)
    MergeFrom(*source);
  }
}

void TFConfig::MergeFrom(const TFConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:civ.civloc.TFConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_broadcast_tf_frame_id(from._internal_broadcast_tf_frame_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_broadcast_tf_child_frame_id(from._internal_broadcast_tf_child_frame_id());
    }
  }
}

void TFConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:civ.civloc.TFConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TFConfig::CopyFrom(const TFConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:civ.civloc.TFConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TFConfig::IsInitialized() const {
  return true;
}

void TFConfig::InternalSwap(TFConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  broadcast_tf_frame_id_.Swap(&other->broadcast_tf_frame_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  broadcast_tf_child_frame_id_.Swap(&other->broadcast_tf_child_frame_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata TFConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ChanelConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<ChanelConfig>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_rate_hz(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ChanelConfig::ChanelConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:civ.civloc.ChanelConfig)
}
ChanelConfig::ChanelConfig(const ChanelConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  rate_hz_ = from.rate_hz_;
  // @@protoc_insertion_point(copy_constructor:civ.civloc.ChanelConfig)
}

void ChanelConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ChanelConfig_civloc_2fproto_2fcivloc_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  rate_hz_ = 0u;
}

ChanelConfig::~ChanelConfig() {
  // @@protoc_insertion_point(destructor:civ.civloc.ChanelConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ChanelConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ChanelConfig::ArenaDtor(void* object) {
  ChanelConfig* _this = reinterpret_cast< ChanelConfig* >(object);
  (void)_this;
}
void ChanelConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChanelConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ChanelConfig& ChanelConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ChanelConfig_civloc_2fproto_2fcivloc_2eproto.base);
  return *internal_default_instance();
}


void ChanelConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:civ.civloc.ChanelConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmpty();
  }
  rate_hz_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChanelConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "civ.civloc.ChanelConfig.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 rate_hz = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_rate_hz(&has_bits);
          rate_hz_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChanelConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:civ.civloc.ChanelConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "civ.civloc.ChanelConfig.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional uint32 rate_hz = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_rate_hz(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:civ.civloc.ChanelConfig)
  return target;
}

size_t ChanelConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:civ.civloc.ChanelConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional uint32 rate_hz = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_rate_hz());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChanelConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:civ.civloc.ChanelConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const ChanelConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChanelConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:civ.civloc.ChanelConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:civ.civloc.ChanelConfig)
    MergeFrom(*source);
  }
}

void ChanelConfig::MergeFrom(const ChanelConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:civ.civloc.ChanelConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      rate_hz_ = from.rate_hz_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ChanelConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:civ.civloc.ChanelConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChanelConfig::CopyFrom(const ChanelConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:civ.civloc.ChanelConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChanelConfig::IsInitialized() const {
  return true;
}

void ChanelConfig::InternalSwap(ChanelConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(rate_hz_, other->rate_hz_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChanelConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CivLocConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<CivLocConfig>()._has_bits_);
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static const ::civ::civloc::ChanelConfig& chassis(const CivLocConfig* msg);
  static void set_has_chassis(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::civ::civloc::ChanelConfig& cgi610(const CivLocConfig* msg);
  static void set_has_cgi610(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::civ::civloc::ChanelConfig& raw_cgi610_bestpos(const CivLocConfig* msg);
  static void set_has_raw_cgi610_bestpos(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::civ::civloc::ChanelConfig& raw_cgi610_bestvel(const CivLocConfig* msg);
  static void set_has_raw_cgi610_bestvel(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::civ::civloc::ChanelConfig& raw_cgi610_heading2(const CivLocConfig* msg);
  static void set_has_raw_cgi610_heading2(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::civ::civloc::ChanelConfig& raw_wheeltec_imu(const CivLocConfig* msg);
  static void set_has_raw_wheeltec_imu(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::civ::civloc::ChanelConfig& pointcloud(const CivLocConfig* msg);
  static void set_has_pointcloud(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::civ::civloc::ChanelConfig& pointcloud_map(const CivLocConfig* msg);
  static void set_has_pointcloud_map(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::civ::civloc::ChanelConfig& zloc_map(const CivLocConfig* msg);
  static void set_has_zloc_map(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::civ::civloc::ChanelConfig& cpt7(const CivLocConfig* msg);
  static void set_has_cpt7(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::civ::civloc::ChanelConfig& zloc_fuse(const CivLocConfig* msg);
  static void set_has_zloc_fuse(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static const ::civ::civloc::ChanelConfig& forward_cfg(const CivLocConfig* msg);
  static void set_has_forward_cfg(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x000018ff) ^ 0x000018ff) != 0;
  }
};

const ::civ::civloc::ChanelConfig&
CivLocConfig::_Internal::chassis(const CivLocConfig* msg) {
  return *msg->chassis_;
}
const ::civ::civloc::ChanelConfig&
CivLocConfig::_Internal::cgi610(const CivLocConfig* msg) {
  return *msg->cgi610_;
}
const ::civ::civloc::ChanelConfig&
CivLocConfig::_Internal::raw_cgi610_bestpos(const CivLocConfig* msg) {
  return *msg->raw_cgi610_bestpos_;
}
const ::civ::civloc::ChanelConfig&
CivLocConfig::_Internal::raw_cgi610_bestvel(const CivLocConfig* msg) {
  return *msg->raw_cgi610_bestvel_;
}
const ::civ::civloc::ChanelConfig&
CivLocConfig::_Internal::raw_cgi610_heading2(const CivLocConfig* msg) {
  return *msg->raw_cgi610_heading2_;
}
const ::civ::civloc::ChanelConfig&
CivLocConfig::_Internal::raw_wheeltec_imu(const CivLocConfig* msg) {
  return *msg->raw_wheeltec_imu_;
}
const ::civ::civloc::ChanelConfig&
CivLocConfig::_Internal::pointcloud(const CivLocConfig* msg) {
  return *msg->pointcloud_;
}
const ::civ::civloc::ChanelConfig&
CivLocConfig::_Internal::pointcloud_map(const CivLocConfig* msg) {
  return *msg->pointcloud_map_;
}
const ::civ::civloc::ChanelConfig&
CivLocConfig::_Internal::zloc_map(const CivLocConfig* msg) {
  return *msg->zloc_map_;
}
const ::civ::civloc::ChanelConfig&
CivLocConfig::_Internal::cpt7(const CivLocConfig* msg) {
  return *msg->cpt7_;
}
const ::civ::civloc::ChanelConfig&
CivLocConfig::_Internal::zloc_fuse(const CivLocConfig* msg) {
  return *msg->zloc_fuse_;
}
const ::civ::civloc::ChanelConfig&
CivLocConfig::_Internal::forward_cfg(const CivLocConfig* msg) {
  return *msg->forward_cfg_;
}
const ::PROTOBUF_NAMESPACE_ID::internal::LazyString CivLocConfig::_i_give_permission_to_break_this_code_default_version_{{{"zloc_component config 1.0.0", 27}}, {nullptr}};
CivLocConfig::CivLocConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  perception_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:civ.civloc.CivLocConfig)
}
CivLocConfig::CivLocConfig(const CivLocConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      perception_(from.perception_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  version_.UnsafeSetDefault(nullptr);
  if (from._internal_has_version()) {
    version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, from._internal_version(), 
      GetArena());
  }
  if (from._internal_has_chassis()) {
    chassis_ = new ::civ::civloc::ChanelConfig(*from.chassis_);
  } else {
    chassis_ = nullptr;
  }
  if (from._internal_has_cgi610()) {
    cgi610_ = new ::civ::civloc::ChanelConfig(*from.cgi610_);
  } else {
    cgi610_ = nullptr;
  }
  if (from._internal_has_raw_cgi610_bestpos()) {
    raw_cgi610_bestpos_ = new ::civ::civloc::ChanelConfig(*from.raw_cgi610_bestpos_);
  } else {
    raw_cgi610_bestpos_ = nullptr;
  }
  if (from._internal_has_raw_cgi610_bestvel()) {
    raw_cgi610_bestvel_ = new ::civ::civloc::ChanelConfig(*from.raw_cgi610_bestvel_);
  } else {
    raw_cgi610_bestvel_ = nullptr;
  }
  if (from._internal_has_raw_cgi610_heading2()) {
    raw_cgi610_heading2_ = new ::civ::civloc::ChanelConfig(*from.raw_cgi610_heading2_);
  } else {
    raw_cgi610_heading2_ = nullptr;
  }
  if (from._internal_has_raw_wheeltec_imu()) {
    raw_wheeltec_imu_ = new ::civ::civloc::ChanelConfig(*from.raw_wheeltec_imu_);
  } else {
    raw_wheeltec_imu_ = nullptr;
  }
  if (from._internal_has_pointcloud()) {
    pointcloud_ = new ::civ::civloc::ChanelConfig(*from.pointcloud_);
  } else {
    pointcloud_ = nullptr;
  }
  if (from._internal_has_pointcloud_map()) {
    pointcloud_map_ = new ::civ::civloc::ChanelConfig(*from.pointcloud_map_);
  } else {
    pointcloud_map_ = nullptr;
  }
  if (from._internal_has_zloc_map()) {
    zloc_map_ = new ::civ::civloc::ChanelConfig(*from.zloc_map_);
  } else {
    zloc_map_ = nullptr;
  }
  if (from._internal_has_cpt7()) {
    cpt7_ = new ::civ::civloc::ChanelConfig(*from.cpt7_);
  } else {
    cpt7_ = nullptr;
  }
  if (from._internal_has_zloc_fuse()) {
    zloc_fuse_ = new ::civ::civloc::ChanelConfig(*from.zloc_fuse_);
  } else {
    zloc_fuse_ = nullptr;
  }
  if (from._internal_has_forward_cfg()) {
    forward_cfg_ = new ::civ::civloc::ChanelConfig(*from.forward_cfg_);
  } else {
    forward_cfg_ = nullptr;
  }
  mode_ = from.mode_;
  // @@protoc_insertion_point(copy_constructor:civ.civloc.CivLocConfig)
}

void CivLocConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CivLocConfig_civloc_2fproto_2fcivloc_2eproto.base);
  version_.UnsafeSetDefault(nullptr);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&chassis_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&mode_) -
      reinterpret_cast<char*>(&chassis_)) + sizeof(mode_));
}

CivLocConfig::~CivLocConfig() {
  // @@protoc_insertion_point(destructor:civ.civloc.CivLocConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CivLocConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  version_.DestroyNoArena(nullptr);
  if (this != internal_default_instance()) delete chassis_;
  if (this != internal_default_instance()) delete cgi610_;
  if (this != internal_default_instance()) delete raw_cgi610_bestpos_;
  if (this != internal_default_instance()) delete raw_cgi610_bestvel_;
  if (this != internal_default_instance()) delete raw_cgi610_heading2_;
  if (this != internal_default_instance()) delete raw_wheeltec_imu_;
  if (this != internal_default_instance()) delete pointcloud_;
  if (this != internal_default_instance()) delete pointcloud_map_;
  if (this != internal_default_instance()) delete zloc_map_;
  if (this != internal_default_instance()) delete cpt7_;
  if (this != internal_default_instance()) delete zloc_fuse_;
  if (this != internal_default_instance()) delete forward_cfg_;
}

void CivLocConfig::ArenaDtor(void* object) {
  CivLocConfig* _this = reinterpret_cast< CivLocConfig* >(object);
  (void)_this;
}
void CivLocConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CivLocConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CivLocConfig& CivLocConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CivLocConfig_civloc_2fproto_2fcivloc_2eproto.base);
  return *internal_default_instance();
}


void CivLocConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:civ.civloc.CivLocConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  perception_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      version_.ClearToDefault(::civ::civloc::CivLocConfig::_i_give_permission_to_break_this_code_default_version_, GetArena());
       }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(chassis_ != nullptr);
      chassis_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(cgi610_ != nullptr);
      cgi610_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(raw_cgi610_bestpos_ != nullptr);
      raw_cgi610_bestpos_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(raw_cgi610_bestvel_ != nullptr);
      raw_cgi610_bestvel_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(raw_cgi610_heading2_ != nullptr);
      raw_cgi610_heading2_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(raw_wheeltec_imu_ != nullptr);
      raw_wheeltec_imu_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(pointcloud_ != nullptr);
      pointcloud_->Clear();
    }
  }
  if (cached_has_bits & 0x00001f00u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(pointcloud_map_ != nullptr);
      pointcloud_map_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(zloc_map_ != nullptr);
      zloc_map_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(cpt7_ != nullptr);
      cpt7_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(zloc_fuse_ != nullptr);
      zloc_fuse_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(forward_cfg_ != nullptr);
      forward_cfg_->Clear();
    }
  }
  mode_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CivLocConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string version = 1 [default = "zloc_component config 1.0.0"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "civ.civloc.CivLocConfig.version");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .civ.civloc.CivLocConfig.WorkMode mode = 2 [default = Forward];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::civ::civloc::CivLocConfig_WorkMode_IsValid(val))) {
            _internal_set_mode(static_cast<::civ::civloc::CivLocConfig_WorkMode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // required .civ.civloc.ChanelConfig chassis = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_chassis(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .civ.civloc.ChanelConfig cgi610 = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_cgi610(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .civ.civloc.ChanelConfig raw_cgi610_bestpos = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_raw_cgi610_bestpos(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .civ.civloc.ChanelConfig raw_cgi610_bestvel = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_raw_cgi610_bestvel(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .civ.civloc.ChanelConfig raw_cgi610_heading2 = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_raw_cgi610_heading2(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .civ.civloc.ChanelConfig raw_wheeltec_imu = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_raw_wheeltec_imu(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .civ.civloc.PerceptionChanelConfig perception = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_perception(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<138>(ptr));
        } else goto handle_unusual;
        continue;
      // required .civ.civloc.ChanelConfig pointcloud = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_pointcloud(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .civ.civloc.ChanelConfig pointcloud_map = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_pointcloud_map(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .civ.civloc.ChanelConfig zloc_map = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_zloc_map(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .civ.civloc.ChanelConfig cpt7 = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_cpt7(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .civ.civloc.ChanelConfig zloc_fuse = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_zloc_fuse(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .civ.civloc.ChanelConfig forward_cfg = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_forward_cfg(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CivLocConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:civ.civloc.CivLocConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string version = 1 [default = "zloc_component config 1.0.0"];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "civ.civloc.CivLocConfig.version");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_version(), target);
  }

  // optional .civ.civloc.CivLocConfig.WorkMode mode = 2 [default = Forward];
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_mode(), target);
  }

  // required .civ.civloc.ChanelConfig chassis = 8;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::chassis(this), target, stream);
  }

  // required .civ.civloc.ChanelConfig cgi610 = 12;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::cgi610(this), target, stream);
  }

  // required .civ.civloc.ChanelConfig raw_cgi610_bestpos = 13;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::raw_cgi610_bestpos(this), target, stream);
  }

  // required .civ.civloc.ChanelConfig raw_cgi610_bestvel = 14;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::raw_cgi610_bestvel(this), target, stream);
  }

  // required .civ.civloc.ChanelConfig raw_cgi610_heading2 = 15;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        15, _Internal::raw_cgi610_heading2(this), target, stream);
  }

  // required .civ.civloc.ChanelConfig raw_wheeltec_imu = 16;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        16, _Internal::raw_wheeltec_imu(this), target, stream);
  }

  // repeated .civ.civloc.PerceptionChanelConfig perception = 17;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_perception_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(17, this->_internal_perception(i), target, stream);
  }

  // required .civ.civloc.ChanelConfig pointcloud = 18;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        18, _Internal::pointcloud(this), target, stream);
  }

  // optional .civ.civloc.ChanelConfig pointcloud_map = 19;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        19, _Internal::pointcloud_map(this), target, stream);
  }

  // optional .civ.civloc.ChanelConfig zloc_map = 20;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        20, _Internal::zloc_map(this), target, stream);
  }

  // optional .civ.civloc.ChanelConfig cpt7 = 21;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        21, _Internal::cpt7(this), target, stream);
  }

  // required .civ.civloc.ChanelConfig zloc_fuse = 22;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        22, _Internal::zloc_fuse(this), target, stream);
  }

  // required .civ.civloc.ChanelConfig forward_cfg = 23;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        23, _Internal::forward_cfg(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:civ.civloc.CivLocConfig)
  return target;
}

size_t CivLocConfig::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:civ.civloc.CivLocConfig)
  size_t total_size = 0;

  if (_internal_has_version()) {
    // required string version = 1 [default = "zloc_component config 1.0.0"];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version());
  }

  if (_internal_has_chassis()) {
    // required .civ.civloc.ChanelConfig chassis = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *chassis_);
  }

  if (_internal_has_cgi610()) {
    // required .civ.civloc.ChanelConfig cgi610 = 12;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cgi610_);
  }

  if (_internal_has_raw_cgi610_bestpos()) {
    // required .civ.civloc.ChanelConfig raw_cgi610_bestpos = 13;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *raw_cgi610_bestpos_);
  }

  if (_internal_has_raw_cgi610_bestvel()) {
    // required .civ.civloc.ChanelConfig raw_cgi610_bestvel = 14;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *raw_cgi610_bestvel_);
  }

  if (_internal_has_raw_cgi610_heading2()) {
    // required .civ.civloc.ChanelConfig raw_cgi610_heading2 = 15;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *raw_cgi610_heading2_);
  }

  if (_internal_has_raw_wheeltec_imu()) {
    // required .civ.civloc.ChanelConfig raw_wheeltec_imu = 16;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *raw_wheeltec_imu_);
  }

  if (_internal_has_pointcloud()) {
    // required .civ.civloc.ChanelConfig pointcloud = 18;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pointcloud_);
  }

  if (_internal_has_zloc_fuse()) {
    // required .civ.civloc.ChanelConfig zloc_fuse = 22;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *zloc_fuse_);
  }

  if (_internal_has_forward_cfg()) {
    // required .civ.civloc.ChanelConfig forward_cfg = 23;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *forward_cfg_);
  }

  return total_size;
}
size_t CivLocConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:civ.civloc.CivLocConfig)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x000018ff) ^ 0x000018ff) == 0) {  // All required fields are present.
    // required string version = 1 [default = "zloc_component config 1.0.0"];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version());

    // required .civ.civloc.ChanelConfig chassis = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *chassis_);

    // required .civ.civloc.ChanelConfig cgi610 = 12;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cgi610_);

    // required .civ.civloc.ChanelConfig raw_cgi610_bestpos = 13;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *raw_cgi610_bestpos_);

    // required .civ.civloc.ChanelConfig raw_cgi610_bestvel = 14;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *raw_cgi610_bestvel_);

    // required .civ.civloc.ChanelConfig raw_cgi610_heading2 = 15;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *raw_cgi610_heading2_);

    // required .civ.civloc.ChanelConfig raw_wheeltec_imu = 16;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *raw_wheeltec_imu_);

    // required .civ.civloc.ChanelConfig pointcloud = 18;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pointcloud_);

    // required .civ.civloc.ChanelConfig zloc_fuse = 22;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *zloc_fuse_);

    // required .civ.civloc.ChanelConfig forward_cfg = 23;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *forward_cfg_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .civ.civloc.PerceptionChanelConfig perception = 17;
  total_size += 2UL * this->_internal_perception_size();
  for (const auto& msg : this->perception_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000700u) {
    // optional .civ.civloc.ChanelConfig pointcloud_map = 19;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *pointcloud_map_);
    }

    // optional .civ.civloc.ChanelConfig zloc_map = 20;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *zloc_map_);
    }

    // optional .civ.civloc.ChanelConfig cpt7 = 21;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *cpt7_);
    }

  }
  // optional .civ.civloc.CivLocConfig.WorkMode mode = 2 [default = Forward];
  if (cached_has_bits & 0x00002000u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_mode());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CivLocConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:civ.civloc.CivLocConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const CivLocConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CivLocConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:civ.civloc.CivLocConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:civ.civloc.CivLocConfig)
    MergeFrom(*source);
  }
}

void CivLocConfig::MergeFrom(const CivLocConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:civ.civloc.CivLocConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  perception_.MergeFrom(from.perception_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_version(from._internal_version());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_chassis()->::civ::civloc::ChanelConfig::MergeFrom(from._internal_chassis());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_cgi610()->::civ::civloc::ChanelConfig::MergeFrom(from._internal_cgi610());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_raw_cgi610_bestpos()->::civ::civloc::ChanelConfig::MergeFrom(from._internal_raw_cgi610_bestpos());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_raw_cgi610_bestvel()->::civ::civloc::ChanelConfig::MergeFrom(from._internal_raw_cgi610_bestvel());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_raw_cgi610_heading2()->::civ::civloc::ChanelConfig::MergeFrom(from._internal_raw_cgi610_heading2());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_raw_wheeltec_imu()->::civ::civloc::ChanelConfig::MergeFrom(from._internal_raw_wheeltec_imu());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_pointcloud()->::civ::civloc::ChanelConfig::MergeFrom(from._internal_pointcloud());
    }
  }
  if (cached_has_bits & 0x00003f00u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_mutable_pointcloud_map()->::civ::civloc::ChanelConfig::MergeFrom(from._internal_pointcloud_map());
    }
    if (cached_has_bits & 0x00000200u) {
      _internal_mutable_zloc_map()->::civ::civloc::ChanelConfig::MergeFrom(from._internal_zloc_map());
    }
    if (cached_has_bits & 0x00000400u) {
      _internal_mutable_cpt7()->::civ::civloc::ChanelConfig::MergeFrom(from._internal_cpt7());
    }
    if (cached_has_bits & 0x00000800u) {
      _internal_mutable_zloc_fuse()->::civ::civloc::ChanelConfig::MergeFrom(from._internal_zloc_fuse());
    }
    if (cached_has_bits & 0x00001000u) {
      _internal_mutable_forward_cfg()->::civ::civloc::ChanelConfig::MergeFrom(from._internal_forward_cfg());
    }
    if (cached_has_bits & 0x00002000u) {
      mode_ = from.mode_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CivLocConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:civ.civloc.CivLocConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CivLocConfig::CopyFrom(const CivLocConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:civ.civloc.CivLocConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CivLocConfig::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void CivLocConfig::InternalSwap(CivLocConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  perception_.InternalSwap(&other->perception_);
  version_.Swap(&other->version_, nullptr, GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CivLocConfig, mode_)
      + sizeof(CivLocConfig::mode_)
      - PROTOBUF_FIELD_OFFSET(CivLocConfig, chassis_)>(
          reinterpret_cast<char*>(&chassis_),
          reinterpret_cast<char*>(&other->chassis_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CivLocConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace civloc
}  // namespace civ
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::civ::civloc::PerceptionChanelConfig* Arena::CreateMaybeMessage< ::civ::civloc::PerceptionChanelConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::civ::civloc::PerceptionChanelConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::civ::civloc::TFConfig* Arena::CreateMaybeMessage< ::civ::civloc::TFConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::civ::civloc::TFConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::civ::civloc::ChanelConfig* Arena::CreateMaybeMessage< ::civ::civloc::ChanelConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::civ::civloc::ChanelConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::civ::civloc::CivLocConfig* Arena::CreateMaybeMessage< ::civ::civloc::CivLocConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::civ::civloc::CivLocConfig >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
