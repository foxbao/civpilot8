// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: civloc/proto/locator.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_civloc_2fproto_2flocator_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_civloc_2fproto_2flocator_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_civloc_2fproto_2flocator_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_civloc_2fproto_2flocator_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[16]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_civloc_2fproto_2flocator_2eproto;
namespace civ {
namespace civloc {
class CacherConfig;
class CacherConfigDefaultTypeInternal;
extern CacherConfigDefaultTypeInternal _CacherConfig_default_instance_;
class DetectConfig;
class DetectConfigDefaultTypeInternal;
extern DetectConfigDefaultTypeInternal _DetectConfig_default_instance_;
class FilterPara;
class FilterParaDefaultTypeInternal;
extern FilterParaDefaultTypeInternal _FilterPara_default_instance_;
class FuseConfig;
class FuseConfigDefaultTypeInternal;
extern FuseConfigDefaultTypeInternal _FuseConfig_default_instance_;
class GnssFilterConfig;
class GnssFilterConfigDefaultTypeInternal;
extern GnssFilterConfigDefaultTypeInternal _GnssFilterConfig_default_instance_;
class IOConfig;
class IOConfigDefaultTypeInternal;
extern IOConfigDefaultTypeInternal _IOConfig_default_instance_;
class LidarFilterConfig;
class LidarFilterConfigDefaultTypeInternal;
extern LidarFilterConfigDefaultTypeInternal _LidarFilterConfig_default_instance_;
class LidarMatchConfig;
class LidarMatchConfigDefaultTypeInternal;
extern LidarMatchConfigDefaultTypeInternal _LidarMatchConfig_default_instance_;
class LocatorConfig;
class LocatorConfigDefaultTypeInternal;
extern LocatorConfigDefaultTypeInternal _LocatorConfig_default_instance_;
class NDTConfig;
class NDTConfigDefaultTypeInternal;
extern NDTConfigDefaultTypeInternal _NDTConfig_default_instance_;
class PointCloudMapConfig;
class PointCloudMapConfigDefaultTypeInternal;
extern PointCloudMapConfigDefaultTypeInternal _PointCloudMapConfig_default_instance_;
class VehicleModelFilterConfig;
class VehicleModelFilterConfigDefaultTypeInternal;
extern VehicleModelFilterConfigDefaultTypeInternal _VehicleModelFilterConfig_default_instance_;
class VisionFilterConfig;
class VisionFilterConfigDefaultTypeInternal;
extern VisionFilterConfigDefaultTypeInternal _VisionFilterConfig_default_instance_;
class VisionMapConfig;
class VisionMapConfigDefaultTypeInternal;
extern VisionMapConfigDefaultTypeInternal _VisionMapConfig_default_instance_;
class VisionMatchConfig;
class VisionMatchConfigDefaultTypeInternal;
extern VisionMatchConfigDefaultTypeInternal _VisionMatchConfig_default_instance_;
class WheelOdoFilterConfig;
class WheelOdoFilterConfigDefaultTypeInternal;
extern WheelOdoFilterConfigDefaultTypeInternal _WheelOdoFilterConfig_default_instance_;
}  // namespace civloc
}  // namespace civ
PROTOBUF_NAMESPACE_OPEN
template<> ::civ::civloc::CacherConfig* Arena::CreateMaybeMessage<::civ::civloc::CacherConfig>(Arena*);
template<> ::civ::civloc::DetectConfig* Arena::CreateMaybeMessage<::civ::civloc::DetectConfig>(Arena*);
template<> ::civ::civloc::FilterPara* Arena::CreateMaybeMessage<::civ::civloc::FilterPara>(Arena*);
template<> ::civ::civloc::FuseConfig* Arena::CreateMaybeMessage<::civ::civloc::FuseConfig>(Arena*);
template<> ::civ::civloc::GnssFilterConfig* Arena::CreateMaybeMessage<::civ::civloc::GnssFilterConfig>(Arena*);
template<> ::civ::civloc::IOConfig* Arena::CreateMaybeMessage<::civ::civloc::IOConfig>(Arena*);
template<> ::civ::civloc::LidarFilterConfig* Arena::CreateMaybeMessage<::civ::civloc::LidarFilterConfig>(Arena*);
template<> ::civ::civloc::LidarMatchConfig* Arena::CreateMaybeMessage<::civ::civloc::LidarMatchConfig>(Arena*);
template<> ::civ::civloc::LocatorConfig* Arena::CreateMaybeMessage<::civ::civloc::LocatorConfig>(Arena*);
template<> ::civ::civloc::NDTConfig* Arena::CreateMaybeMessage<::civ::civloc::NDTConfig>(Arena*);
template<> ::civ::civloc::PointCloudMapConfig* Arena::CreateMaybeMessage<::civ::civloc::PointCloudMapConfig>(Arena*);
template<> ::civ::civloc::VehicleModelFilterConfig* Arena::CreateMaybeMessage<::civ::civloc::VehicleModelFilterConfig>(Arena*);
template<> ::civ::civloc::VisionFilterConfig* Arena::CreateMaybeMessage<::civ::civloc::VisionFilterConfig>(Arena*);
template<> ::civ::civloc::VisionMapConfig* Arena::CreateMaybeMessage<::civ::civloc::VisionMapConfig>(Arena*);
template<> ::civ::civloc::VisionMatchConfig* Arena::CreateMaybeMessage<::civ::civloc::VisionMatchConfig>(Arena*);
template<> ::civ::civloc::WheelOdoFilterConfig* Arena::CreateMaybeMessage<::civ::civloc::WheelOdoFilterConfig>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace civ {
namespace civloc {

enum FuseConfig_FuseMode : int {
  FuseConfig_FuseMode_ESKF = 0
};
bool FuseConfig_FuseMode_IsValid(int value);
constexpr FuseConfig_FuseMode FuseConfig_FuseMode_FuseMode_MIN = FuseConfig_FuseMode_ESKF;
constexpr FuseConfig_FuseMode FuseConfig_FuseMode_FuseMode_MAX = FuseConfig_FuseMode_ESKF;
constexpr int FuseConfig_FuseMode_FuseMode_ARRAYSIZE = FuseConfig_FuseMode_FuseMode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FuseConfig_FuseMode_descriptor();
template<typename T>
inline const std::string& FuseConfig_FuseMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, FuseConfig_FuseMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function FuseConfig_FuseMode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    FuseConfig_FuseMode_descriptor(), enum_t_value);
}
inline bool FuseConfig_FuseMode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, FuseConfig_FuseMode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<FuseConfig_FuseMode>(
    FuseConfig_FuseMode_descriptor(), name, value);
}
// ===================================================================

class CacherConfig PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:civ.civloc.CacherConfig) */ {
 public:
  inline CacherConfig() : CacherConfig(nullptr) {}
  virtual ~CacherConfig();

  CacherConfig(const CacherConfig& from);
  CacherConfig(CacherConfig&& from) noexcept
    : CacherConfig() {
    *this = ::std::move(from);
  }

  inline CacherConfig& operator=(const CacherConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline CacherConfig& operator=(CacherConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CacherConfig& default_instance();

  static inline const CacherConfig* internal_default_instance() {
    return reinterpret_cast<const CacherConfig*>(
               &_CacherConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CacherConfig& a, CacherConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(CacherConfig* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CacherConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CacherConfig* New() const final {
    return CreateMaybeMessage<CacherConfig>(nullptr);
  }

  CacherConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CacherConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CacherConfig& from);
  void MergeFrom(const CacherConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CacherConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "civ.civloc.CacherConfig";
  }
  protected:
  explicit CacherConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_civloc_2fproto_2flocator_2eproto);
    return ::descriptor_table_civloc_2fproto_2flocator_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMainChannelNameFieldNumber = 3,
    kMaxDelayMsFieldNumber = 1,
    kDurationSFieldNumber = 2,
  };
  // optional string main_channel_name = 3;
  bool has_main_channel_name() const;
  private:
  bool _internal_has_main_channel_name() const;
  public:
  void clear_main_channel_name();
  const std::string& main_channel_name() const;
  void set_main_channel_name(const std::string& value);
  void set_main_channel_name(std::string&& value);
  void set_main_channel_name(const char* value);
  void set_main_channel_name(const char* value, size_t size);
  std::string* mutable_main_channel_name();
  std::string* release_main_channel_name();
  void set_allocated_main_channel_name(std::string* main_channel_name);
  private:
  const std::string& _internal_main_channel_name() const;
  void _internal_set_main_channel_name(const std::string& value);
  std::string* _internal_mutable_main_channel_name();
  public:

  // required float max_delay_ms = 1;
  bool has_max_delay_ms() const;
  private:
  bool _internal_has_max_delay_ms() const;
  public:
  void clear_max_delay_ms();
  float max_delay_ms() const;
  void set_max_delay_ms(float value);
  private:
  float _internal_max_delay_ms() const;
  void _internal_set_max_delay_ms(float value);
  public:

  // required float duration_s = 2;
  bool has_duration_s() const;
  private:
  bool _internal_has_duration_s() const;
  public:
  void clear_duration_s();
  float duration_s() const;
  void set_duration_s(float value);
  private:
  float _internal_duration_s() const;
  void _internal_set_duration_s(float value);
  public:

  // @@protoc_insertion_point(class_scope:civ.civloc.CacherConfig)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr main_channel_name_;
  float max_delay_ms_;
  float duration_s_;
  friend struct ::TableStruct_civloc_2fproto_2flocator_2eproto;
};
// -------------------------------------------------------------------

class FilterPara PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:civ.civloc.FilterPara) */ {
 public:
  inline FilterPara() : FilterPara(nullptr) {}
  virtual ~FilterPara();

  FilterPara(const FilterPara& from);
  FilterPara(FilterPara&& from) noexcept
    : FilterPara() {
    *this = ::std::move(from);
  }

  inline FilterPara& operator=(const FilterPara& from) {
    CopyFrom(from);
    return *this;
  }
  inline FilterPara& operator=(FilterPara&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FilterPara& default_instance();

  static inline const FilterPara* internal_default_instance() {
    return reinterpret_cast<const FilterPara*>(
               &_FilterPara_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(FilterPara& a, FilterPara& b) {
    a.Swap(&b);
  }
  inline void Swap(FilterPara* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FilterPara* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FilterPara* New() const final {
    return CreateMaybeMessage<FilterPara>(nullptr);
  }

  FilterPara* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FilterPara>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FilterPara& from);
  void MergeFrom(const FilterPara& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FilterPara* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "civ.civloc.FilterPara";
  }
  protected:
  explicit FilterPara(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_civloc_2fproto_2flocator_2eproto);
    return ::descriptor_table_civloc_2fproto_2flocator_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInitPosErrorMFieldNumber = 1,
    kInitVelErrorMpsFieldNumber = 2,
    kInitAttErrorDegFieldNumber = 3,
    kInitAccBiasErrorMgFieldNumber = 4,
    kInitGyrBiasErrorDpsFieldNumber = 5,
    kInitQviErrorDegFieldNumber = 6,
    kInitKodErrorFieldNumber = 7,
    kPositionRandomWalkMpshFieldNumber = 8,
    kOdoScaleRandomWalkPshFieldNumber = 9,
    kQvv1RandomWalkDpshFieldNumber = 10,
  };
  // repeated double init_pos_error_m = 1;
  int init_pos_error_m_size() const;
  private:
  int _internal_init_pos_error_m_size() const;
  public:
  void clear_init_pos_error_m();
  private:
  double _internal_init_pos_error_m(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_init_pos_error_m() const;
  void _internal_add_init_pos_error_m(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_init_pos_error_m();
  public:
  double init_pos_error_m(int index) const;
  void set_init_pos_error_m(int index, double value);
  void add_init_pos_error_m(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      init_pos_error_m() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_init_pos_error_m();

  // repeated double init_vel_error_mps = 2;
  int init_vel_error_mps_size() const;
  private:
  int _internal_init_vel_error_mps_size() const;
  public:
  void clear_init_vel_error_mps();
  private:
  double _internal_init_vel_error_mps(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_init_vel_error_mps() const;
  void _internal_add_init_vel_error_mps(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_init_vel_error_mps();
  public:
  double init_vel_error_mps(int index) const;
  void set_init_vel_error_mps(int index, double value);
  void add_init_vel_error_mps(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      init_vel_error_mps() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_init_vel_error_mps();

  // repeated double init_att_error_deg = 3;
  int init_att_error_deg_size() const;
  private:
  int _internal_init_att_error_deg_size() const;
  public:
  void clear_init_att_error_deg();
  private:
  double _internal_init_att_error_deg(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_init_att_error_deg() const;
  void _internal_add_init_att_error_deg(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_init_att_error_deg();
  public:
  double init_att_error_deg(int index) const;
  void set_init_att_error_deg(int index, double value);
  void add_init_att_error_deg(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      init_att_error_deg() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_init_att_error_deg();

  // repeated double init_acc_bias_error_mg = 4;
  int init_acc_bias_error_mg_size() const;
  private:
  int _internal_init_acc_bias_error_mg_size() const;
  public:
  void clear_init_acc_bias_error_mg();
  private:
  double _internal_init_acc_bias_error_mg(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_init_acc_bias_error_mg() const;
  void _internal_add_init_acc_bias_error_mg(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_init_acc_bias_error_mg();
  public:
  double init_acc_bias_error_mg(int index) const;
  void set_init_acc_bias_error_mg(int index, double value);
  void add_init_acc_bias_error_mg(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      init_acc_bias_error_mg() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_init_acc_bias_error_mg();

  // repeated double init_gyr_bias_error_dps = 5;
  int init_gyr_bias_error_dps_size() const;
  private:
  int _internal_init_gyr_bias_error_dps_size() const;
  public:
  void clear_init_gyr_bias_error_dps();
  private:
  double _internal_init_gyr_bias_error_dps(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_init_gyr_bias_error_dps() const;
  void _internal_add_init_gyr_bias_error_dps(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_init_gyr_bias_error_dps();
  public:
  double init_gyr_bias_error_dps(int index) const;
  void set_init_gyr_bias_error_dps(int index, double value);
  void add_init_gyr_bias_error_dps(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      init_gyr_bias_error_dps() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_init_gyr_bias_error_dps();

  // repeated double init_qvi_error_deg = 6;
  int init_qvi_error_deg_size() const;
  private:
  int _internal_init_qvi_error_deg_size() const;
  public:
  void clear_init_qvi_error_deg();
  private:
  double _internal_init_qvi_error_deg(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_init_qvi_error_deg() const;
  void _internal_add_init_qvi_error_deg(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_init_qvi_error_deg();
  public:
  double init_qvi_error_deg(int index) const;
  void set_init_qvi_error_deg(int index, double value);
  void add_init_qvi_error_deg(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      init_qvi_error_deg() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_init_qvi_error_deg();

  // repeated double init_kod_error = 7;
  int init_kod_error_size() const;
  private:
  int _internal_init_kod_error_size() const;
  public:
  void clear_init_kod_error();
  private:
  double _internal_init_kod_error(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_init_kod_error() const;
  void _internal_add_init_kod_error(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_init_kod_error();
  public:
  double init_kod_error(int index) const;
  void set_init_kod_error(int index, double value);
  void add_init_kod_error(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      init_kod_error() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_init_kod_error();

  // repeated double position_random_walk_mpsh = 8;
  int position_random_walk_mpsh_size() const;
  private:
  int _internal_position_random_walk_mpsh_size() const;
  public:
  void clear_position_random_walk_mpsh();
  private:
  double _internal_position_random_walk_mpsh(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_position_random_walk_mpsh() const;
  void _internal_add_position_random_walk_mpsh(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_position_random_walk_mpsh();
  public:
  double position_random_walk_mpsh(int index) const;
  void set_position_random_walk_mpsh(int index, double value);
  void add_position_random_walk_mpsh(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      position_random_walk_mpsh() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_position_random_walk_mpsh();

  // repeated double odo_scale_random_walk_psh = 9;
  int odo_scale_random_walk_psh_size() const;
  private:
  int _internal_odo_scale_random_walk_psh_size() const;
  public:
  void clear_odo_scale_random_walk_psh();
  private:
  double _internal_odo_scale_random_walk_psh(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_odo_scale_random_walk_psh() const;
  void _internal_add_odo_scale_random_walk_psh(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_odo_scale_random_walk_psh();
  public:
  double odo_scale_random_walk_psh(int index) const;
  void set_odo_scale_random_walk_psh(int index, double value);
  void add_odo_scale_random_walk_psh(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      odo_scale_random_walk_psh() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_odo_scale_random_walk_psh();

  // repeated double qvv1_random_walk_dpsh = 10;
  int qvv1_random_walk_dpsh_size() const;
  private:
  int _internal_qvv1_random_walk_dpsh_size() const;
  public:
  void clear_qvv1_random_walk_dpsh();
  private:
  double _internal_qvv1_random_walk_dpsh(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_qvv1_random_walk_dpsh() const;
  void _internal_add_qvv1_random_walk_dpsh(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_qvv1_random_walk_dpsh();
  public:
  double qvv1_random_walk_dpsh(int index) const;
  void set_qvv1_random_walk_dpsh(int index, double value);
  void add_qvv1_random_walk_dpsh(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      qvv1_random_walk_dpsh() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_qvv1_random_walk_dpsh();

  // @@protoc_insertion_point(class_scope:civ.civloc.FilterPara)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > init_pos_error_m_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > init_vel_error_mps_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > init_att_error_deg_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > init_acc_bias_error_mg_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > init_gyr_bias_error_dps_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > init_qvi_error_deg_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > init_kod_error_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > position_random_walk_mpsh_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > odo_scale_random_walk_psh_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > qvv1_random_walk_dpsh_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_civloc_2fproto_2flocator_2eproto;
};
// -------------------------------------------------------------------

class GnssFilterConfig PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:civ.civloc.GnssFilterConfig) */ {
 public:
  inline GnssFilterConfig() : GnssFilterConfig(nullptr) {}
  virtual ~GnssFilterConfig();

  GnssFilterConfig(const GnssFilterConfig& from);
  GnssFilterConfig(GnssFilterConfig&& from) noexcept
    : GnssFilterConfig() {
    *this = ::std::move(from);
  }

  inline GnssFilterConfig& operator=(const GnssFilterConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline GnssFilterConfig& operator=(GnssFilterConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GnssFilterConfig& default_instance();

  static inline const GnssFilterConfig* internal_default_instance() {
    return reinterpret_cast<const GnssFilterConfig*>(
               &_GnssFilterConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(GnssFilterConfig& a, GnssFilterConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(GnssFilterConfig* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GnssFilterConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GnssFilterConfig* New() const final {
    return CreateMaybeMessage<GnssFilterConfig>(nullptr);
  }

  GnssFilterConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GnssFilterConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GnssFilterConfig& from);
  void MergeFrom(const GnssFilterConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GnssFilterConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "civ.civloc.GnssFilterConfig";
  }
  protected:
  explicit GnssFilterConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_civloc_2fproto_2flocator_2eproto);
    return ::descriptor_table_civloc_2fproto_2flocator_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionNoiseMFieldNumber = 3,
    kVelocityNoiseMpsFieldNumber = 4,
    kDualAngleNoiseDegFieldNumber = 6,
    kEnableGnssPosFieldNumber = 1,
    kEnableGnssVelFieldNumber = 2,
    kEnableGnssDualFieldNumber = 5,
    kFarmeJudgeTimeSFieldNumber = 7,
    kMaxChangeRatioFieldNumber = 8,
    kPosStdMUpperLimitFieldNumber = 9,
    kResidualDriftMUpperLimitFieldNumber = 10,
    kHeadingStdDegUpperLimitFieldNumber = 11,
    kHeadingStdDegLowerLimitFieldNumber = 12,
  };
  // repeated double position_noise_m = 3;
  int position_noise_m_size() const;
  private:
  int _internal_position_noise_m_size() const;
  public:
  void clear_position_noise_m();
  private:
  double _internal_position_noise_m(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_position_noise_m() const;
  void _internal_add_position_noise_m(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_position_noise_m();
  public:
  double position_noise_m(int index) const;
  void set_position_noise_m(int index, double value);
  void add_position_noise_m(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      position_noise_m() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_position_noise_m();

  // repeated double velocity_noise_mps = 4;
  int velocity_noise_mps_size() const;
  private:
  int _internal_velocity_noise_mps_size() const;
  public:
  void clear_velocity_noise_mps();
  private:
  double _internal_velocity_noise_mps(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_velocity_noise_mps() const;
  void _internal_add_velocity_noise_mps(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_velocity_noise_mps();
  public:
  double velocity_noise_mps(int index) const;
  void set_velocity_noise_mps(int index, double value);
  void add_velocity_noise_mps(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      velocity_noise_mps() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_velocity_noise_mps();

  // repeated double dual_angle_noise_deg = 6;
  int dual_angle_noise_deg_size() const;
  private:
  int _internal_dual_angle_noise_deg_size() const;
  public:
  void clear_dual_angle_noise_deg();
  private:
  double _internal_dual_angle_noise_deg(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_dual_angle_noise_deg() const;
  void _internal_add_dual_angle_noise_deg(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_dual_angle_noise_deg();
  public:
  double dual_angle_noise_deg(int index) const;
  void set_dual_angle_noise_deg(int index, double value);
  void add_dual_angle_noise_deg(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      dual_angle_noise_deg() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_dual_angle_noise_deg();

  // required bool enable_gnss_pos = 1;
  bool has_enable_gnss_pos() const;
  private:
  bool _internal_has_enable_gnss_pos() const;
  public:
  void clear_enable_gnss_pos();
  bool enable_gnss_pos() const;
  void set_enable_gnss_pos(bool value);
  private:
  bool _internal_enable_gnss_pos() const;
  void _internal_set_enable_gnss_pos(bool value);
  public:

  // required bool enable_gnss_vel = 2;
  bool has_enable_gnss_vel() const;
  private:
  bool _internal_has_enable_gnss_vel() const;
  public:
  void clear_enable_gnss_vel();
  bool enable_gnss_vel() const;
  void set_enable_gnss_vel(bool value);
  private:
  bool _internal_enable_gnss_vel() const;
  void _internal_set_enable_gnss_vel(bool value);
  public:

  // required bool enable_gnss_dual = 5;
  bool has_enable_gnss_dual() const;
  private:
  bool _internal_has_enable_gnss_dual() const;
  public:
  void clear_enable_gnss_dual();
  bool enable_gnss_dual() const;
  void set_enable_gnss_dual(bool value);
  private:
  bool _internal_enable_gnss_dual() const;
  void _internal_set_enable_gnss_dual(bool value);
  public:

  // required float farme_judge_time_s = 7;
  bool has_farme_judge_time_s() const;
  private:
  bool _internal_has_farme_judge_time_s() const;
  public:
  void clear_farme_judge_time_s();
  float farme_judge_time_s() const;
  void set_farme_judge_time_s(float value);
  private:
  float _internal_farme_judge_time_s() const;
  void _internal_set_farme_judge_time_s(float value);
  public:

  // required float max_change_ratio = 8;
  bool has_max_change_ratio() const;
  private:
  bool _internal_has_max_change_ratio() const;
  public:
  void clear_max_change_ratio();
  float max_change_ratio() const;
  void set_max_change_ratio(float value);
  private:
  float _internal_max_change_ratio() const;
  void _internal_set_max_change_ratio(float value);
  public:

  // required float pos_std_m_upper_limit = 9;
  bool has_pos_std_m_upper_limit() const;
  private:
  bool _internal_has_pos_std_m_upper_limit() const;
  public:
  void clear_pos_std_m_upper_limit();
  float pos_std_m_upper_limit() const;
  void set_pos_std_m_upper_limit(float value);
  private:
  float _internal_pos_std_m_upper_limit() const;
  void _internal_set_pos_std_m_upper_limit(float value);
  public:

  // required float residual_drift_m_upper_limit = 10;
  bool has_residual_drift_m_upper_limit() const;
  private:
  bool _internal_has_residual_drift_m_upper_limit() const;
  public:
  void clear_residual_drift_m_upper_limit();
  float residual_drift_m_upper_limit() const;
  void set_residual_drift_m_upper_limit(float value);
  private:
  float _internal_residual_drift_m_upper_limit() const;
  void _internal_set_residual_drift_m_upper_limit(float value);
  public:

  // required float heading_std_deg_upper_limit = 11;
  bool has_heading_std_deg_upper_limit() const;
  private:
  bool _internal_has_heading_std_deg_upper_limit() const;
  public:
  void clear_heading_std_deg_upper_limit();
  float heading_std_deg_upper_limit() const;
  void set_heading_std_deg_upper_limit(float value);
  private:
  float _internal_heading_std_deg_upper_limit() const;
  void _internal_set_heading_std_deg_upper_limit(float value);
  public:

  // required float heading_std_deg_lower_limit = 12;
  bool has_heading_std_deg_lower_limit() const;
  private:
  bool _internal_has_heading_std_deg_lower_limit() const;
  public:
  void clear_heading_std_deg_lower_limit();
  float heading_std_deg_lower_limit() const;
  void set_heading_std_deg_lower_limit(float value);
  private:
  float _internal_heading_std_deg_lower_limit() const;
  void _internal_set_heading_std_deg_lower_limit(float value);
  public:

  // @@protoc_insertion_point(class_scope:civ.civloc.GnssFilterConfig)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > position_noise_m_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > velocity_noise_mps_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > dual_angle_noise_deg_;
  bool enable_gnss_pos_;
  bool enable_gnss_vel_;
  bool enable_gnss_dual_;
  float farme_judge_time_s_;
  float max_change_ratio_;
  float pos_std_m_upper_limit_;
  float residual_drift_m_upper_limit_;
  float heading_std_deg_upper_limit_;
  float heading_std_deg_lower_limit_;
  friend struct ::TableStruct_civloc_2fproto_2flocator_2eproto;
};
// -------------------------------------------------------------------

class VehicleModelFilterConfig PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:civ.civloc.VehicleModelFilterConfig) */ {
 public:
  inline VehicleModelFilterConfig() : VehicleModelFilterConfig(nullptr) {}
  virtual ~VehicleModelFilterConfig();

  VehicleModelFilterConfig(const VehicleModelFilterConfig& from);
  VehicleModelFilterConfig(VehicleModelFilterConfig&& from) noexcept
    : VehicleModelFilterConfig() {
    *this = ::std::move(from);
  }

  inline VehicleModelFilterConfig& operator=(const VehicleModelFilterConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline VehicleModelFilterConfig& operator=(VehicleModelFilterConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VehicleModelFilterConfig& default_instance();

  static inline const VehicleModelFilterConfig* internal_default_instance() {
    return reinterpret_cast<const VehicleModelFilterConfig*>(
               &_VehicleModelFilterConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(VehicleModelFilterConfig& a, VehicleModelFilterConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(VehicleModelFilterConfig* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VehicleModelFilterConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VehicleModelFilterConfig* New() const final {
    return CreateMaybeMessage<VehicleModelFilterConfig>(nullptr);
  }

  VehicleModelFilterConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VehicleModelFilterConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VehicleModelFilterConfig& from);
  void MergeFrom(const VehicleModelFilterConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VehicleModelFilterConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "civ.civloc.VehicleModelFilterConfig";
  }
  protected:
  explicit VehicleModelFilterConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_civloc_2fproto_2flocator_2eproto);
    return ::descriptor_table_civloc_2fproto_2flocator_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNhcNoiseMpsFieldNumber = 10,
    kZuptNoiseMpsFieldNumber = 11,
    kZgbcNoiseDpsFieldNumber = 12,
    kZacNoiseDegFieldNumber = 13,
    kZpcNoiseMFieldNumber = 14,
    kEnableNhcFieldNumber = 1,
    kEnableZuptFieldNumber = 2,
    kEnableZgbcFieldNumber = 3,
    kEnableZpcFieldNumber = 4,
    kEnableZacFieldNumber = 5,
  };
  // repeated double nhc_noise_mps = 10;
  int nhc_noise_mps_size() const;
  private:
  int _internal_nhc_noise_mps_size() const;
  public:
  void clear_nhc_noise_mps();
  private:
  double _internal_nhc_noise_mps(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_nhc_noise_mps() const;
  void _internal_add_nhc_noise_mps(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_nhc_noise_mps();
  public:
  double nhc_noise_mps(int index) const;
  void set_nhc_noise_mps(int index, double value);
  void add_nhc_noise_mps(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      nhc_noise_mps() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_nhc_noise_mps();

  // repeated double zupt_noise_mps = 11;
  int zupt_noise_mps_size() const;
  private:
  int _internal_zupt_noise_mps_size() const;
  public:
  void clear_zupt_noise_mps();
  private:
  double _internal_zupt_noise_mps(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_zupt_noise_mps() const;
  void _internal_add_zupt_noise_mps(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_zupt_noise_mps();
  public:
  double zupt_noise_mps(int index) const;
  void set_zupt_noise_mps(int index, double value);
  void add_zupt_noise_mps(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      zupt_noise_mps() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_zupt_noise_mps();

  // repeated double zgbc_noise_dps = 12;
  int zgbc_noise_dps_size() const;
  private:
  int _internal_zgbc_noise_dps_size() const;
  public:
  void clear_zgbc_noise_dps();
  private:
  double _internal_zgbc_noise_dps(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_zgbc_noise_dps() const;
  void _internal_add_zgbc_noise_dps(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_zgbc_noise_dps();
  public:
  double zgbc_noise_dps(int index) const;
  void set_zgbc_noise_dps(int index, double value);
  void add_zgbc_noise_dps(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      zgbc_noise_dps() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_zgbc_noise_dps();

  // repeated double zac_noise_deg = 13;
  int zac_noise_deg_size() const;
  private:
  int _internal_zac_noise_deg_size() const;
  public:
  void clear_zac_noise_deg();
  private:
  double _internal_zac_noise_deg(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_zac_noise_deg() const;
  void _internal_add_zac_noise_deg(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_zac_noise_deg();
  public:
  double zac_noise_deg(int index) const;
  void set_zac_noise_deg(int index, double value);
  void add_zac_noise_deg(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      zac_noise_deg() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_zac_noise_deg();

  // repeated double zpc_noise_m = 14;
  int zpc_noise_m_size() const;
  private:
  int _internal_zpc_noise_m_size() const;
  public:
  void clear_zpc_noise_m();
  private:
  double _internal_zpc_noise_m(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_zpc_noise_m() const;
  void _internal_add_zpc_noise_m(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_zpc_noise_m();
  public:
  double zpc_noise_m(int index) const;
  void set_zpc_noise_m(int index, double value);
  void add_zpc_noise_m(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      zpc_noise_m() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_zpc_noise_m();

  // required bool enable_nhc = 1;
  bool has_enable_nhc() const;
  private:
  bool _internal_has_enable_nhc() const;
  public:
  void clear_enable_nhc();
  bool enable_nhc() const;
  void set_enable_nhc(bool value);
  private:
  bool _internal_enable_nhc() const;
  void _internal_set_enable_nhc(bool value);
  public:

  // required bool enable_zupt = 2;
  bool has_enable_zupt() const;
  private:
  bool _internal_has_enable_zupt() const;
  public:
  void clear_enable_zupt();
  bool enable_zupt() const;
  void set_enable_zupt(bool value);
  private:
  bool _internal_enable_zupt() const;
  void _internal_set_enable_zupt(bool value);
  public:

  // required bool enable_zgbc = 3;
  bool has_enable_zgbc() const;
  private:
  bool _internal_has_enable_zgbc() const;
  public:
  void clear_enable_zgbc();
  bool enable_zgbc() const;
  void set_enable_zgbc(bool value);
  private:
  bool _internal_enable_zgbc() const;
  void _internal_set_enable_zgbc(bool value);
  public:

  // required bool enable_zpc = 4;
  bool has_enable_zpc() const;
  private:
  bool _internal_has_enable_zpc() const;
  public:
  void clear_enable_zpc();
  bool enable_zpc() const;
  void set_enable_zpc(bool value);
  private:
  bool _internal_enable_zpc() const;
  void _internal_set_enable_zpc(bool value);
  public:

  // required bool enable_zac = 5;
  bool has_enable_zac() const;
  private:
  bool _internal_has_enable_zac() const;
  public:
  void clear_enable_zac();
  bool enable_zac() const;
  void set_enable_zac(bool value);
  private:
  bool _internal_enable_zac() const;
  void _internal_set_enable_zac(bool value);
  public:

  // @@protoc_insertion_point(class_scope:civ.civloc.VehicleModelFilterConfig)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > nhc_noise_mps_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > zupt_noise_mps_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > zgbc_noise_dps_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > zac_noise_deg_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > zpc_noise_m_;
  bool enable_nhc_;
  bool enable_zupt_;
  bool enable_zgbc_;
  bool enable_zpc_;
  bool enable_zac_;
  friend struct ::TableStruct_civloc_2fproto_2flocator_2eproto;
};
// -------------------------------------------------------------------

class WheelOdoFilterConfig PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:civ.civloc.WheelOdoFilterConfig) */ {
 public:
  inline WheelOdoFilterConfig() : WheelOdoFilterConfig(nullptr) {}
  virtual ~WheelOdoFilterConfig();

  WheelOdoFilterConfig(const WheelOdoFilterConfig& from);
  WheelOdoFilterConfig(WheelOdoFilterConfig&& from) noexcept
    : WheelOdoFilterConfig() {
    *this = ::std::move(from);
  }

  inline WheelOdoFilterConfig& operator=(const WheelOdoFilterConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline WheelOdoFilterConfig& operator=(WheelOdoFilterConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WheelOdoFilterConfig& default_instance();

  static inline const WheelOdoFilterConfig* internal_default_instance() {
    return reinterpret_cast<const WheelOdoFilterConfig*>(
               &_WheelOdoFilterConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(WheelOdoFilterConfig& a, WheelOdoFilterConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(WheelOdoFilterConfig* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WheelOdoFilterConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WheelOdoFilterConfig* New() const final {
    return CreateMaybeMessage<WheelOdoFilterConfig>(nullptr);
  }

  WheelOdoFilterConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WheelOdoFilterConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WheelOdoFilterConfig& from);
  void MergeFrom(const WheelOdoFilterConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WheelOdoFilterConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "civ.civloc.WheelOdoFilterConfig";
  }
  protected:
  explicit WheelOdoFilterConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_civloc_2fproto_2flocator_2eproto);
    return ::descriptor_table_civloc_2fproto_2flocator_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRearWheelNoiseMpsFieldNumber = 5,
    kFrontWheelNoiseMpsFieldNumber = 6,
    kRearDiffNoiseMpsFieldNumber = 7,
    kFrontDiffNoiseMpsFieldNumber = 8,
    kEnableRearWheelFieldNumber = 1,
    kEnableFrontWheelFieldNumber = 2,
    kEnableRearDiffFieldNumber = 3,
    kEnableFrontDiffFieldNumber = 4,
  };
  // repeated double rear_wheel_noise_mps = 5;
  int rear_wheel_noise_mps_size() const;
  private:
  int _internal_rear_wheel_noise_mps_size() const;
  public:
  void clear_rear_wheel_noise_mps();
  private:
  double _internal_rear_wheel_noise_mps(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_rear_wheel_noise_mps() const;
  void _internal_add_rear_wheel_noise_mps(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_rear_wheel_noise_mps();
  public:
  double rear_wheel_noise_mps(int index) const;
  void set_rear_wheel_noise_mps(int index, double value);
  void add_rear_wheel_noise_mps(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      rear_wheel_noise_mps() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_rear_wheel_noise_mps();

  // repeated double front_wheel_noise_mps = 6;
  int front_wheel_noise_mps_size() const;
  private:
  int _internal_front_wheel_noise_mps_size() const;
  public:
  void clear_front_wheel_noise_mps();
  private:
  double _internal_front_wheel_noise_mps(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_front_wheel_noise_mps() const;
  void _internal_add_front_wheel_noise_mps(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_front_wheel_noise_mps();
  public:
  double front_wheel_noise_mps(int index) const;
  void set_front_wheel_noise_mps(int index, double value);
  void add_front_wheel_noise_mps(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      front_wheel_noise_mps() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_front_wheel_noise_mps();

  // repeated double rear_diff_noise_mps = 7;
  int rear_diff_noise_mps_size() const;
  private:
  int _internal_rear_diff_noise_mps_size() const;
  public:
  void clear_rear_diff_noise_mps();
  private:
  double _internal_rear_diff_noise_mps(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_rear_diff_noise_mps() const;
  void _internal_add_rear_diff_noise_mps(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_rear_diff_noise_mps();
  public:
  double rear_diff_noise_mps(int index) const;
  void set_rear_diff_noise_mps(int index, double value);
  void add_rear_diff_noise_mps(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      rear_diff_noise_mps() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_rear_diff_noise_mps();

  // repeated double front_diff_noise_mps = 8;
  int front_diff_noise_mps_size() const;
  private:
  int _internal_front_diff_noise_mps_size() const;
  public:
  void clear_front_diff_noise_mps();
  private:
  double _internal_front_diff_noise_mps(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_front_diff_noise_mps() const;
  void _internal_add_front_diff_noise_mps(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_front_diff_noise_mps();
  public:
  double front_diff_noise_mps(int index) const;
  void set_front_diff_noise_mps(int index, double value);
  void add_front_diff_noise_mps(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      front_diff_noise_mps() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_front_diff_noise_mps();

  // required bool enable_rear_wheel = 1;
  bool has_enable_rear_wheel() const;
  private:
  bool _internal_has_enable_rear_wheel() const;
  public:
  void clear_enable_rear_wheel();
  bool enable_rear_wheel() const;
  void set_enable_rear_wheel(bool value);
  private:
  bool _internal_enable_rear_wheel() const;
  void _internal_set_enable_rear_wheel(bool value);
  public:

  // required bool enable_front_wheel = 2;
  bool has_enable_front_wheel() const;
  private:
  bool _internal_has_enable_front_wheel() const;
  public:
  void clear_enable_front_wheel();
  bool enable_front_wheel() const;
  void set_enable_front_wheel(bool value);
  private:
  bool _internal_enable_front_wheel() const;
  void _internal_set_enable_front_wheel(bool value);
  public:

  // required bool enable_rear_diff = 3;
  bool has_enable_rear_diff() const;
  private:
  bool _internal_has_enable_rear_diff() const;
  public:
  void clear_enable_rear_diff();
  bool enable_rear_diff() const;
  void set_enable_rear_diff(bool value);
  private:
  bool _internal_enable_rear_diff() const;
  void _internal_set_enable_rear_diff(bool value);
  public:

  // required bool enable_front_diff = 4;
  bool has_enable_front_diff() const;
  private:
  bool _internal_has_enable_front_diff() const;
  public:
  void clear_enable_front_diff();
  bool enable_front_diff() const;
  void set_enable_front_diff(bool value);
  private:
  bool _internal_enable_front_diff() const;
  void _internal_set_enable_front_diff(bool value);
  public:

  // @@protoc_insertion_point(class_scope:civ.civloc.WheelOdoFilterConfig)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > rear_wheel_noise_mps_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > front_wheel_noise_mps_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > rear_diff_noise_mps_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > front_diff_noise_mps_;
  bool enable_rear_wheel_;
  bool enable_front_wheel_;
  bool enable_rear_diff_;
  bool enable_front_diff_;
  friend struct ::TableStruct_civloc_2fproto_2flocator_2eproto;
};
// -------------------------------------------------------------------

class NDTConfig PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:civ.civloc.NDTConfig) */ {
 public:
  inline NDTConfig() : NDTConfig(nullptr) {}
  virtual ~NDTConfig();

  NDTConfig(const NDTConfig& from);
  NDTConfig(NDTConfig&& from) noexcept
    : NDTConfig() {
    *this = ::std::move(from);
  }

  inline NDTConfig& operator=(const NDTConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline NDTConfig& operator=(NDTConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NDTConfig& default_instance();

  static inline const NDTConfig* internal_default_instance() {
    return reinterpret_cast<const NDTConfig*>(
               &_NDTConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(NDTConfig& a, NDTConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(NDTConfig* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NDTConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NDTConfig* New() const final {
    return CreateMaybeMessage<NDTConfig>(nullptr);
  }

  NDTConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NDTConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NDTConfig& from);
  void MergeFrom(const NDTConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NDTConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "civ.civloc.NDTConfig";
  }
  protected:
  explicit NDTConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_civloc_2fproto_2flocator_2eproto);
    return ::descriptor_table_civloc_2fproto_2flocator_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOnlineScanVoxelMFieldNumber = 8,
    kLocalMapVoxelMFieldNumber = 9,
    kResMFieldNumber = 1,
    kStepSizeMFieldNumber = 2,
    kTransEpsMFieldNumber = 3,
    kRotEpsDegFieldNumber = 4,
    kMaxIterFieldNumber = 5,
    kScoreThresholdFieldNumber = 6,
    kTransferProbThresholdFieldNumber = 7,
  };
  // repeated double online_scan_voxel_m = 8;
  int online_scan_voxel_m_size() const;
  private:
  int _internal_online_scan_voxel_m_size() const;
  public:
  void clear_online_scan_voxel_m();
  private:
  double _internal_online_scan_voxel_m(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_online_scan_voxel_m() const;
  void _internal_add_online_scan_voxel_m(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_online_scan_voxel_m();
  public:
  double online_scan_voxel_m(int index) const;
  void set_online_scan_voxel_m(int index, double value);
  void add_online_scan_voxel_m(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      online_scan_voxel_m() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_online_scan_voxel_m();

  // repeated double local_map_voxel_m = 9;
  int local_map_voxel_m_size() const;
  private:
  int _internal_local_map_voxel_m_size() const;
  public:
  void clear_local_map_voxel_m();
  private:
  double _internal_local_map_voxel_m(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_local_map_voxel_m() const;
  void _internal_add_local_map_voxel_m(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_local_map_voxel_m();
  public:
  double local_map_voxel_m(int index) const;
  void set_local_map_voxel_m(int index, double value);
  void add_local_map_voxel_m(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      local_map_voxel_m() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_local_map_voxel_m();

  // required double res_m = 1;
  bool has_res_m() const;
  private:
  bool _internal_has_res_m() const;
  public:
  void clear_res_m();
  double res_m() const;
  void set_res_m(double value);
  private:
  double _internal_res_m() const;
  void _internal_set_res_m(double value);
  public:

  // required double step_size_m = 2;
  bool has_step_size_m() const;
  private:
  bool _internal_has_step_size_m() const;
  public:
  void clear_step_size_m();
  double step_size_m() const;
  void set_step_size_m(double value);
  private:
  double _internal_step_size_m() const;
  void _internal_set_step_size_m(double value);
  public:

  // required double trans_eps_m = 3;
  bool has_trans_eps_m() const;
  private:
  bool _internal_has_trans_eps_m() const;
  public:
  void clear_trans_eps_m();
  double trans_eps_m() const;
  void set_trans_eps_m(double value);
  private:
  double _internal_trans_eps_m() const;
  void _internal_set_trans_eps_m(double value);
  public:

  // required double rot_eps_deg = 4;
  bool has_rot_eps_deg() const;
  private:
  bool _internal_has_rot_eps_deg() const;
  public:
  void clear_rot_eps_deg();
  double rot_eps_deg() const;
  void set_rot_eps_deg(double value);
  private:
  double _internal_rot_eps_deg() const;
  void _internal_set_rot_eps_deg(double value);
  public:

  // required double max_iter = 5;
  bool has_max_iter() const;
  private:
  bool _internal_has_max_iter() const;
  public:
  void clear_max_iter();
  double max_iter() const;
  void set_max_iter(double value);
  private:
  double _internal_max_iter() const;
  void _internal_set_max_iter(double value);
  public:

  // required double score_threshold = 6;
  bool has_score_threshold() const;
  private:
  bool _internal_has_score_threshold() const;
  public:
  void clear_score_threshold();
  double score_threshold() const;
  void set_score_threshold(double value);
  private:
  double _internal_score_threshold() const;
  void _internal_set_score_threshold(double value);
  public:

  // required double transfer_prob_threshold = 7;
  bool has_transfer_prob_threshold() const;
  private:
  bool _internal_has_transfer_prob_threshold() const;
  public:
  void clear_transfer_prob_threshold();
  double transfer_prob_threshold() const;
  void set_transfer_prob_threshold(double value);
  private:
  double _internal_transfer_prob_threshold() const;
  void _internal_set_transfer_prob_threshold(double value);
  public:

  // @@protoc_insertion_point(class_scope:civ.civloc.NDTConfig)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > online_scan_voxel_m_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > local_map_voxel_m_;
  double res_m_;
  double step_size_m_;
  double trans_eps_m_;
  double rot_eps_deg_;
  double max_iter_;
  double score_threshold_;
  double transfer_prob_threshold_;
  friend struct ::TableStruct_civloc_2fproto_2flocator_2eproto;
};
// -------------------------------------------------------------------

class LidarFilterConfig PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:civ.civloc.LidarFilterConfig) */ {
 public:
  inline LidarFilterConfig() : LidarFilterConfig(nullptr) {}
  virtual ~LidarFilterConfig();

  LidarFilterConfig(const LidarFilterConfig& from);
  LidarFilterConfig(LidarFilterConfig&& from) noexcept
    : LidarFilterConfig() {
    *this = ::std::move(from);
  }

  inline LidarFilterConfig& operator=(const LidarFilterConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline LidarFilterConfig& operator=(LidarFilterConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LidarFilterConfig& default_instance();

  static inline const LidarFilterConfig* internal_default_instance() {
    return reinterpret_cast<const LidarFilterConfig*>(
               &_LidarFilterConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(LidarFilterConfig& a, LidarFilterConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(LidarFilterConfig* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LidarFilterConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LidarFilterConfig* New() const final {
    return CreateMaybeMessage<LidarFilterConfig>(nullptr);
  }

  LidarFilterConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LidarFilterConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LidarFilterConfig& from);
  void MergeFrom(const LidarFilterConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LidarFilterConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "civ.civloc.LidarFilterConfig";
  }
  protected:
  explicit LidarFilterConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_civloc_2fproto_2flocator_2eproto);
    return ::descriptor_table_civloc_2fproto_2flocator_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNdtMapMatchTransferProbThresholdFieldNumber = 3,
    kNdtMapMatchScoreThresholdFieldNumber = 4,
    kNdtMapMatchNiceNoiseMpsFieldNumber = 5,
    kNdtMapMatchBadNoiseMpsFieldNumber = 6,
    kNdtFrameMatchNoiseMpsFieldNumber = 7,
    kEnableNdtMapMatchFieldNumber = 1,
    kEnableNdtFrameMatchFieldNumber = 2,
  };
  // repeated double ndt_map_match_transfer_prob_threshold = 3;
  int ndt_map_match_transfer_prob_threshold_size() const;
  private:
  int _internal_ndt_map_match_transfer_prob_threshold_size() const;
  public:
  void clear_ndt_map_match_transfer_prob_threshold();
  private:
  double _internal_ndt_map_match_transfer_prob_threshold(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_ndt_map_match_transfer_prob_threshold() const;
  void _internal_add_ndt_map_match_transfer_prob_threshold(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_ndt_map_match_transfer_prob_threshold();
  public:
  double ndt_map_match_transfer_prob_threshold(int index) const;
  void set_ndt_map_match_transfer_prob_threshold(int index, double value);
  void add_ndt_map_match_transfer_prob_threshold(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      ndt_map_match_transfer_prob_threshold() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_ndt_map_match_transfer_prob_threshold();

  // repeated double ndt_map_match_score_threshold = 4;
  int ndt_map_match_score_threshold_size() const;
  private:
  int _internal_ndt_map_match_score_threshold_size() const;
  public:
  void clear_ndt_map_match_score_threshold();
  private:
  double _internal_ndt_map_match_score_threshold(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_ndt_map_match_score_threshold() const;
  void _internal_add_ndt_map_match_score_threshold(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_ndt_map_match_score_threshold();
  public:
  double ndt_map_match_score_threshold(int index) const;
  void set_ndt_map_match_score_threshold(int index, double value);
  void add_ndt_map_match_score_threshold(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      ndt_map_match_score_threshold() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_ndt_map_match_score_threshold();

  // repeated double ndt_map_match_nice_noise_mps = 5;
  int ndt_map_match_nice_noise_mps_size() const;
  private:
  int _internal_ndt_map_match_nice_noise_mps_size() const;
  public:
  void clear_ndt_map_match_nice_noise_mps();
  private:
  double _internal_ndt_map_match_nice_noise_mps(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_ndt_map_match_nice_noise_mps() const;
  void _internal_add_ndt_map_match_nice_noise_mps(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_ndt_map_match_nice_noise_mps();
  public:
  double ndt_map_match_nice_noise_mps(int index) const;
  void set_ndt_map_match_nice_noise_mps(int index, double value);
  void add_ndt_map_match_nice_noise_mps(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      ndt_map_match_nice_noise_mps() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_ndt_map_match_nice_noise_mps();

  // repeated double ndt_map_match_bad_noise_mps = 6;
  int ndt_map_match_bad_noise_mps_size() const;
  private:
  int _internal_ndt_map_match_bad_noise_mps_size() const;
  public:
  void clear_ndt_map_match_bad_noise_mps();
  private:
  double _internal_ndt_map_match_bad_noise_mps(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_ndt_map_match_bad_noise_mps() const;
  void _internal_add_ndt_map_match_bad_noise_mps(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_ndt_map_match_bad_noise_mps();
  public:
  double ndt_map_match_bad_noise_mps(int index) const;
  void set_ndt_map_match_bad_noise_mps(int index, double value);
  void add_ndt_map_match_bad_noise_mps(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      ndt_map_match_bad_noise_mps() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_ndt_map_match_bad_noise_mps();

  // repeated double ndt_frame_match_noise_mps = 7;
  int ndt_frame_match_noise_mps_size() const;
  private:
  int _internal_ndt_frame_match_noise_mps_size() const;
  public:
  void clear_ndt_frame_match_noise_mps();
  private:
  double _internal_ndt_frame_match_noise_mps(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_ndt_frame_match_noise_mps() const;
  void _internal_add_ndt_frame_match_noise_mps(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_ndt_frame_match_noise_mps();
  public:
  double ndt_frame_match_noise_mps(int index) const;
  void set_ndt_frame_match_noise_mps(int index, double value);
  void add_ndt_frame_match_noise_mps(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      ndt_frame_match_noise_mps() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_ndt_frame_match_noise_mps();

  // required bool enable_ndt_map_match = 1;
  bool has_enable_ndt_map_match() const;
  private:
  bool _internal_has_enable_ndt_map_match() const;
  public:
  void clear_enable_ndt_map_match();
  bool enable_ndt_map_match() const;
  void set_enable_ndt_map_match(bool value);
  private:
  bool _internal_enable_ndt_map_match() const;
  void _internal_set_enable_ndt_map_match(bool value);
  public:

  // required bool enable_ndt_frame_match = 2;
  bool has_enable_ndt_frame_match() const;
  private:
  bool _internal_has_enable_ndt_frame_match() const;
  public:
  void clear_enable_ndt_frame_match();
  bool enable_ndt_frame_match() const;
  void set_enable_ndt_frame_match(bool value);
  private:
  bool _internal_enable_ndt_frame_match() const;
  void _internal_set_enable_ndt_frame_match(bool value);
  public:

  // @@protoc_insertion_point(class_scope:civ.civloc.LidarFilterConfig)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > ndt_map_match_transfer_prob_threshold_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > ndt_map_match_score_threshold_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > ndt_map_match_nice_noise_mps_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > ndt_map_match_bad_noise_mps_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > ndt_frame_match_noise_mps_;
  bool enable_ndt_map_match_;
  bool enable_ndt_frame_match_;
  friend struct ::TableStruct_civloc_2fproto_2flocator_2eproto;
};
// -------------------------------------------------------------------

class VisionFilterConfig PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:civ.civloc.VisionFilterConfig) */ {
 public:
  inline VisionFilterConfig() : VisionFilterConfig(nullptr) {}
  virtual ~VisionFilterConfig();

  VisionFilterConfig(const VisionFilterConfig& from);
  VisionFilterConfig(VisionFilterConfig&& from) noexcept
    : VisionFilterConfig() {
    *this = ::std::move(from);
  }

  inline VisionFilterConfig& operator=(const VisionFilterConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline VisionFilterConfig& operator=(VisionFilterConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VisionFilterConfig& default_instance();

  static inline const VisionFilterConfig* internal_default_instance() {
    return reinterpret_cast<const VisionFilterConfig*>(
               &_VisionFilterConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(VisionFilterConfig& a, VisionFilterConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(VisionFilterConfig* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VisionFilterConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VisionFilterConfig* New() const final {
    return CreateMaybeMessage<VisionFilterConfig>(nullptr);
  }

  VisionFilterConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VisionFilterConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VisionFilterConfig& from);
  void MergeFrom(const VisionFilterConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VisionFilterConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "civ.civloc.VisionFilterConfig";
  }
  protected:
  explicit VisionFilterConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_civloc_2fproto_2flocator_2eproto);
    return ::descriptor_table_civloc_2fproto_2flocator_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVisionNoiseMpsFieldNumber = 5,
    kPercRangeMFieldNumber = 6,
    kValidMeanMatchDistMFieldNumber = 7,
    kValidMatchPointDistMFieldNumber = 8,
    kEnableBevLineFieldNumber = 1,
    kEnableBevCubicCurvFieldNumber = 2,
    kEnablePixelLineFieldNumber = 3,
    kEnablePixelCubicCurvFieldNumber = 4,
  };
  // repeated double vision_noise_mps = 5;
  int vision_noise_mps_size() const;
  private:
  int _internal_vision_noise_mps_size() const;
  public:
  void clear_vision_noise_mps();
  private:
  double _internal_vision_noise_mps(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_vision_noise_mps() const;
  void _internal_add_vision_noise_mps(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_vision_noise_mps();
  public:
  double vision_noise_mps(int index) const;
  void set_vision_noise_mps(int index, double value);
  void add_vision_noise_mps(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      vision_noise_mps() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_vision_noise_mps();

  // repeated double perc_range_m = 6;
  int perc_range_m_size() const;
  private:
  int _internal_perc_range_m_size() const;
  public:
  void clear_perc_range_m();
  private:
  double _internal_perc_range_m(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_perc_range_m() const;
  void _internal_add_perc_range_m(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_perc_range_m();
  public:
  double perc_range_m(int index) const;
  void set_perc_range_m(int index, double value);
  void add_perc_range_m(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      perc_range_m() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_perc_range_m();

  // required double valid_mean_match_dist_m = 7;
  bool has_valid_mean_match_dist_m() const;
  private:
  bool _internal_has_valid_mean_match_dist_m() const;
  public:
  void clear_valid_mean_match_dist_m();
  double valid_mean_match_dist_m() const;
  void set_valid_mean_match_dist_m(double value);
  private:
  double _internal_valid_mean_match_dist_m() const;
  void _internal_set_valid_mean_match_dist_m(double value);
  public:

  // required double valid_match_point_dist_m = 8;
  bool has_valid_match_point_dist_m() const;
  private:
  bool _internal_has_valid_match_point_dist_m() const;
  public:
  void clear_valid_match_point_dist_m();
  double valid_match_point_dist_m() const;
  void set_valid_match_point_dist_m(double value);
  private:
  double _internal_valid_match_point_dist_m() const;
  void _internal_set_valid_match_point_dist_m(double value);
  public:

  // required bool enable_bev_line = 1;
  bool has_enable_bev_line() const;
  private:
  bool _internal_has_enable_bev_line() const;
  public:
  void clear_enable_bev_line();
  bool enable_bev_line() const;
  void set_enable_bev_line(bool value);
  private:
  bool _internal_enable_bev_line() const;
  void _internal_set_enable_bev_line(bool value);
  public:

  // required bool enable_bev_cubic_curv = 2;
  bool has_enable_bev_cubic_curv() const;
  private:
  bool _internal_has_enable_bev_cubic_curv() const;
  public:
  void clear_enable_bev_cubic_curv();
  bool enable_bev_cubic_curv() const;
  void set_enable_bev_cubic_curv(bool value);
  private:
  bool _internal_enable_bev_cubic_curv() const;
  void _internal_set_enable_bev_cubic_curv(bool value);
  public:

  // required bool enable_pixel_line = 3;
  bool has_enable_pixel_line() const;
  private:
  bool _internal_has_enable_pixel_line() const;
  public:
  void clear_enable_pixel_line();
  bool enable_pixel_line() const;
  void set_enable_pixel_line(bool value);
  private:
  bool _internal_enable_pixel_line() const;
  void _internal_set_enable_pixel_line(bool value);
  public:

  // required bool enable_pixel_cubic_curv = 4;
  bool has_enable_pixel_cubic_curv() const;
  private:
  bool _internal_has_enable_pixel_cubic_curv() const;
  public:
  void clear_enable_pixel_cubic_curv();
  bool enable_pixel_cubic_curv() const;
  void set_enable_pixel_cubic_curv(bool value);
  private:
  bool _internal_enable_pixel_cubic_curv() const;
  void _internal_set_enable_pixel_cubic_curv(bool value);
  public:

  // @@protoc_insertion_point(class_scope:civ.civloc.VisionFilterConfig)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > vision_noise_mps_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > perc_range_m_;
  double valid_mean_match_dist_m_;
  double valid_match_point_dist_m_;
  bool enable_bev_line_;
  bool enable_bev_cubic_curv_;
  bool enable_pixel_line_;
  bool enable_pixel_cubic_curv_;
  friend struct ::TableStruct_civloc_2fproto_2flocator_2eproto;
};
// -------------------------------------------------------------------

class FuseConfig PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:civ.civloc.FuseConfig) */ {
 public:
  inline FuseConfig() : FuseConfig(nullptr) {}
  virtual ~FuseConfig();

  FuseConfig(const FuseConfig& from);
  FuseConfig(FuseConfig&& from) noexcept
    : FuseConfig() {
    *this = ::std::move(from);
  }

  inline FuseConfig& operator=(const FuseConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline FuseConfig& operator=(FuseConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FuseConfig& default_instance();

  static inline const FuseConfig* internal_default_instance() {
    return reinterpret_cast<const FuseConfig*>(
               &_FuseConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(FuseConfig& a, FuseConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(FuseConfig* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FuseConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FuseConfig* New() const final {
    return CreateMaybeMessage<FuseConfig>(nullptr);
  }

  FuseConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FuseConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FuseConfig& from);
  void MergeFrom(const FuseConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FuseConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "civ.civloc.FuseConfig";
  }
  protected:
  explicit FuseConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_civloc_2fproto_2flocator_2eproto);
    return ::descriptor_table_civloc_2fproto_2flocator_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef FuseConfig_FuseMode FuseMode;
  static constexpr FuseMode ESKF =
    FuseConfig_FuseMode_ESKF;
  static inline bool FuseMode_IsValid(int value) {
    return FuseConfig_FuseMode_IsValid(value);
  }
  static constexpr FuseMode FuseMode_MIN =
    FuseConfig_FuseMode_FuseMode_MIN;
  static constexpr FuseMode FuseMode_MAX =
    FuseConfig_FuseMode_FuseMode_MAX;
  static constexpr int FuseMode_ARRAYSIZE =
    FuseConfig_FuseMode_FuseMode_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  FuseMode_descriptor() {
    return FuseConfig_FuseMode_descriptor();
  }
  template<typename T>
  static inline const std::string& FuseMode_Name(T enum_t_value) {
    static_assert(::std::is_same<T, FuseMode>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function FuseMode_Name.");
    return FuseConfig_FuseMode_Name(enum_t_value);
  }
  static inline bool FuseMode_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      FuseMode* value) {
    return FuseConfig_FuseMode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kFilterParaFieldNumber = 2,
    kGnssFilterFieldNumber = 3,
    kVmFilterFieldNumber = 4,
    kWheelFilterFieldNumber = 5,
    kLidarFilterFieldNumber = 6,
    kVisionFilterFieldNumber = 7,
    kModeFieldNumber = 1,
    kOnlineEstimationQvv1FieldNumber = 10,
    kOnlineEstimationKoFieldNumber = 20,
  };
  // required .civ.civloc.FilterPara filter_para = 2;
  bool has_filter_para() const;
  private:
  bool _internal_has_filter_para() const;
  public:
  void clear_filter_para();
  const ::civ::civloc::FilterPara& filter_para() const;
  ::civ::civloc::FilterPara* release_filter_para();
  ::civ::civloc::FilterPara* mutable_filter_para();
  void set_allocated_filter_para(::civ::civloc::FilterPara* filter_para);
  private:
  const ::civ::civloc::FilterPara& _internal_filter_para() const;
  ::civ::civloc::FilterPara* _internal_mutable_filter_para();
  public:
  void unsafe_arena_set_allocated_filter_para(
      ::civ::civloc::FilterPara* filter_para);
  ::civ::civloc::FilterPara* unsafe_arena_release_filter_para();

  // required .civ.civloc.GnssFilterConfig gnss_filter = 3;
  bool has_gnss_filter() const;
  private:
  bool _internal_has_gnss_filter() const;
  public:
  void clear_gnss_filter();
  const ::civ::civloc::GnssFilterConfig& gnss_filter() const;
  ::civ::civloc::GnssFilterConfig* release_gnss_filter();
  ::civ::civloc::GnssFilterConfig* mutable_gnss_filter();
  void set_allocated_gnss_filter(::civ::civloc::GnssFilterConfig* gnss_filter);
  private:
  const ::civ::civloc::GnssFilterConfig& _internal_gnss_filter() const;
  ::civ::civloc::GnssFilterConfig* _internal_mutable_gnss_filter();
  public:
  void unsafe_arena_set_allocated_gnss_filter(
      ::civ::civloc::GnssFilterConfig* gnss_filter);
  ::civ::civloc::GnssFilterConfig* unsafe_arena_release_gnss_filter();

  // required .civ.civloc.VehicleModelFilterConfig vm_filter = 4;
  bool has_vm_filter() const;
  private:
  bool _internal_has_vm_filter() const;
  public:
  void clear_vm_filter();
  const ::civ::civloc::VehicleModelFilterConfig& vm_filter() const;
  ::civ::civloc::VehicleModelFilterConfig* release_vm_filter();
  ::civ::civloc::VehicleModelFilterConfig* mutable_vm_filter();
  void set_allocated_vm_filter(::civ::civloc::VehicleModelFilterConfig* vm_filter);
  private:
  const ::civ::civloc::VehicleModelFilterConfig& _internal_vm_filter() const;
  ::civ::civloc::VehicleModelFilterConfig* _internal_mutable_vm_filter();
  public:
  void unsafe_arena_set_allocated_vm_filter(
      ::civ::civloc::VehicleModelFilterConfig* vm_filter);
  ::civ::civloc::VehicleModelFilterConfig* unsafe_arena_release_vm_filter();

  // required .civ.civloc.WheelOdoFilterConfig wheel_filter = 5;
  bool has_wheel_filter() const;
  private:
  bool _internal_has_wheel_filter() const;
  public:
  void clear_wheel_filter();
  const ::civ::civloc::WheelOdoFilterConfig& wheel_filter() const;
  ::civ::civloc::WheelOdoFilterConfig* release_wheel_filter();
  ::civ::civloc::WheelOdoFilterConfig* mutable_wheel_filter();
  void set_allocated_wheel_filter(::civ::civloc::WheelOdoFilterConfig* wheel_filter);
  private:
  const ::civ::civloc::WheelOdoFilterConfig& _internal_wheel_filter() const;
  ::civ::civloc::WheelOdoFilterConfig* _internal_mutable_wheel_filter();
  public:
  void unsafe_arena_set_allocated_wheel_filter(
      ::civ::civloc::WheelOdoFilterConfig* wheel_filter);
  ::civ::civloc::WheelOdoFilterConfig* unsafe_arena_release_wheel_filter();

  // optional .civ.civloc.LidarFilterConfig lidar_filter = 6;
  bool has_lidar_filter() const;
  private:
  bool _internal_has_lidar_filter() const;
  public:
  void clear_lidar_filter();
  const ::civ::civloc::LidarFilterConfig& lidar_filter() const;
  ::civ::civloc::LidarFilterConfig* release_lidar_filter();
  ::civ::civloc::LidarFilterConfig* mutable_lidar_filter();
  void set_allocated_lidar_filter(::civ::civloc::LidarFilterConfig* lidar_filter);
  private:
  const ::civ::civloc::LidarFilterConfig& _internal_lidar_filter() const;
  ::civ::civloc::LidarFilterConfig* _internal_mutable_lidar_filter();
  public:
  void unsafe_arena_set_allocated_lidar_filter(
      ::civ::civloc::LidarFilterConfig* lidar_filter);
  ::civ::civloc::LidarFilterConfig* unsafe_arena_release_lidar_filter();

  // required .civ.civloc.VisionFilterConfig vision_filter = 7;
  bool has_vision_filter() const;
  private:
  bool _internal_has_vision_filter() const;
  public:
  void clear_vision_filter();
  const ::civ::civloc::VisionFilterConfig& vision_filter() const;
  ::civ::civloc::VisionFilterConfig* release_vision_filter();
  ::civ::civloc::VisionFilterConfig* mutable_vision_filter();
  void set_allocated_vision_filter(::civ::civloc::VisionFilterConfig* vision_filter);
  private:
  const ::civ::civloc::VisionFilterConfig& _internal_vision_filter() const;
  ::civ::civloc::VisionFilterConfig* _internal_mutable_vision_filter();
  public:
  void unsafe_arena_set_allocated_vision_filter(
      ::civ::civloc::VisionFilterConfig* vision_filter);
  ::civ::civloc::VisionFilterConfig* unsafe_arena_release_vision_filter();

  // required .civ.civloc.FuseConfig.FuseMode mode = 1;
  bool has_mode() const;
  private:
  bool _internal_has_mode() const;
  public:
  void clear_mode();
  ::civ::civloc::FuseConfig_FuseMode mode() const;
  void set_mode(::civ::civloc::FuseConfig_FuseMode value);
  private:
  ::civ::civloc::FuseConfig_FuseMode _internal_mode() const;
  void _internal_set_mode(::civ::civloc::FuseConfig_FuseMode value);
  public:

  // required bool online_estimation_qvv1 = 10;
  bool has_online_estimation_qvv1() const;
  private:
  bool _internal_has_online_estimation_qvv1() const;
  public:
  void clear_online_estimation_qvv1();
  bool online_estimation_qvv1() const;
  void set_online_estimation_qvv1(bool value);
  private:
  bool _internal_online_estimation_qvv1() const;
  void _internal_set_online_estimation_qvv1(bool value);
  public:

  // required bool online_estimation_ko = 20;
  bool has_online_estimation_ko() const;
  private:
  bool _internal_has_online_estimation_ko() const;
  public:
  void clear_online_estimation_ko();
  bool online_estimation_ko() const;
  void set_online_estimation_ko(bool value);
  private:
  bool _internal_online_estimation_ko() const;
  void _internal_set_online_estimation_ko(bool value);
  public:

  // @@protoc_insertion_point(class_scope:civ.civloc.FuseConfig)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::civ::civloc::FilterPara* filter_para_;
  ::civ::civloc::GnssFilterConfig* gnss_filter_;
  ::civ::civloc::VehicleModelFilterConfig* vm_filter_;
  ::civ::civloc::WheelOdoFilterConfig* wheel_filter_;
  ::civ::civloc::LidarFilterConfig* lidar_filter_;
  ::civ::civloc::VisionFilterConfig* vision_filter_;
  int mode_;
  bool online_estimation_qvv1_;
  bool online_estimation_ko_;
  friend struct ::TableStruct_civloc_2fproto_2flocator_2eproto;
};
// -------------------------------------------------------------------

class VisionMapConfig PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:civ.civloc.VisionMapConfig) */ {
 public:
  inline VisionMapConfig() : VisionMapConfig(nullptr) {}
  virtual ~VisionMapConfig();

  VisionMapConfig(const VisionMapConfig& from);
  VisionMapConfig(VisionMapConfig&& from) noexcept
    : VisionMapConfig() {
    *this = ::std::move(from);
  }

  inline VisionMapConfig& operator=(const VisionMapConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline VisionMapConfig& operator=(VisionMapConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VisionMapConfig& default_instance();

  static inline const VisionMapConfig* internal_default_instance() {
    return reinterpret_cast<const VisionMapConfig*>(
               &_VisionMapConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(VisionMapConfig& a, VisionMapConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(VisionMapConfig* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VisionMapConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VisionMapConfig* New() const final {
    return CreateMaybeMessage<VisionMapConfig>(nullptr);
  }

  VisionMapConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VisionMapConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VisionMapConfig& from);
  void MergeFrom(const VisionMapConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VisionMapConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "civ.civloc.VisionMapConfig";
  }
  protected:
  explicit VisionMapConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_civloc_2fproto_2flocator_2eproto);
    return ::descriptor_table_civloc_2fproto_2flocator_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChannelNameFieldNumber = 1,
    kMaxLeafDimensionFieldNumber = 2,
    kBoxHalfWidthMFieldNumber = 4,
    kSearchDistanceMFieldNumber = 5,
    kSampleIntervalMFieldNumber = 6,
    kMaxLeafSizeFieldNumber = 3,
  };
  // required string channel_name = 1;
  bool has_channel_name() const;
  private:
  bool _internal_has_channel_name() const;
  public:
  void clear_channel_name();
  const std::string& channel_name() const;
  void set_channel_name(const std::string& value);
  void set_channel_name(std::string&& value);
  void set_channel_name(const char* value);
  void set_channel_name(const char* value, size_t size);
  std::string* mutable_channel_name();
  std::string* release_channel_name();
  void set_allocated_channel_name(std::string* channel_name);
  private:
  const std::string& _internal_channel_name() const;
  void _internal_set_channel_name(const std::string& value);
  std::string* _internal_mutable_channel_name();
  public:

  // required double max_leaf_dimension = 2;
  bool has_max_leaf_dimension() const;
  private:
  bool _internal_has_max_leaf_dimension() const;
  public:
  void clear_max_leaf_dimension();
  double max_leaf_dimension() const;
  void set_max_leaf_dimension(double value);
  private:
  double _internal_max_leaf_dimension() const;
  void _internal_set_max_leaf_dimension(double value);
  public:

  // required double box_half_width_m = 4;
  bool has_box_half_width_m() const;
  private:
  bool _internal_has_box_half_width_m() const;
  public:
  void clear_box_half_width_m();
  double box_half_width_m() const;
  void set_box_half_width_m(double value);
  private:
  double _internal_box_half_width_m() const;
  void _internal_set_box_half_width_m(double value);
  public:

  // required double search_distance_m = 5;
  bool has_search_distance_m() const;
  private:
  bool _internal_has_search_distance_m() const;
  public:
  void clear_search_distance_m();
  double search_distance_m() const;
  void set_search_distance_m(double value);
  private:
  double _internal_search_distance_m() const;
  void _internal_set_search_distance_m(double value);
  public:

  // required double sample_interval_m = 6;
  bool has_sample_interval_m() const;
  private:
  bool _internal_has_sample_interval_m() const;
  public:
  void clear_sample_interval_m();
  double sample_interval_m() const;
  void set_sample_interval_m(double value);
  private:
  double _internal_sample_interval_m() const;
  void _internal_set_sample_interval_m(double value);
  public:

  // required int32 max_leaf_size = 3;
  bool has_max_leaf_size() const;
  private:
  bool _internal_has_max_leaf_size() const;
  public:
  void clear_max_leaf_size();
  ::PROTOBUF_NAMESPACE_ID::int32 max_leaf_size() const;
  void set_max_leaf_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_max_leaf_size() const;
  void _internal_set_max_leaf_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:civ.civloc.VisionMapConfig)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr channel_name_;
  double max_leaf_dimension_;
  double box_half_width_m_;
  double search_distance_m_;
  double sample_interval_m_;
  ::PROTOBUF_NAMESPACE_ID::int32 max_leaf_size_;
  friend struct ::TableStruct_civloc_2fproto_2flocator_2eproto;
};
// -------------------------------------------------------------------

class PointCloudMapConfig PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:civ.civloc.PointCloudMapConfig) */ {
 public:
  inline PointCloudMapConfig() : PointCloudMapConfig(nullptr) {}
  virtual ~PointCloudMapConfig();

  PointCloudMapConfig(const PointCloudMapConfig& from);
  PointCloudMapConfig(PointCloudMapConfig&& from) noexcept
    : PointCloudMapConfig() {
    *this = ::std::move(from);
  }

  inline PointCloudMapConfig& operator=(const PointCloudMapConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline PointCloudMapConfig& operator=(PointCloudMapConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PointCloudMapConfig& default_instance();

  static inline const PointCloudMapConfig* internal_default_instance() {
    return reinterpret_cast<const PointCloudMapConfig*>(
               &_PointCloudMapConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(PointCloudMapConfig& a, PointCloudMapConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(PointCloudMapConfig* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PointCloudMapConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PointCloudMapConfig* New() const final {
    return CreateMaybeMessage<PointCloudMapConfig>(nullptr);
  }

  PointCloudMapConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PointCloudMapConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PointCloudMapConfig& from);
  void MergeFrom(const PointCloudMapConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PointCloudMapConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "civ.civloc.PointCloudMapConfig";
  }
  protected:
  explicit PointCloudMapConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_civloc_2fproto_2flocator_2eproto);
    return ::descriptor_table_civloc_2fproto_2flocator_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMapPathFieldNumber = 1,
    kMapCfgFileFieldNumber = 3,
    kSearchRadiusMFieldNumber = 2,
  };
  // required string map_path = 1;
  bool has_map_path() const;
  private:
  bool _internal_has_map_path() const;
  public:
  void clear_map_path();
  const std::string& map_path() const;
  void set_map_path(const std::string& value);
  void set_map_path(std::string&& value);
  void set_map_path(const char* value);
  void set_map_path(const char* value, size_t size);
  std::string* mutable_map_path();
  std::string* release_map_path();
  void set_allocated_map_path(std::string* map_path);
  private:
  const std::string& _internal_map_path() const;
  void _internal_set_map_path(const std::string& value);
  std::string* _internal_mutable_map_path();
  public:

  // required string map_cfg_file = 3;
  bool has_map_cfg_file() const;
  private:
  bool _internal_has_map_cfg_file() const;
  public:
  void clear_map_cfg_file();
  const std::string& map_cfg_file() const;
  void set_map_cfg_file(const std::string& value);
  void set_map_cfg_file(std::string&& value);
  void set_map_cfg_file(const char* value);
  void set_map_cfg_file(const char* value, size_t size);
  std::string* mutable_map_cfg_file();
  std::string* release_map_cfg_file();
  void set_allocated_map_cfg_file(std::string* map_cfg_file);
  private:
  const std::string& _internal_map_cfg_file() const;
  void _internal_set_map_cfg_file(const std::string& value);
  std::string* _internal_mutable_map_cfg_file();
  public:

  // optional float search_radius_m = 2 [default = 300];
  bool has_search_radius_m() const;
  private:
  bool _internal_has_search_radius_m() const;
  public:
  void clear_search_radius_m();
  float search_radius_m() const;
  void set_search_radius_m(float value);
  private:
  float _internal_search_radius_m() const;
  void _internal_set_search_radius_m(float value);
  public:

  // @@protoc_insertion_point(class_scope:civ.civloc.PointCloudMapConfig)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr map_path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr map_cfg_file_;
  float search_radius_m_;
  friend struct ::TableStruct_civloc_2fproto_2flocator_2eproto;
};
// -------------------------------------------------------------------

class IOConfig PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:civ.civloc.IOConfig) */ {
 public:
  inline IOConfig() : IOConfig(nullptr) {}
  virtual ~IOConfig();

  IOConfig(const IOConfig& from);
  IOConfig(IOConfig&& from) noexcept
    : IOConfig() {
    *this = ::std::move(from);
  }

  inline IOConfig& operator=(const IOConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline IOConfig& operator=(IOConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IOConfig& default_instance();

  static inline const IOConfig* internal_default_instance() {
    return reinterpret_cast<const IOConfig*>(
               &_IOConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(IOConfig& a, IOConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(IOConfig* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IOConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IOConfig* New() const final {
    return CreateMaybeMessage<IOConfig>(nullptr);
  }

  IOConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IOConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IOConfig& from);
  void MergeFrom(const IOConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IOConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "civ.civloc.IOConfig";
  }
  protected:
  explicit IOConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_civloc_2fproto_2flocator_2eproto);
    return ::descriptor_table_civloc_2fproto_2flocator_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataDirFieldNumber = 1,
  };
  // optional string data_dir = 1;
  bool has_data_dir() const;
  private:
  bool _internal_has_data_dir() const;
  public:
  void clear_data_dir();
  const std::string& data_dir() const;
  void set_data_dir(const std::string& value);
  void set_data_dir(std::string&& value);
  void set_data_dir(const char* value);
  void set_data_dir(const char* value, size_t size);
  std::string* mutable_data_dir();
  std::string* release_data_dir();
  void set_allocated_data_dir(std::string* data_dir);
  private:
  const std::string& _internal_data_dir() const;
  void _internal_set_data_dir(const std::string& value);
  std::string* _internal_mutable_data_dir();
  public:

  // @@protoc_insertion_point(class_scope:civ.civloc.IOConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_dir_;
  friend struct ::TableStruct_civloc_2fproto_2flocator_2eproto;
};
// -------------------------------------------------------------------

class DetectConfig PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:civ.civloc.DetectConfig) */ {
 public:
  inline DetectConfig() : DetectConfig(nullptr) {}
  virtual ~DetectConfig();

  DetectConfig(const DetectConfig& from);
  DetectConfig(DetectConfig&& from) noexcept
    : DetectConfig() {
    *this = ::std::move(from);
  }

  inline DetectConfig& operator=(const DetectConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline DetectConfig& operator=(DetectConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DetectConfig& default_instance();

  static inline const DetectConfig* internal_default_instance() {
    return reinterpret_cast<const DetectConfig*>(
               &_DetectConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(DetectConfig& a, DetectConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(DetectConfig* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DetectConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DetectConfig* New() const final {
    return CreateMaybeMessage<DetectConfig>(nullptr);
  }

  DetectConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DetectConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DetectConfig& from);
  void MergeFrom(const DetectConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DetectConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "civ.civloc.DetectConfig";
  }
  protected:
  explicit DetectConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_civloc_2fproto_2flocator_2eproto);
    return ::descriptor_table_civloc_2fproto_2flocator_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kZeroVelocityDetectorThresholdFieldNumber = 3,
    kSampleRangeTimeFieldNumber = 1,
    kStaticContinuousNumberFieldNumber = 2,
  };
  // repeated double zero_velocity_detector_threshold = 3;
  int zero_velocity_detector_threshold_size() const;
  private:
  int _internal_zero_velocity_detector_threshold_size() const;
  public:
  void clear_zero_velocity_detector_threshold();
  private:
  double _internal_zero_velocity_detector_threshold(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_zero_velocity_detector_threshold() const;
  void _internal_add_zero_velocity_detector_threshold(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_zero_velocity_detector_threshold();
  public:
  double zero_velocity_detector_threshold(int index) const;
  void set_zero_velocity_detector_threshold(int index, double value);
  void add_zero_velocity_detector_threshold(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      zero_velocity_detector_threshold() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_zero_velocity_detector_threshold();

  // required double sample_range_time = 1;
  bool has_sample_range_time() const;
  private:
  bool _internal_has_sample_range_time() const;
  public:
  void clear_sample_range_time();
  double sample_range_time() const;
  void set_sample_range_time(double value);
  private:
  double _internal_sample_range_time() const;
  void _internal_set_sample_range_time(double value);
  public:

  // required int32 static_continuous_number = 2;
  bool has_static_continuous_number() const;
  private:
  bool _internal_has_static_continuous_number() const;
  public:
  void clear_static_continuous_number();
  ::PROTOBUF_NAMESPACE_ID::int32 static_continuous_number() const;
  void set_static_continuous_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_static_continuous_number() const;
  void _internal_set_static_continuous_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:civ.civloc.DetectConfig)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > zero_velocity_detector_threshold_;
  double sample_range_time_;
  ::PROTOBUF_NAMESPACE_ID::int32 static_continuous_number_;
  friend struct ::TableStruct_civloc_2fproto_2flocator_2eproto;
};
// -------------------------------------------------------------------

class LidarMatchConfig PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:civ.civloc.LidarMatchConfig) */ {
 public:
  inline LidarMatchConfig() : LidarMatchConfig(nullptr) {}
  virtual ~LidarMatchConfig();

  LidarMatchConfig(const LidarMatchConfig& from);
  LidarMatchConfig(LidarMatchConfig&& from) noexcept
    : LidarMatchConfig() {
    *this = ::std::move(from);
  }

  inline LidarMatchConfig& operator=(const LidarMatchConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline LidarMatchConfig& operator=(LidarMatchConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LidarMatchConfig& default_instance();

  static inline const LidarMatchConfig* internal_default_instance() {
    return reinterpret_cast<const LidarMatchConfig*>(
               &_LidarMatchConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(LidarMatchConfig& a, LidarMatchConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(LidarMatchConfig* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LidarMatchConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LidarMatchConfig* New() const final {
    return CreateMaybeMessage<LidarMatchConfig>(nullptr);
  }

  LidarMatchConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LidarMatchConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LidarMatchConfig& from);
  void MergeFrom(const LidarMatchConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LidarMatchConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "civ.civloc.LidarMatchConfig";
  }
  protected:
  explicit LidarMatchConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_civloc_2fproto_2flocator_2eproto);
    return ::descriptor_table_civloc_2fproto_2flocator_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOnlineScanRangeMFieldNumber = 2,
    kNdtConfigFieldNumber = 20,
    kEnableLidarFieldNumber = 1,
  };
  // repeated double online_scan_range_m = 2;
  int online_scan_range_m_size() const;
  private:
  int _internal_online_scan_range_m_size() const;
  public:
  void clear_online_scan_range_m();
  private:
  double _internal_online_scan_range_m(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_online_scan_range_m() const;
  void _internal_add_online_scan_range_m(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_online_scan_range_m();
  public:
  double online_scan_range_m(int index) const;
  void set_online_scan_range_m(int index, double value);
  void add_online_scan_range_m(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      online_scan_range_m() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_online_scan_range_m();

  // optional .civ.civloc.NDTConfig ndt_config = 20;
  bool has_ndt_config() const;
  private:
  bool _internal_has_ndt_config() const;
  public:
  void clear_ndt_config();
  const ::civ::civloc::NDTConfig& ndt_config() const;
  ::civ::civloc::NDTConfig* release_ndt_config();
  ::civ::civloc::NDTConfig* mutable_ndt_config();
  void set_allocated_ndt_config(::civ::civloc::NDTConfig* ndt_config);
  private:
  const ::civ::civloc::NDTConfig& _internal_ndt_config() const;
  ::civ::civloc::NDTConfig* _internal_mutable_ndt_config();
  public:
  void unsafe_arena_set_allocated_ndt_config(
      ::civ::civloc::NDTConfig* ndt_config);
  ::civ::civloc::NDTConfig* unsafe_arena_release_ndt_config();

  // required bool enable_lidar = 1 [default = false];
  bool has_enable_lidar() const;
  private:
  bool _internal_has_enable_lidar() const;
  public:
  void clear_enable_lidar();
  bool enable_lidar() const;
  void set_enable_lidar(bool value);
  private:
  bool _internal_enable_lidar() const;
  void _internal_set_enable_lidar(bool value);
  public:

  // @@protoc_insertion_point(class_scope:civ.civloc.LidarMatchConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > online_scan_range_m_;
  ::civ::civloc::NDTConfig* ndt_config_;
  bool enable_lidar_;
  friend struct ::TableStruct_civloc_2fproto_2flocator_2eproto;
};
// -------------------------------------------------------------------

class VisionMatchConfig PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:civ.civloc.VisionMatchConfig) */ {
 public:
  inline VisionMatchConfig() : VisionMatchConfig(nullptr) {}
  virtual ~VisionMatchConfig();

  VisionMatchConfig(const VisionMatchConfig& from);
  VisionMatchConfig(VisionMatchConfig&& from) noexcept
    : VisionMatchConfig() {
    *this = ::std::move(from);
  }

  inline VisionMatchConfig& operator=(const VisionMatchConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline VisionMatchConfig& operator=(VisionMatchConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VisionMatchConfig& default_instance();

  static inline const VisionMatchConfig* internal_default_instance() {
    return reinterpret_cast<const VisionMatchConfig*>(
               &_VisionMatchConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(VisionMatchConfig& a, VisionMatchConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(VisionMatchConfig* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VisionMatchConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VisionMatchConfig* New() const final {
    return CreateMaybeMessage<VisionMatchConfig>(nullptr);
  }

  VisionMatchConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VisionMatchConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VisionMatchConfig& from);
  void MergeFrom(const VisionMatchConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VisionMatchConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "civ.civloc.VisionMatchConfig";
  }
  protected:
  explicit VisionMatchConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_civloc_2fproto_2flocator_2eproto);
    return ::descriptor_table_civloc_2fproto_2flocator_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMatchThresholdMFieldNumber = 2,
    kEnableVisionFieldNumber = 1,
  };
  // required double match_threshold_m = 2;
  bool has_match_threshold_m() const;
  private:
  bool _internal_has_match_threshold_m() const;
  public:
  void clear_match_threshold_m();
  double match_threshold_m() const;
  void set_match_threshold_m(double value);
  private:
  double _internal_match_threshold_m() const;
  void _internal_set_match_threshold_m(double value);
  public:

  // required bool enable_vision = 1;
  bool has_enable_vision() const;
  private:
  bool _internal_has_enable_vision() const;
  public:
  void clear_enable_vision();
  bool enable_vision() const;
  void set_enable_vision(bool value);
  private:
  bool _internal_enable_vision() const;
  void _internal_set_enable_vision(bool value);
  public:

  // @@protoc_insertion_point(class_scope:civ.civloc.VisionMatchConfig)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  double match_threshold_m_;
  bool enable_vision_;
  friend struct ::TableStruct_civloc_2fproto_2flocator_2eproto;
};
// -------------------------------------------------------------------

class LocatorConfig PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:civ.civloc.LocatorConfig) */ {
 public:
  inline LocatorConfig() : LocatorConfig(nullptr) {}
  virtual ~LocatorConfig();

  LocatorConfig(const LocatorConfig& from);
  LocatorConfig(LocatorConfig&& from) noexcept
    : LocatorConfig() {
    *this = ::std::move(from);
  }

  inline LocatorConfig& operator=(const LocatorConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline LocatorConfig& operator=(LocatorConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LocatorConfig& default_instance();

  static inline const LocatorConfig* internal_default_instance() {
    return reinterpret_cast<const LocatorConfig*>(
               &_LocatorConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(LocatorConfig& a, LocatorConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(LocatorConfig* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LocatorConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LocatorConfig* New() const final {
    return CreateMaybeMessage<LocatorConfig>(nullptr);
  }

  LocatorConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LocatorConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LocatorConfig& from);
  void MergeFrom(const LocatorConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LocatorConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "civ.civloc.LocatorConfig";
  }
  protected:
  explicit LocatorConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_civloc_2fproto_2flocator_2eproto);
    return ::descriptor_table_civloc_2fproto_2flocator_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVersionFieldNumber = 1,
    kCacherCfgFieldNumber = 2,
    kVisionmapCfgFieldNumber = 4,
    kIoCfgFieldNumber = 5,
    kPointcloudMapCfgFieldNumber = 6,
    kFuseCfgFieldNumber = 11,
    kDetectCfgFieldNumber = 12,
    kLidarMatchCfgFieldNumber = 13,
    kVisionMatchCfgFieldNumber = 14,
  };
  // required string version = 1 [default = "1.0.0"];
  bool has_version() const;
  private:
  bool _internal_has_version() const;
  public:
  void clear_version();
  const std::string& version() const;
  void set_version(const std::string& value);
  void set_version(std::string&& value);
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  std::string* mutable_version();
  std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // required .civ.civloc.CacherConfig cacher_cfg = 2;
  bool has_cacher_cfg() const;
  private:
  bool _internal_has_cacher_cfg() const;
  public:
  void clear_cacher_cfg();
  const ::civ::civloc::CacherConfig& cacher_cfg() const;
  ::civ::civloc::CacherConfig* release_cacher_cfg();
  ::civ::civloc::CacherConfig* mutable_cacher_cfg();
  void set_allocated_cacher_cfg(::civ::civloc::CacherConfig* cacher_cfg);
  private:
  const ::civ::civloc::CacherConfig& _internal_cacher_cfg() const;
  ::civ::civloc::CacherConfig* _internal_mutable_cacher_cfg();
  public:
  void unsafe_arena_set_allocated_cacher_cfg(
      ::civ::civloc::CacherConfig* cacher_cfg);
  ::civ::civloc::CacherConfig* unsafe_arena_release_cacher_cfg();

  // required .civ.civloc.VisionMapConfig visionmap_cfg = 4;
  bool has_visionmap_cfg() const;
  private:
  bool _internal_has_visionmap_cfg() const;
  public:
  void clear_visionmap_cfg();
  const ::civ::civloc::VisionMapConfig& visionmap_cfg() const;
  ::civ::civloc::VisionMapConfig* release_visionmap_cfg();
  ::civ::civloc::VisionMapConfig* mutable_visionmap_cfg();
  void set_allocated_visionmap_cfg(::civ::civloc::VisionMapConfig* visionmap_cfg);
  private:
  const ::civ::civloc::VisionMapConfig& _internal_visionmap_cfg() const;
  ::civ::civloc::VisionMapConfig* _internal_mutable_visionmap_cfg();
  public:
  void unsafe_arena_set_allocated_visionmap_cfg(
      ::civ::civloc::VisionMapConfig* visionmap_cfg);
  ::civ::civloc::VisionMapConfig* unsafe_arena_release_visionmap_cfg();

  // optional .civ.civloc.IOConfig io_cfg = 5;
  bool has_io_cfg() const;
  private:
  bool _internal_has_io_cfg() const;
  public:
  void clear_io_cfg();
  const ::civ::civloc::IOConfig& io_cfg() const;
  ::civ::civloc::IOConfig* release_io_cfg();
  ::civ::civloc::IOConfig* mutable_io_cfg();
  void set_allocated_io_cfg(::civ::civloc::IOConfig* io_cfg);
  private:
  const ::civ::civloc::IOConfig& _internal_io_cfg() const;
  ::civ::civloc::IOConfig* _internal_mutable_io_cfg();
  public:
  void unsafe_arena_set_allocated_io_cfg(
      ::civ::civloc::IOConfig* io_cfg);
  ::civ::civloc::IOConfig* unsafe_arena_release_io_cfg();

  // optional .civ.civloc.PointCloudMapConfig pointcloud_map_cfg = 6;
  bool has_pointcloud_map_cfg() const;
  private:
  bool _internal_has_pointcloud_map_cfg() const;
  public:
  void clear_pointcloud_map_cfg();
  const ::civ::civloc::PointCloudMapConfig& pointcloud_map_cfg() const;
  ::civ::civloc::PointCloudMapConfig* release_pointcloud_map_cfg();
  ::civ::civloc::PointCloudMapConfig* mutable_pointcloud_map_cfg();
  void set_allocated_pointcloud_map_cfg(::civ::civloc::PointCloudMapConfig* pointcloud_map_cfg);
  private:
  const ::civ::civloc::PointCloudMapConfig& _internal_pointcloud_map_cfg() const;
  ::civ::civloc::PointCloudMapConfig* _internal_mutable_pointcloud_map_cfg();
  public:
  void unsafe_arena_set_allocated_pointcloud_map_cfg(
      ::civ::civloc::PointCloudMapConfig* pointcloud_map_cfg);
  ::civ::civloc::PointCloudMapConfig* unsafe_arena_release_pointcloud_map_cfg();

  // optional .civ.civloc.FuseConfig fuse_cfg = 11;
  bool has_fuse_cfg() const;
  private:
  bool _internal_has_fuse_cfg() const;
  public:
  void clear_fuse_cfg();
  const ::civ::civloc::FuseConfig& fuse_cfg() const;
  ::civ::civloc::FuseConfig* release_fuse_cfg();
  ::civ::civloc::FuseConfig* mutable_fuse_cfg();
  void set_allocated_fuse_cfg(::civ::civloc::FuseConfig* fuse_cfg);
  private:
  const ::civ::civloc::FuseConfig& _internal_fuse_cfg() const;
  ::civ::civloc::FuseConfig* _internal_mutable_fuse_cfg();
  public:
  void unsafe_arena_set_allocated_fuse_cfg(
      ::civ::civloc::FuseConfig* fuse_cfg);
  ::civ::civloc::FuseConfig* unsafe_arena_release_fuse_cfg();

  // optional .civ.civloc.DetectConfig detect_cfg = 12;
  bool has_detect_cfg() const;
  private:
  bool _internal_has_detect_cfg() const;
  public:
  void clear_detect_cfg();
  const ::civ::civloc::DetectConfig& detect_cfg() const;
  ::civ::civloc::DetectConfig* release_detect_cfg();
  ::civ::civloc::DetectConfig* mutable_detect_cfg();
  void set_allocated_detect_cfg(::civ::civloc::DetectConfig* detect_cfg);
  private:
  const ::civ::civloc::DetectConfig& _internal_detect_cfg() const;
  ::civ::civloc::DetectConfig* _internal_mutable_detect_cfg();
  public:
  void unsafe_arena_set_allocated_detect_cfg(
      ::civ::civloc::DetectConfig* detect_cfg);
  ::civ::civloc::DetectConfig* unsafe_arena_release_detect_cfg();

  // optional .civ.civloc.LidarMatchConfig lidar_match_cfg = 13;
  bool has_lidar_match_cfg() const;
  private:
  bool _internal_has_lidar_match_cfg() const;
  public:
  void clear_lidar_match_cfg();
  const ::civ::civloc::LidarMatchConfig& lidar_match_cfg() const;
  ::civ::civloc::LidarMatchConfig* release_lidar_match_cfg();
  ::civ::civloc::LidarMatchConfig* mutable_lidar_match_cfg();
  void set_allocated_lidar_match_cfg(::civ::civloc::LidarMatchConfig* lidar_match_cfg);
  private:
  const ::civ::civloc::LidarMatchConfig& _internal_lidar_match_cfg() const;
  ::civ::civloc::LidarMatchConfig* _internal_mutable_lidar_match_cfg();
  public:
  void unsafe_arena_set_allocated_lidar_match_cfg(
      ::civ::civloc::LidarMatchConfig* lidar_match_cfg);
  ::civ::civloc::LidarMatchConfig* unsafe_arena_release_lidar_match_cfg();

  // optional .civ.civloc.VisionMatchConfig vision_match_cfg = 14;
  bool has_vision_match_cfg() const;
  private:
  bool _internal_has_vision_match_cfg() const;
  public:
  void clear_vision_match_cfg();
  const ::civ::civloc::VisionMatchConfig& vision_match_cfg() const;
  ::civ::civloc::VisionMatchConfig* release_vision_match_cfg();
  ::civ::civloc::VisionMatchConfig* mutable_vision_match_cfg();
  void set_allocated_vision_match_cfg(::civ::civloc::VisionMatchConfig* vision_match_cfg);
  private:
  const ::civ::civloc::VisionMatchConfig& _internal_vision_match_cfg() const;
  ::civ::civloc::VisionMatchConfig* _internal_mutable_vision_match_cfg();
  public:
  void unsafe_arena_set_allocated_vision_match_cfg(
      ::civ::civloc::VisionMatchConfig* vision_match_cfg);
  ::civ::civloc::VisionMatchConfig* unsafe_arena_release_vision_match_cfg();

  // @@protoc_insertion_point(class_scope:civ.civloc.LocatorConfig)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  static const ::PROTOBUF_NAMESPACE_ID::internal::LazyString _i_give_permission_to_break_this_code_default_version_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  ::civ::civloc::CacherConfig* cacher_cfg_;
  ::civ::civloc::VisionMapConfig* visionmap_cfg_;
  ::civ::civloc::IOConfig* io_cfg_;
  ::civ::civloc::PointCloudMapConfig* pointcloud_map_cfg_;
  ::civ::civloc::FuseConfig* fuse_cfg_;
  ::civ::civloc::DetectConfig* detect_cfg_;
  ::civ::civloc::LidarMatchConfig* lidar_match_cfg_;
  ::civ::civloc::VisionMatchConfig* vision_match_cfg_;
  friend struct ::TableStruct_civloc_2fproto_2flocator_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CacherConfig

// required float max_delay_ms = 1;
inline bool CacherConfig::_internal_has_max_delay_ms() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CacherConfig::has_max_delay_ms() const {
  return _internal_has_max_delay_ms();
}
inline void CacherConfig::clear_max_delay_ms() {
  max_delay_ms_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float CacherConfig::_internal_max_delay_ms() const {
  return max_delay_ms_;
}
inline float CacherConfig::max_delay_ms() const {
  // @@protoc_insertion_point(field_get:civ.civloc.CacherConfig.max_delay_ms)
  return _internal_max_delay_ms();
}
inline void CacherConfig::_internal_set_max_delay_ms(float value) {
  _has_bits_[0] |= 0x00000002u;
  max_delay_ms_ = value;
}
inline void CacherConfig::set_max_delay_ms(float value) {
  _internal_set_max_delay_ms(value);
  // @@protoc_insertion_point(field_set:civ.civloc.CacherConfig.max_delay_ms)
}

// required float duration_s = 2;
inline bool CacherConfig::_internal_has_duration_s() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CacherConfig::has_duration_s() const {
  return _internal_has_duration_s();
}
inline void CacherConfig::clear_duration_s() {
  duration_s_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float CacherConfig::_internal_duration_s() const {
  return duration_s_;
}
inline float CacherConfig::duration_s() const {
  // @@protoc_insertion_point(field_get:civ.civloc.CacherConfig.duration_s)
  return _internal_duration_s();
}
inline void CacherConfig::_internal_set_duration_s(float value) {
  _has_bits_[0] |= 0x00000004u;
  duration_s_ = value;
}
inline void CacherConfig::set_duration_s(float value) {
  _internal_set_duration_s(value);
  // @@protoc_insertion_point(field_set:civ.civloc.CacherConfig.duration_s)
}

// optional string main_channel_name = 3;
inline bool CacherConfig::_internal_has_main_channel_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CacherConfig::has_main_channel_name() const {
  return _internal_has_main_channel_name();
}
inline void CacherConfig::clear_main_channel_name() {
  main_channel_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CacherConfig::main_channel_name() const {
  // @@protoc_insertion_point(field_get:civ.civloc.CacherConfig.main_channel_name)
  return _internal_main_channel_name();
}
inline void CacherConfig::set_main_channel_name(const std::string& value) {
  _internal_set_main_channel_name(value);
  // @@protoc_insertion_point(field_set:civ.civloc.CacherConfig.main_channel_name)
}
inline std::string* CacherConfig::mutable_main_channel_name() {
  // @@protoc_insertion_point(field_mutable:civ.civloc.CacherConfig.main_channel_name)
  return _internal_mutable_main_channel_name();
}
inline const std::string& CacherConfig::_internal_main_channel_name() const {
  return main_channel_name_.Get();
}
inline void CacherConfig::_internal_set_main_channel_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  main_channel_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CacherConfig::set_main_channel_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  main_channel_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:civ.civloc.CacherConfig.main_channel_name)
}
inline void CacherConfig::set_main_channel_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  main_channel_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:civ.civloc.CacherConfig.main_channel_name)
}
inline void CacherConfig::set_main_channel_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  main_channel_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:civ.civloc.CacherConfig.main_channel_name)
}
inline std::string* CacherConfig::_internal_mutable_main_channel_name() {
  _has_bits_[0] |= 0x00000001u;
  return main_channel_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CacherConfig::release_main_channel_name() {
  // @@protoc_insertion_point(field_release:civ.civloc.CacherConfig.main_channel_name)
  if (!_internal_has_main_channel_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return main_channel_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CacherConfig::set_allocated_main_channel_name(std::string* main_channel_name) {
  if (main_channel_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  main_channel_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), main_channel_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:civ.civloc.CacherConfig.main_channel_name)
}

// -------------------------------------------------------------------

// FilterPara

// repeated double init_pos_error_m = 1;
inline int FilterPara::_internal_init_pos_error_m_size() const {
  return init_pos_error_m_.size();
}
inline int FilterPara::init_pos_error_m_size() const {
  return _internal_init_pos_error_m_size();
}
inline void FilterPara::clear_init_pos_error_m() {
  init_pos_error_m_.Clear();
}
inline double FilterPara::_internal_init_pos_error_m(int index) const {
  return init_pos_error_m_.Get(index);
}
inline double FilterPara::init_pos_error_m(int index) const {
  // @@protoc_insertion_point(field_get:civ.civloc.FilterPara.init_pos_error_m)
  return _internal_init_pos_error_m(index);
}
inline void FilterPara::set_init_pos_error_m(int index, double value) {
  init_pos_error_m_.Set(index, value);
  // @@protoc_insertion_point(field_set:civ.civloc.FilterPara.init_pos_error_m)
}
inline void FilterPara::_internal_add_init_pos_error_m(double value) {
  init_pos_error_m_.Add(value);
}
inline void FilterPara::add_init_pos_error_m(double value) {
  _internal_add_init_pos_error_m(value);
  // @@protoc_insertion_point(field_add:civ.civloc.FilterPara.init_pos_error_m)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
FilterPara::_internal_init_pos_error_m() const {
  return init_pos_error_m_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
FilterPara::init_pos_error_m() const {
  // @@protoc_insertion_point(field_list:civ.civloc.FilterPara.init_pos_error_m)
  return _internal_init_pos_error_m();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
FilterPara::_internal_mutable_init_pos_error_m() {
  return &init_pos_error_m_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
FilterPara::mutable_init_pos_error_m() {
  // @@protoc_insertion_point(field_mutable_list:civ.civloc.FilterPara.init_pos_error_m)
  return _internal_mutable_init_pos_error_m();
}

// repeated double init_vel_error_mps = 2;
inline int FilterPara::_internal_init_vel_error_mps_size() const {
  return init_vel_error_mps_.size();
}
inline int FilterPara::init_vel_error_mps_size() const {
  return _internal_init_vel_error_mps_size();
}
inline void FilterPara::clear_init_vel_error_mps() {
  init_vel_error_mps_.Clear();
}
inline double FilterPara::_internal_init_vel_error_mps(int index) const {
  return init_vel_error_mps_.Get(index);
}
inline double FilterPara::init_vel_error_mps(int index) const {
  // @@protoc_insertion_point(field_get:civ.civloc.FilterPara.init_vel_error_mps)
  return _internal_init_vel_error_mps(index);
}
inline void FilterPara::set_init_vel_error_mps(int index, double value) {
  init_vel_error_mps_.Set(index, value);
  // @@protoc_insertion_point(field_set:civ.civloc.FilterPara.init_vel_error_mps)
}
inline void FilterPara::_internal_add_init_vel_error_mps(double value) {
  init_vel_error_mps_.Add(value);
}
inline void FilterPara::add_init_vel_error_mps(double value) {
  _internal_add_init_vel_error_mps(value);
  // @@protoc_insertion_point(field_add:civ.civloc.FilterPara.init_vel_error_mps)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
FilterPara::_internal_init_vel_error_mps() const {
  return init_vel_error_mps_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
FilterPara::init_vel_error_mps() const {
  // @@protoc_insertion_point(field_list:civ.civloc.FilterPara.init_vel_error_mps)
  return _internal_init_vel_error_mps();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
FilterPara::_internal_mutable_init_vel_error_mps() {
  return &init_vel_error_mps_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
FilterPara::mutable_init_vel_error_mps() {
  // @@protoc_insertion_point(field_mutable_list:civ.civloc.FilterPara.init_vel_error_mps)
  return _internal_mutable_init_vel_error_mps();
}

// repeated double init_att_error_deg = 3;
inline int FilterPara::_internal_init_att_error_deg_size() const {
  return init_att_error_deg_.size();
}
inline int FilterPara::init_att_error_deg_size() const {
  return _internal_init_att_error_deg_size();
}
inline void FilterPara::clear_init_att_error_deg() {
  init_att_error_deg_.Clear();
}
inline double FilterPara::_internal_init_att_error_deg(int index) const {
  return init_att_error_deg_.Get(index);
}
inline double FilterPara::init_att_error_deg(int index) const {
  // @@protoc_insertion_point(field_get:civ.civloc.FilterPara.init_att_error_deg)
  return _internal_init_att_error_deg(index);
}
inline void FilterPara::set_init_att_error_deg(int index, double value) {
  init_att_error_deg_.Set(index, value);
  // @@protoc_insertion_point(field_set:civ.civloc.FilterPara.init_att_error_deg)
}
inline void FilterPara::_internal_add_init_att_error_deg(double value) {
  init_att_error_deg_.Add(value);
}
inline void FilterPara::add_init_att_error_deg(double value) {
  _internal_add_init_att_error_deg(value);
  // @@protoc_insertion_point(field_add:civ.civloc.FilterPara.init_att_error_deg)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
FilterPara::_internal_init_att_error_deg() const {
  return init_att_error_deg_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
FilterPara::init_att_error_deg() const {
  // @@protoc_insertion_point(field_list:civ.civloc.FilterPara.init_att_error_deg)
  return _internal_init_att_error_deg();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
FilterPara::_internal_mutable_init_att_error_deg() {
  return &init_att_error_deg_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
FilterPara::mutable_init_att_error_deg() {
  // @@protoc_insertion_point(field_mutable_list:civ.civloc.FilterPara.init_att_error_deg)
  return _internal_mutable_init_att_error_deg();
}

// repeated double init_acc_bias_error_mg = 4;
inline int FilterPara::_internal_init_acc_bias_error_mg_size() const {
  return init_acc_bias_error_mg_.size();
}
inline int FilterPara::init_acc_bias_error_mg_size() const {
  return _internal_init_acc_bias_error_mg_size();
}
inline void FilterPara::clear_init_acc_bias_error_mg() {
  init_acc_bias_error_mg_.Clear();
}
inline double FilterPara::_internal_init_acc_bias_error_mg(int index) const {
  return init_acc_bias_error_mg_.Get(index);
}
inline double FilterPara::init_acc_bias_error_mg(int index) const {
  // @@protoc_insertion_point(field_get:civ.civloc.FilterPara.init_acc_bias_error_mg)
  return _internal_init_acc_bias_error_mg(index);
}
inline void FilterPara::set_init_acc_bias_error_mg(int index, double value) {
  init_acc_bias_error_mg_.Set(index, value);
  // @@protoc_insertion_point(field_set:civ.civloc.FilterPara.init_acc_bias_error_mg)
}
inline void FilterPara::_internal_add_init_acc_bias_error_mg(double value) {
  init_acc_bias_error_mg_.Add(value);
}
inline void FilterPara::add_init_acc_bias_error_mg(double value) {
  _internal_add_init_acc_bias_error_mg(value);
  // @@protoc_insertion_point(field_add:civ.civloc.FilterPara.init_acc_bias_error_mg)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
FilterPara::_internal_init_acc_bias_error_mg() const {
  return init_acc_bias_error_mg_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
FilterPara::init_acc_bias_error_mg() const {
  // @@protoc_insertion_point(field_list:civ.civloc.FilterPara.init_acc_bias_error_mg)
  return _internal_init_acc_bias_error_mg();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
FilterPara::_internal_mutable_init_acc_bias_error_mg() {
  return &init_acc_bias_error_mg_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
FilterPara::mutable_init_acc_bias_error_mg() {
  // @@protoc_insertion_point(field_mutable_list:civ.civloc.FilterPara.init_acc_bias_error_mg)
  return _internal_mutable_init_acc_bias_error_mg();
}

// repeated double init_gyr_bias_error_dps = 5;
inline int FilterPara::_internal_init_gyr_bias_error_dps_size() const {
  return init_gyr_bias_error_dps_.size();
}
inline int FilterPara::init_gyr_bias_error_dps_size() const {
  return _internal_init_gyr_bias_error_dps_size();
}
inline void FilterPara::clear_init_gyr_bias_error_dps() {
  init_gyr_bias_error_dps_.Clear();
}
inline double FilterPara::_internal_init_gyr_bias_error_dps(int index) const {
  return init_gyr_bias_error_dps_.Get(index);
}
inline double FilterPara::init_gyr_bias_error_dps(int index) const {
  // @@protoc_insertion_point(field_get:civ.civloc.FilterPara.init_gyr_bias_error_dps)
  return _internal_init_gyr_bias_error_dps(index);
}
inline void FilterPara::set_init_gyr_bias_error_dps(int index, double value) {
  init_gyr_bias_error_dps_.Set(index, value);
  // @@protoc_insertion_point(field_set:civ.civloc.FilterPara.init_gyr_bias_error_dps)
}
inline void FilterPara::_internal_add_init_gyr_bias_error_dps(double value) {
  init_gyr_bias_error_dps_.Add(value);
}
inline void FilterPara::add_init_gyr_bias_error_dps(double value) {
  _internal_add_init_gyr_bias_error_dps(value);
  // @@protoc_insertion_point(field_add:civ.civloc.FilterPara.init_gyr_bias_error_dps)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
FilterPara::_internal_init_gyr_bias_error_dps() const {
  return init_gyr_bias_error_dps_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
FilterPara::init_gyr_bias_error_dps() const {
  // @@protoc_insertion_point(field_list:civ.civloc.FilterPara.init_gyr_bias_error_dps)
  return _internal_init_gyr_bias_error_dps();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
FilterPara::_internal_mutable_init_gyr_bias_error_dps() {
  return &init_gyr_bias_error_dps_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
FilterPara::mutable_init_gyr_bias_error_dps() {
  // @@protoc_insertion_point(field_mutable_list:civ.civloc.FilterPara.init_gyr_bias_error_dps)
  return _internal_mutable_init_gyr_bias_error_dps();
}

// repeated double init_qvi_error_deg = 6;
inline int FilterPara::_internal_init_qvi_error_deg_size() const {
  return init_qvi_error_deg_.size();
}
inline int FilterPara::init_qvi_error_deg_size() const {
  return _internal_init_qvi_error_deg_size();
}
inline void FilterPara::clear_init_qvi_error_deg() {
  init_qvi_error_deg_.Clear();
}
inline double FilterPara::_internal_init_qvi_error_deg(int index) const {
  return init_qvi_error_deg_.Get(index);
}
inline double FilterPara::init_qvi_error_deg(int index) const {
  // @@protoc_insertion_point(field_get:civ.civloc.FilterPara.init_qvi_error_deg)
  return _internal_init_qvi_error_deg(index);
}
inline void FilterPara::set_init_qvi_error_deg(int index, double value) {
  init_qvi_error_deg_.Set(index, value);
  // @@protoc_insertion_point(field_set:civ.civloc.FilterPara.init_qvi_error_deg)
}
inline void FilterPara::_internal_add_init_qvi_error_deg(double value) {
  init_qvi_error_deg_.Add(value);
}
inline void FilterPara::add_init_qvi_error_deg(double value) {
  _internal_add_init_qvi_error_deg(value);
  // @@protoc_insertion_point(field_add:civ.civloc.FilterPara.init_qvi_error_deg)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
FilterPara::_internal_init_qvi_error_deg() const {
  return init_qvi_error_deg_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
FilterPara::init_qvi_error_deg() const {
  // @@protoc_insertion_point(field_list:civ.civloc.FilterPara.init_qvi_error_deg)
  return _internal_init_qvi_error_deg();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
FilterPara::_internal_mutable_init_qvi_error_deg() {
  return &init_qvi_error_deg_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
FilterPara::mutable_init_qvi_error_deg() {
  // @@protoc_insertion_point(field_mutable_list:civ.civloc.FilterPara.init_qvi_error_deg)
  return _internal_mutable_init_qvi_error_deg();
}

// repeated double init_kod_error = 7;
inline int FilterPara::_internal_init_kod_error_size() const {
  return init_kod_error_.size();
}
inline int FilterPara::init_kod_error_size() const {
  return _internal_init_kod_error_size();
}
inline void FilterPara::clear_init_kod_error() {
  init_kod_error_.Clear();
}
inline double FilterPara::_internal_init_kod_error(int index) const {
  return init_kod_error_.Get(index);
}
inline double FilterPara::init_kod_error(int index) const {
  // @@protoc_insertion_point(field_get:civ.civloc.FilterPara.init_kod_error)
  return _internal_init_kod_error(index);
}
inline void FilterPara::set_init_kod_error(int index, double value) {
  init_kod_error_.Set(index, value);
  // @@protoc_insertion_point(field_set:civ.civloc.FilterPara.init_kod_error)
}
inline void FilterPara::_internal_add_init_kod_error(double value) {
  init_kod_error_.Add(value);
}
inline void FilterPara::add_init_kod_error(double value) {
  _internal_add_init_kod_error(value);
  // @@protoc_insertion_point(field_add:civ.civloc.FilterPara.init_kod_error)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
FilterPara::_internal_init_kod_error() const {
  return init_kod_error_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
FilterPara::init_kod_error() const {
  // @@protoc_insertion_point(field_list:civ.civloc.FilterPara.init_kod_error)
  return _internal_init_kod_error();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
FilterPara::_internal_mutable_init_kod_error() {
  return &init_kod_error_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
FilterPara::mutable_init_kod_error() {
  // @@protoc_insertion_point(field_mutable_list:civ.civloc.FilterPara.init_kod_error)
  return _internal_mutable_init_kod_error();
}

// repeated double position_random_walk_mpsh = 8;
inline int FilterPara::_internal_position_random_walk_mpsh_size() const {
  return position_random_walk_mpsh_.size();
}
inline int FilterPara::position_random_walk_mpsh_size() const {
  return _internal_position_random_walk_mpsh_size();
}
inline void FilterPara::clear_position_random_walk_mpsh() {
  position_random_walk_mpsh_.Clear();
}
inline double FilterPara::_internal_position_random_walk_mpsh(int index) const {
  return position_random_walk_mpsh_.Get(index);
}
inline double FilterPara::position_random_walk_mpsh(int index) const {
  // @@protoc_insertion_point(field_get:civ.civloc.FilterPara.position_random_walk_mpsh)
  return _internal_position_random_walk_mpsh(index);
}
inline void FilterPara::set_position_random_walk_mpsh(int index, double value) {
  position_random_walk_mpsh_.Set(index, value);
  // @@protoc_insertion_point(field_set:civ.civloc.FilterPara.position_random_walk_mpsh)
}
inline void FilterPara::_internal_add_position_random_walk_mpsh(double value) {
  position_random_walk_mpsh_.Add(value);
}
inline void FilterPara::add_position_random_walk_mpsh(double value) {
  _internal_add_position_random_walk_mpsh(value);
  // @@protoc_insertion_point(field_add:civ.civloc.FilterPara.position_random_walk_mpsh)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
FilterPara::_internal_position_random_walk_mpsh() const {
  return position_random_walk_mpsh_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
FilterPara::position_random_walk_mpsh() const {
  // @@protoc_insertion_point(field_list:civ.civloc.FilterPara.position_random_walk_mpsh)
  return _internal_position_random_walk_mpsh();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
FilterPara::_internal_mutable_position_random_walk_mpsh() {
  return &position_random_walk_mpsh_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
FilterPara::mutable_position_random_walk_mpsh() {
  // @@protoc_insertion_point(field_mutable_list:civ.civloc.FilterPara.position_random_walk_mpsh)
  return _internal_mutable_position_random_walk_mpsh();
}

// repeated double odo_scale_random_walk_psh = 9;
inline int FilterPara::_internal_odo_scale_random_walk_psh_size() const {
  return odo_scale_random_walk_psh_.size();
}
inline int FilterPara::odo_scale_random_walk_psh_size() const {
  return _internal_odo_scale_random_walk_psh_size();
}
inline void FilterPara::clear_odo_scale_random_walk_psh() {
  odo_scale_random_walk_psh_.Clear();
}
inline double FilterPara::_internal_odo_scale_random_walk_psh(int index) const {
  return odo_scale_random_walk_psh_.Get(index);
}
inline double FilterPara::odo_scale_random_walk_psh(int index) const {
  // @@protoc_insertion_point(field_get:civ.civloc.FilterPara.odo_scale_random_walk_psh)
  return _internal_odo_scale_random_walk_psh(index);
}
inline void FilterPara::set_odo_scale_random_walk_psh(int index, double value) {
  odo_scale_random_walk_psh_.Set(index, value);
  // @@protoc_insertion_point(field_set:civ.civloc.FilterPara.odo_scale_random_walk_psh)
}
inline void FilterPara::_internal_add_odo_scale_random_walk_psh(double value) {
  odo_scale_random_walk_psh_.Add(value);
}
inline void FilterPara::add_odo_scale_random_walk_psh(double value) {
  _internal_add_odo_scale_random_walk_psh(value);
  // @@protoc_insertion_point(field_add:civ.civloc.FilterPara.odo_scale_random_walk_psh)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
FilterPara::_internal_odo_scale_random_walk_psh() const {
  return odo_scale_random_walk_psh_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
FilterPara::odo_scale_random_walk_psh() const {
  // @@protoc_insertion_point(field_list:civ.civloc.FilterPara.odo_scale_random_walk_psh)
  return _internal_odo_scale_random_walk_psh();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
FilterPara::_internal_mutable_odo_scale_random_walk_psh() {
  return &odo_scale_random_walk_psh_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
FilterPara::mutable_odo_scale_random_walk_psh() {
  // @@protoc_insertion_point(field_mutable_list:civ.civloc.FilterPara.odo_scale_random_walk_psh)
  return _internal_mutable_odo_scale_random_walk_psh();
}

// repeated double qvv1_random_walk_dpsh = 10;
inline int FilterPara::_internal_qvv1_random_walk_dpsh_size() const {
  return qvv1_random_walk_dpsh_.size();
}
inline int FilterPara::qvv1_random_walk_dpsh_size() const {
  return _internal_qvv1_random_walk_dpsh_size();
}
inline void FilterPara::clear_qvv1_random_walk_dpsh() {
  qvv1_random_walk_dpsh_.Clear();
}
inline double FilterPara::_internal_qvv1_random_walk_dpsh(int index) const {
  return qvv1_random_walk_dpsh_.Get(index);
}
inline double FilterPara::qvv1_random_walk_dpsh(int index) const {
  // @@protoc_insertion_point(field_get:civ.civloc.FilterPara.qvv1_random_walk_dpsh)
  return _internal_qvv1_random_walk_dpsh(index);
}
inline void FilterPara::set_qvv1_random_walk_dpsh(int index, double value) {
  qvv1_random_walk_dpsh_.Set(index, value);
  // @@protoc_insertion_point(field_set:civ.civloc.FilterPara.qvv1_random_walk_dpsh)
}
inline void FilterPara::_internal_add_qvv1_random_walk_dpsh(double value) {
  qvv1_random_walk_dpsh_.Add(value);
}
inline void FilterPara::add_qvv1_random_walk_dpsh(double value) {
  _internal_add_qvv1_random_walk_dpsh(value);
  // @@protoc_insertion_point(field_add:civ.civloc.FilterPara.qvv1_random_walk_dpsh)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
FilterPara::_internal_qvv1_random_walk_dpsh() const {
  return qvv1_random_walk_dpsh_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
FilterPara::qvv1_random_walk_dpsh() const {
  // @@protoc_insertion_point(field_list:civ.civloc.FilterPara.qvv1_random_walk_dpsh)
  return _internal_qvv1_random_walk_dpsh();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
FilterPara::_internal_mutable_qvv1_random_walk_dpsh() {
  return &qvv1_random_walk_dpsh_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
FilterPara::mutable_qvv1_random_walk_dpsh() {
  // @@protoc_insertion_point(field_mutable_list:civ.civloc.FilterPara.qvv1_random_walk_dpsh)
  return _internal_mutable_qvv1_random_walk_dpsh();
}

// -------------------------------------------------------------------

// GnssFilterConfig

// required bool enable_gnss_pos = 1;
inline bool GnssFilterConfig::_internal_has_enable_gnss_pos() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GnssFilterConfig::has_enable_gnss_pos() const {
  return _internal_has_enable_gnss_pos();
}
inline void GnssFilterConfig::clear_enable_gnss_pos() {
  enable_gnss_pos_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool GnssFilterConfig::_internal_enable_gnss_pos() const {
  return enable_gnss_pos_;
}
inline bool GnssFilterConfig::enable_gnss_pos() const {
  // @@protoc_insertion_point(field_get:civ.civloc.GnssFilterConfig.enable_gnss_pos)
  return _internal_enable_gnss_pos();
}
inline void GnssFilterConfig::_internal_set_enable_gnss_pos(bool value) {
  _has_bits_[0] |= 0x00000001u;
  enable_gnss_pos_ = value;
}
inline void GnssFilterConfig::set_enable_gnss_pos(bool value) {
  _internal_set_enable_gnss_pos(value);
  // @@protoc_insertion_point(field_set:civ.civloc.GnssFilterConfig.enable_gnss_pos)
}

// required bool enable_gnss_vel = 2;
inline bool GnssFilterConfig::_internal_has_enable_gnss_vel() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool GnssFilterConfig::has_enable_gnss_vel() const {
  return _internal_has_enable_gnss_vel();
}
inline void GnssFilterConfig::clear_enable_gnss_vel() {
  enable_gnss_vel_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool GnssFilterConfig::_internal_enable_gnss_vel() const {
  return enable_gnss_vel_;
}
inline bool GnssFilterConfig::enable_gnss_vel() const {
  // @@protoc_insertion_point(field_get:civ.civloc.GnssFilterConfig.enable_gnss_vel)
  return _internal_enable_gnss_vel();
}
inline void GnssFilterConfig::_internal_set_enable_gnss_vel(bool value) {
  _has_bits_[0] |= 0x00000002u;
  enable_gnss_vel_ = value;
}
inline void GnssFilterConfig::set_enable_gnss_vel(bool value) {
  _internal_set_enable_gnss_vel(value);
  // @@protoc_insertion_point(field_set:civ.civloc.GnssFilterConfig.enable_gnss_vel)
}

// repeated double position_noise_m = 3;
inline int GnssFilterConfig::_internal_position_noise_m_size() const {
  return position_noise_m_.size();
}
inline int GnssFilterConfig::position_noise_m_size() const {
  return _internal_position_noise_m_size();
}
inline void GnssFilterConfig::clear_position_noise_m() {
  position_noise_m_.Clear();
}
inline double GnssFilterConfig::_internal_position_noise_m(int index) const {
  return position_noise_m_.Get(index);
}
inline double GnssFilterConfig::position_noise_m(int index) const {
  // @@protoc_insertion_point(field_get:civ.civloc.GnssFilterConfig.position_noise_m)
  return _internal_position_noise_m(index);
}
inline void GnssFilterConfig::set_position_noise_m(int index, double value) {
  position_noise_m_.Set(index, value);
  // @@protoc_insertion_point(field_set:civ.civloc.GnssFilterConfig.position_noise_m)
}
inline void GnssFilterConfig::_internal_add_position_noise_m(double value) {
  position_noise_m_.Add(value);
}
inline void GnssFilterConfig::add_position_noise_m(double value) {
  _internal_add_position_noise_m(value);
  // @@protoc_insertion_point(field_add:civ.civloc.GnssFilterConfig.position_noise_m)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
GnssFilterConfig::_internal_position_noise_m() const {
  return position_noise_m_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
GnssFilterConfig::position_noise_m() const {
  // @@protoc_insertion_point(field_list:civ.civloc.GnssFilterConfig.position_noise_m)
  return _internal_position_noise_m();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
GnssFilterConfig::_internal_mutable_position_noise_m() {
  return &position_noise_m_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
GnssFilterConfig::mutable_position_noise_m() {
  // @@protoc_insertion_point(field_mutable_list:civ.civloc.GnssFilterConfig.position_noise_m)
  return _internal_mutable_position_noise_m();
}

// repeated double velocity_noise_mps = 4;
inline int GnssFilterConfig::_internal_velocity_noise_mps_size() const {
  return velocity_noise_mps_.size();
}
inline int GnssFilterConfig::velocity_noise_mps_size() const {
  return _internal_velocity_noise_mps_size();
}
inline void GnssFilterConfig::clear_velocity_noise_mps() {
  velocity_noise_mps_.Clear();
}
inline double GnssFilterConfig::_internal_velocity_noise_mps(int index) const {
  return velocity_noise_mps_.Get(index);
}
inline double GnssFilterConfig::velocity_noise_mps(int index) const {
  // @@protoc_insertion_point(field_get:civ.civloc.GnssFilterConfig.velocity_noise_mps)
  return _internal_velocity_noise_mps(index);
}
inline void GnssFilterConfig::set_velocity_noise_mps(int index, double value) {
  velocity_noise_mps_.Set(index, value);
  // @@protoc_insertion_point(field_set:civ.civloc.GnssFilterConfig.velocity_noise_mps)
}
inline void GnssFilterConfig::_internal_add_velocity_noise_mps(double value) {
  velocity_noise_mps_.Add(value);
}
inline void GnssFilterConfig::add_velocity_noise_mps(double value) {
  _internal_add_velocity_noise_mps(value);
  // @@protoc_insertion_point(field_add:civ.civloc.GnssFilterConfig.velocity_noise_mps)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
GnssFilterConfig::_internal_velocity_noise_mps() const {
  return velocity_noise_mps_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
GnssFilterConfig::velocity_noise_mps() const {
  // @@protoc_insertion_point(field_list:civ.civloc.GnssFilterConfig.velocity_noise_mps)
  return _internal_velocity_noise_mps();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
GnssFilterConfig::_internal_mutable_velocity_noise_mps() {
  return &velocity_noise_mps_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
GnssFilterConfig::mutable_velocity_noise_mps() {
  // @@protoc_insertion_point(field_mutable_list:civ.civloc.GnssFilterConfig.velocity_noise_mps)
  return _internal_mutable_velocity_noise_mps();
}

// required bool enable_gnss_dual = 5;
inline bool GnssFilterConfig::_internal_has_enable_gnss_dual() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool GnssFilterConfig::has_enable_gnss_dual() const {
  return _internal_has_enable_gnss_dual();
}
inline void GnssFilterConfig::clear_enable_gnss_dual() {
  enable_gnss_dual_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool GnssFilterConfig::_internal_enable_gnss_dual() const {
  return enable_gnss_dual_;
}
inline bool GnssFilterConfig::enable_gnss_dual() const {
  // @@protoc_insertion_point(field_get:civ.civloc.GnssFilterConfig.enable_gnss_dual)
  return _internal_enable_gnss_dual();
}
inline void GnssFilterConfig::_internal_set_enable_gnss_dual(bool value) {
  _has_bits_[0] |= 0x00000004u;
  enable_gnss_dual_ = value;
}
inline void GnssFilterConfig::set_enable_gnss_dual(bool value) {
  _internal_set_enable_gnss_dual(value);
  // @@protoc_insertion_point(field_set:civ.civloc.GnssFilterConfig.enable_gnss_dual)
}

// repeated double dual_angle_noise_deg = 6;
inline int GnssFilterConfig::_internal_dual_angle_noise_deg_size() const {
  return dual_angle_noise_deg_.size();
}
inline int GnssFilterConfig::dual_angle_noise_deg_size() const {
  return _internal_dual_angle_noise_deg_size();
}
inline void GnssFilterConfig::clear_dual_angle_noise_deg() {
  dual_angle_noise_deg_.Clear();
}
inline double GnssFilterConfig::_internal_dual_angle_noise_deg(int index) const {
  return dual_angle_noise_deg_.Get(index);
}
inline double GnssFilterConfig::dual_angle_noise_deg(int index) const {
  // @@protoc_insertion_point(field_get:civ.civloc.GnssFilterConfig.dual_angle_noise_deg)
  return _internal_dual_angle_noise_deg(index);
}
inline void GnssFilterConfig::set_dual_angle_noise_deg(int index, double value) {
  dual_angle_noise_deg_.Set(index, value);
  // @@protoc_insertion_point(field_set:civ.civloc.GnssFilterConfig.dual_angle_noise_deg)
}
inline void GnssFilterConfig::_internal_add_dual_angle_noise_deg(double value) {
  dual_angle_noise_deg_.Add(value);
}
inline void GnssFilterConfig::add_dual_angle_noise_deg(double value) {
  _internal_add_dual_angle_noise_deg(value);
  // @@protoc_insertion_point(field_add:civ.civloc.GnssFilterConfig.dual_angle_noise_deg)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
GnssFilterConfig::_internal_dual_angle_noise_deg() const {
  return dual_angle_noise_deg_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
GnssFilterConfig::dual_angle_noise_deg() const {
  // @@protoc_insertion_point(field_list:civ.civloc.GnssFilterConfig.dual_angle_noise_deg)
  return _internal_dual_angle_noise_deg();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
GnssFilterConfig::_internal_mutable_dual_angle_noise_deg() {
  return &dual_angle_noise_deg_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
GnssFilterConfig::mutable_dual_angle_noise_deg() {
  // @@protoc_insertion_point(field_mutable_list:civ.civloc.GnssFilterConfig.dual_angle_noise_deg)
  return _internal_mutable_dual_angle_noise_deg();
}

// required float farme_judge_time_s = 7;
inline bool GnssFilterConfig::_internal_has_farme_judge_time_s() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool GnssFilterConfig::has_farme_judge_time_s() const {
  return _internal_has_farme_judge_time_s();
}
inline void GnssFilterConfig::clear_farme_judge_time_s() {
  farme_judge_time_s_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float GnssFilterConfig::_internal_farme_judge_time_s() const {
  return farme_judge_time_s_;
}
inline float GnssFilterConfig::farme_judge_time_s() const {
  // @@protoc_insertion_point(field_get:civ.civloc.GnssFilterConfig.farme_judge_time_s)
  return _internal_farme_judge_time_s();
}
inline void GnssFilterConfig::_internal_set_farme_judge_time_s(float value) {
  _has_bits_[0] |= 0x00000008u;
  farme_judge_time_s_ = value;
}
inline void GnssFilterConfig::set_farme_judge_time_s(float value) {
  _internal_set_farme_judge_time_s(value);
  // @@protoc_insertion_point(field_set:civ.civloc.GnssFilterConfig.farme_judge_time_s)
}

// required float max_change_ratio = 8;
inline bool GnssFilterConfig::_internal_has_max_change_ratio() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool GnssFilterConfig::has_max_change_ratio() const {
  return _internal_has_max_change_ratio();
}
inline void GnssFilterConfig::clear_max_change_ratio() {
  max_change_ratio_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline float GnssFilterConfig::_internal_max_change_ratio() const {
  return max_change_ratio_;
}
inline float GnssFilterConfig::max_change_ratio() const {
  // @@protoc_insertion_point(field_get:civ.civloc.GnssFilterConfig.max_change_ratio)
  return _internal_max_change_ratio();
}
inline void GnssFilterConfig::_internal_set_max_change_ratio(float value) {
  _has_bits_[0] |= 0x00000010u;
  max_change_ratio_ = value;
}
inline void GnssFilterConfig::set_max_change_ratio(float value) {
  _internal_set_max_change_ratio(value);
  // @@protoc_insertion_point(field_set:civ.civloc.GnssFilterConfig.max_change_ratio)
}

// required float pos_std_m_upper_limit = 9;
inline bool GnssFilterConfig::_internal_has_pos_std_m_upper_limit() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool GnssFilterConfig::has_pos_std_m_upper_limit() const {
  return _internal_has_pos_std_m_upper_limit();
}
inline void GnssFilterConfig::clear_pos_std_m_upper_limit() {
  pos_std_m_upper_limit_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline float GnssFilterConfig::_internal_pos_std_m_upper_limit() const {
  return pos_std_m_upper_limit_;
}
inline float GnssFilterConfig::pos_std_m_upper_limit() const {
  // @@protoc_insertion_point(field_get:civ.civloc.GnssFilterConfig.pos_std_m_upper_limit)
  return _internal_pos_std_m_upper_limit();
}
inline void GnssFilterConfig::_internal_set_pos_std_m_upper_limit(float value) {
  _has_bits_[0] |= 0x00000020u;
  pos_std_m_upper_limit_ = value;
}
inline void GnssFilterConfig::set_pos_std_m_upper_limit(float value) {
  _internal_set_pos_std_m_upper_limit(value);
  // @@protoc_insertion_point(field_set:civ.civloc.GnssFilterConfig.pos_std_m_upper_limit)
}

// required float residual_drift_m_upper_limit = 10;
inline bool GnssFilterConfig::_internal_has_residual_drift_m_upper_limit() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool GnssFilterConfig::has_residual_drift_m_upper_limit() const {
  return _internal_has_residual_drift_m_upper_limit();
}
inline void GnssFilterConfig::clear_residual_drift_m_upper_limit() {
  residual_drift_m_upper_limit_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline float GnssFilterConfig::_internal_residual_drift_m_upper_limit() const {
  return residual_drift_m_upper_limit_;
}
inline float GnssFilterConfig::residual_drift_m_upper_limit() const {
  // @@protoc_insertion_point(field_get:civ.civloc.GnssFilterConfig.residual_drift_m_upper_limit)
  return _internal_residual_drift_m_upper_limit();
}
inline void GnssFilterConfig::_internal_set_residual_drift_m_upper_limit(float value) {
  _has_bits_[0] |= 0x00000040u;
  residual_drift_m_upper_limit_ = value;
}
inline void GnssFilterConfig::set_residual_drift_m_upper_limit(float value) {
  _internal_set_residual_drift_m_upper_limit(value);
  // @@protoc_insertion_point(field_set:civ.civloc.GnssFilterConfig.residual_drift_m_upper_limit)
}

// required float heading_std_deg_upper_limit = 11;
inline bool GnssFilterConfig::_internal_has_heading_std_deg_upper_limit() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool GnssFilterConfig::has_heading_std_deg_upper_limit() const {
  return _internal_has_heading_std_deg_upper_limit();
}
inline void GnssFilterConfig::clear_heading_std_deg_upper_limit() {
  heading_std_deg_upper_limit_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline float GnssFilterConfig::_internal_heading_std_deg_upper_limit() const {
  return heading_std_deg_upper_limit_;
}
inline float GnssFilterConfig::heading_std_deg_upper_limit() const {
  // @@protoc_insertion_point(field_get:civ.civloc.GnssFilterConfig.heading_std_deg_upper_limit)
  return _internal_heading_std_deg_upper_limit();
}
inline void GnssFilterConfig::_internal_set_heading_std_deg_upper_limit(float value) {
  _has_bits_[0] |= 0x00000080u;
  heading_std_deg_upper_limit_ = value;
}
inline void GnssFilterConfig::set_heading_std_deg_upper_limit(float value) {
  _internal_set_heading_std_deg_upper_limit(value);
  // @@protoc_insertion_point(field_set:civ.civloc.GnssFilterConfig.heading_std_deg_upper_limit)
}

// required float heading_std_deg_lower_limit = 12;
inline bool GnssFilterConfig::_internal_has_heading_std_deg_lower_limit() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool GnssFilterConfig::has_heading_std_deg_lower_limit() const {
  return _internal_has_heading_std_deg_lower_limit();
}
inline void GnssFilterConfig::clear_heading_std_deg_lower_limit() {
  heading_std_deg_lower_limit_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline float GnssFilterConfig::_internal_heading_std_deg_lower_limit() const {
  return heading_std_deg_lower_limit_;
}
inline float GnssFilterConfig::heading_std_deg_lower_limit() const {
  // @@protoc_insertion_point(field_get:civ.civloc.GnssFilterConfig.heading_std_deg_lower_limit)
  return _internal_heading_std_deg_lower_limit();
}
inline void GnssFilterConfig::_internal_set_heading_std_deg_lower_limit(float value) {
  _has_bits_[0] |= 0x00000100u;
  heading_std_deg_lower_limit_ = value;
}
inline void GnssFilterConfig::set_heading_std_deg_lower_limit(float value) {
  _internal_set_heading_std_deg_lower_limit(value);
  // @@protoc_insertion_point(field_set:civ.civloc.GnssFilterConfig.heading_std_deg_lower_limit)
}

// -------------------------------------------------------------------

// VehicleModelFilterConfig

// required bool enable_nhc = 1;
inline bool VehicleModelFilterConfig::_internal_has_enable_nhc() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool VehicleModelFilterConfig::has_enable_nhc() const {
  return _internal_has_enable_nhc();
}
inline void VehicleModelFilterConfig::clear_enable_nhc() {
  enable_nhc_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool VehicleModelFilterConfig::_internal_enable_nhc() const {
  return enable_nhc_;
}
inline bool VehicleModelFilterConfig::enable_nhc() const {
  // @@protoc_insertion_point(field_get:civ.civloc.VehicleModelFilterConfig.enable_nhc)
  return _internal_enable_nhc();
}
inline void VehicleModelFilterConfig::_internal_set_enable_nhc(bool value) {
  _has_bits_[0] |= 0x00000001u;
  enable_nhc_ = value;
}
inline void VehicleModelFilterConfig::set_enable_nhc(bool value) {
  _internal_set_enable_nhc(value);
  // @@protoc_insertion_point(field_set:civ.civloc.VehicleModelFilterConfig.enable_nhc)
}

// required bool enable_zupt = 2;
inline bool VehicleModelFilterConfig::_internal_has_enable_zupt() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool VehicleModelFilterConfig::has_enable_zupt() const {
  return _internal_has_enable_zupt();
}
inline void VehicleModelFilterConfig::clear_enable_zupt() {
  enable_zupt_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool VehicleModelFilterConfig::_internal_enable_zupt() const {
  return enable_zupt_;
}
inline bool VehicleModelFilterConfig::enable_zupt() const {
  // @@protoc_insertion_point(field_get:civ.civloc.VehicleModelFilterConfig.enable_zupt)
  return _internal_enable_zupt();
}
inline void VehicleModelFilterConfig::_internal_set_enable_zupt(bool value) {
  _has_bits_[0] |= 0x00000002u;
  enable_zupt_ = value;
}
inline void VehicleModelFilterConfig::set_enable_zupt(bool value) {
  _internal_set_enable_zupt(value);
  // @@protoc_insertion_point(field_set:civ.civloc.VehicleModelFilterConfig.enable_zupt)
}

// required bool enable_zgbc = 3;
inline bool VehicleModelFilterConfig::_internal_has_enable_zgbc() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool VehicleModelFilterConfig::has_enable_zgbc() const {
  return _internal_has_enable_zgbc();
}
inline void VehicleModelFilterConfig::clear_enable_zgbc() {
  enable_zgbc_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool VehicleModelFilterConfig::_internal_enable_zgbc() const {
  return enable_zgbc_;
}
inline bool VehicleModelFilterConfig::enable_zgbc() const {
  // @@protoc_insertion_point(field_get:civ.civloc.VehicleModelFilterConfig.enable_zgbc)
  return _internal_enable_zgbc();
}
inline void VehicleModelFilterConfig::_internal_set_enable_zgbc(bool value) {
  _has_bits_[0] |= 0x00000004u;
  enable_zgbc_ = value;
}
inline void VehicleModelFilterConfig::set_enable_zgbc(bool value) {
  _internal_set_enable_zgbc(value);
  // @@protoc_insertion_point(field_set:civ.civloc.VehicleModelFilterConfig.enable_zgbc)
}

// required bool enable_zpc = 4;
inline bool VehicleModelFilterConfig::_internal_has_enable_zpc() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool VehicleModelFilterConfig::has_enable_zpc() const {
  return _internal_has_enable_zpc();
}
inline void VehicleModelFilterConfig::clear_enable_zpc() {
  enable_zpc_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool VehicleModelFilterConfig::_internal_enable_zpc() const {
  return enable_zpc_;
}
inline bool VehicleModelFilterConfig::enable_zpc() const {
  // @@protoc_insertion_point(field_get:civ.civloc.VehicleModelFilterConfig.enable_zpc)
  return _internal_enable_zpc();
}
inline void VehicleModelFilterConfig::_internal_set_enable_zpc(bool value) {
  _has_bits_[0] |= 0x00000008u;
  enable_zpc_ = value;
}
inline void VehicleModelFilterConfig::set_enable_zpc(bool value) {
  _internal_set_enable_zpc(value);
  // @@protoc_insertion_point(field_set:civ.civloc.VehicleModelFilterConfig.enable_zpc)
}

// required bool enable_zac = 5;
inline bool VehicleModelFilterConfig::_internal_has_enable_zac() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool VehicleModelFilterConfig::has_enable_zac() const {
  return _internal_has_enable_zac();
}
inline void VehicleModelFilterConfig::clear_enable_zac() {
  enable_zac_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool VehicleModelFilterConfig::_internal_enable_zac() const {
  return enable_zac_;
}
inline bool VehicleModelFilterConfig::enable_zac() const {
  // @@protoc_insertion_point(field_get:civ.civloc.VehicleModelFilterConfig.enable_zac)
  return _internal_enable_zac();
}
inline void VehicleModelFilterConfig::_internal_set_enable_zac(bool value) {
  _has_bits_[0] |= 0x00000010u;
  enable_zac_ = value;
}
inline void VehicleModelFilterConfig::set_enable_zac(bool value) {
  _internal_set_enable_zac(value);
  // @@protoc_insertion_point(field_set:civ.civloc.VehicleModelFilterConfig.enable_zac)
}

// repeated double nhc_noise_mps = 10;
inline int VehicleModelFilterConfig::_internal_nhc_noise_mps_size() const {
  return nhc_noise_mps_.size();
}
inline int VehicleModelFilterConfig::nhc_noise_mps_size() const {
  return _internal_nhc_noise_mps_size();
}
inline void VehicleModelFilterConfig::clear_nhc_noise_mps() {
  nhc_noise_mps_.Clear();
}
inline double VehicleModelFilterConfig::_internal_nhc_noise_mps(int index) const {
  return nhc_noise_mps_.Get(index);
}
inline double VehicleModelFilterConfig::nhc_noise_mps(int index) const {
  // @@protoc_insertion_point(field_get:civ.civloc.VehicleModelFilterConfig.nhc_noise_mps)
  return _internal_nhc_noise_mps(index);
}
inline void VehicleModelFilterConfig::set_nhc_noise_mps(int index, double value) {
  nhc_noise_mps_.Set(index, value);
  // @@protoc_insertion_point(field_set:civ.civloc.VehicleModelFilterConfig.nhc_noise_mps)
}
inline void VehicleModelFilterConfig::_internal_add_nhc_noise_mps(double value) {
  nhc_noise_mps_.Add(value);
}
inline void VehicleModelFilterConfig::add_nhc_noise_mps(double value) {
  _internal_add_nhc_noise_mps(value);
  // @@protoc_insertion_point(field_add:civ.civloc.VehicleModelFilterConfig.nhc_noise_mps)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
VehicleModelFilterConfig::_internal_nhc_noise_mps() const {
  return nhc_noise_mps_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
VehicleModelFilterConfig::nhc_noise_mps() const {
  // @@protoc_insertion_point(field_list:civ.civloc.VehicleModelFilterConfig.nhc_noise_mps)
  return _internal_nhc_noise_mps();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
VehicleModelFilterConfig::_internal_mutable_nhc_noise_mps() {
  return &nhc_noise_mps_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
VehicleModelFilterConfig::mutable_nhc_noise_mps() {
  // @@protoc_insertion_point(field_mutable_list:civ.civloc.VehicleModelFilterConfig.nhc_noise_mps)
  return _internal_mutable_nhc_noise_mps();
}

// repeated double zupt_noise_mps = 11;
inline int VehicleModelFilterConfig::_internal_zupt_noise_mps_size() const {
  return zupt_noise_mps_.size();
}
inline int VehicleModelFilterConfig::zupt_noise_mps_size() const {
  return _internal_zupt_noise_mps_size();
}
inline void VehicleModelFilterConfig::clear_zupt_noise_mps() {
  zupt_noise_mps_.Clear();
}
inline double VehicleModelFilterConfig::_internal_zupt_noise_mps(int index) const {
  return zupt_noise_mps_.Get(index);
}
inline double VehicleModelFilterConfig::zupt_noise_mps(int index) const {
  // @@protoc_insertion_point(field_get:civ.civloc.VehicleModelFilterConfig.zupt_noise_mps)
  return _internal_zupt_noise_mps(index);
}
inline void VehicleModelFilterConfig::set_zupt_noise_mps(int index, double value) {
  zupt_noise_mps_.Set(index, value);
  // @@protoc_insertion_point(field_set:civ.civloc.VehicleModelFilterConfig.zupt_noise_mps)
}
inline void VehicleModelFilterConfig::_internal_add_zupt_noise_mps(double value) {
  zupt_noise_mps_.Add(value);
}
inline void VehicleModelFilterConfig::add_zupt_noise_mps(double value) {
  _internal_add_zupt_noise_mps(value);
  // @@protoc_insertion_point(field_add:civ.civloc.VehicleModelFilterConfig.zupt_noise_mps)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
VehicleModelFilterConfig::_internal_zupt_noise_mps() const {
  return zupt_noise_mps_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
VehicleModelFilterConfig::zupt_noise_mps() const {
  // @@protoc_insertion_point(field_list:civ.civloc.VehicleModelFilterConfig.zupt_noise_mps)
  return _internal_zupt_noise_mps();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
VehicleModelFilterConfig::_internal_mutable_zupt_noise_mps() {
  return &zupt_noise_mps_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
VehicleModelFilterConfig::mutable_zupt_noise_mps() {
  // @@protoc_insertion_point(field_mutable_list:civ.civloc.VehicleModelFilterConfig.zupt_noise_mps)
  return _internal_mutable_zupt_noise_mps();
}

// repeated double zgbc_noise_dps = 12;
inline int VehicleModelFilterConfig::_internal_zgbc_noise_dps_size() const {
  return zgbc_noise_dps_.size();
}
inline int VehicleModelFilterConfig::zgbc_noise_dps_size() const {
  return _internal_zgbc_noise_dps_size();
}
inline void VehicleModelFilterConfig::clear_zgbc_noise_dps() {
  zgbc_noise_dps_.Clear();
}
inline double VehicleModelFilterConfig::_internal_zgbc_noise_dps(int index) const {
  return zgbc_noise_dps_.Get(index);
}
inline double VehicleModelFilterConfig::zgbc_noise_dps(int index) const {
  // @@protoc_insertion_point(field_get:civ.civloc.VehicleModelFilterConfig.zgbc_noise_dps)
  return _internal_zgbc_noise_dps(index);
}
inline void VehicleModelFilterConfig::set_zgbc_noise_dps(int index, double value) {
  zgbc_noise_dps_.Set(index, value);
  // @@protoc_insertion_point(field_set:civ.civloc.VehicleModelFilterConfig.zgbc_noise_dps)
}
inline void VehicleModelFilterConfig::_internal_add_zgbc_noise_dps(double value) {
  zgbc_noise_dps_.Add(value);
}
inline void VehicleModelFilterConfig::add_zgbc_noise_dps(double value) {
  _internal_add_zgbc_noise_dps(value);
  // @@protoc_insertion_point(field_add:civ.civloc.VehicleModelFilterConfig.zgbc_noise_dps)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
VehicleModelFilterConfig::_internal_zgbc_noise_dps() const {
  return zgbc_noise_dps_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
VehicleModelFilterConfig::zgbc_noise_dps() const {
  // @@protoc_insertion_point(field_list:civ.civloc.VehicleModelFilterConfig.zgbc_noise_dps)
  return _internal_zgbc_noise_dps();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
VehicleModelFilterConfig::_internal_mutable_zgbc_noise_dps() {
  return &zgbc_noise_dps_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
VehicleModelFilterConfig::mutable_zgbc_noise_dps() {
  // @@protoc_insertion_point(field_mutable_list:civ.civloc.VehicleModelFilterConfig.zgbc_noise_dps)
  return _internal_mutable_zgbc_noise_dps();
}

// repeated double zac_noise_deg = 13;
inline int VehicleModelFilterConfig::_internal_zac_noise_deg_size() const {
  return zac_noise_deg_.size();
}
inline int VehicleModelFilterConfig::zac_noise_deg_size() const {
  return _internal_zac_noise_deg_size();
}
inline void VehicleModelFilterConfig::clear_zac_noise_deg() {
  zac_noise_deg_.Clear();
}
inline double VehicleModelFilterConfig::_internal_zac_noise_deg(int index) const {
  return zac_noise_deg_.Get(index);
}
inline double VehicleModelFilterConfig::zac_noise_deg(int index) const {
  // @@protoc_insertion_point(field_get:civ.civloc.VehicleModelFilterConfig.zac_noise_deg)
  return _internal_zac_noise_deg(index);
}
inline void VehicleModelFilterConfig::set_zac_noise_deg(int index, double value) {
  zac_noise_deg_.Set(index, value);
  // @@protoc_insertion_point(field_set:civ.civloc.VehicleModelFilterConfig.zac_noise_deg)
}
inline void VehicleModelFilterConfig::_internal_add_zac_noise_deg(double value) {
  zac_noise_deg_.Add(value);
}
inline void VehicleModelFilterConfig::add_zac_noise_deg(double value) {
  _internal_add_zac_noise_deg(value);
  // @@protoc_insertion_point(field_add:civ.civloc.VehicleModelFilterConfig.zac_noise_deg)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
VehicleModelFilterConfig::_internal_zac_noise_deg() const {
  return zac_noise_deg_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
VehicleModelFilterConfig::zac_noise_deg() const {
  // @@protoc_insertion_point(field_list:civ.civloc.VehicleModelFilterConfig.zac_noise_deg)
  return _internal_zac_noise_deg();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
VehicleModelFilterConfig::_internal_mutable_zac_noise_deg() {
  return &zac_noise_deg_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
VehicleModelFilterConfig::mutable_zac_noise_deg() {
  // @@protoc_insertion_point(field_mutable_list:civ.civloc.VehicleModelFilterConfig.zac_noise_deg)
  return _internal_mutable_zac_noise_deg();
}

// repeated double zpc_noise_m = 14;
inline int VehicleModelFilterConfig::_internal_zpc_noise_m_size() const {
  return zpc_noise_m_.size();
}
inline int VehicleModelFilterConfig::zpc_noise_m_size() const {
  return _internal_zpc_noise_m_size();
}
inline void VehicleModelFilterConfig::clear_zpc_noise_m() {
  zpc_noise_m_.Clear();
}
inline double VehicleModelFilterConfig::_internal_zpc_noise_m(int index) const {
  return zpc_noise_m_.Get(index);
}
inline double VehicleModelFilterConfig::zpc_noise_m(int index) const {
  // @@protoc_insertion_point(field_get:civ.civloc.VehicleModelFilterConfig.zpc_noise_m)
  return _internal_zpc_noise_m(index);
}
inline void VehicleModelFilterConfig::set_zpc_noise_m(int index, double value) {
  zpc_noise_m_.Set(index, value);
  // @@protoc_insertion_point(field_set:civ.civloc.VehicleModelFilterConfig.zpc_noise_m)
}
inline void VehicleModelFilterConfig::_internal_add_zpc_noise_m(double value) {
  zpc_noise_m_.Add(value);
}
inline void VehicleModelFilterConfig::add_zpc_noise_m(double value) {
  _internal_add_zpc_noise_m(value);
  // @@protoc_insertion_point(field_add:civ.civloc.VehicleModelFilterConfig.zpc_noise_m)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
VehicleModelFilterConfig::_internal_zpc_noise_m() const {
  return zpc_noise_m_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
VehicleModelFilterConfig::zpc_noise_m() const {
  // @@protoc_insertion_point(field_list:civ.civloc.VehicleModelFilterConfig.zpc_noise_m)
  return _internal_zpc_noise_m();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
VehicleModelFilterConfig::_internal_mutable_zpc_noise_m() {
  return &zpc_noise_m_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
VehicleModelFilterConfig::mutable_zpc_noise_m() {
  // @@protoc_insertion_point(field_mutable_list:civ.civloc.VehicleModelFilterConfig.zpc_noise_m)
  return _internal_mutable_zpc_noise_m();
}

// -------------------------------------------------------------------

// WheelOdoFilterConfig

// required bool enable_rear_wheel = 1;
inline bool WheelOdoFilterConfig::_internal_has_enable_rear_wheel() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool WheelOdoFilterConfig::has_enable_rear_wheel() const {
  return _internal_has_enable_rear_wheel();
}
inline void WheelOdoFilterConfig::clear_enable_rear_wheel() {
  enable_rear_wheel_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool WheelOdoFilterConfig::_internal_enable_rear_wheel() const {
  return enable_rear_wheel_;
}
inline bool WheelOdoFilterConfig::enable_rear_wheel() const {
  // @@protoc_insertion_point(field_get:civ.civloc.WheelOdoFilterConfig.enable_rear_wheel)
  return _internal_enable_rear_wheel();
}
inline void WheelOdoFilterConfig::_internal_set_enable_rear_wheel(bool value) {
  _has_bits_[0] |= 0x00000001u;
  enable_rear_wheel_ = value;
}
inline void WheelOdoFilterConfig::set_enable_rear_wheel(bool value) {
  _internal_set_enable_rear_wheel(value);
  // @@protoc_insertion_point(field_set:civ.civloc.WheelOdoFilterConfig.enable_rear_wheel)
}

// required bool enable_front_wheel = 2;
inline bool WheelOdoFilterConfig::_internal_has_enable_front_wheel() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool WheelOdoFilterConfig::has_enable_front_wheel() const {
  return _internal_has_enable_front_wheel();
}
inline void WheelOdoFilterConfig::clear_enable_front_wheel() {
  enable_front_wheel_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool WheelOdoFilterConfig::_internal_enable_front_wheel() const {
  return enable_front_wheel_;
}
inline bool WheelOdoFilterConfig::enable_front_wheel() const {
  // @@protoc_insertion_point(field_get:civ.civloc.WheelOdoFilterConfig.enable_front_wheel)
  return _internal_enable_front_wheel();
}
inline void WheelOdoFilterConfig::_internal_set_enable_front_wheel(bool value) {
  _has_bits_[0] |= 0x00000002u;
  enable_front_wheel_ = value;
}
inline void WheelOdoFilterConfig::set_enable_front_wheel(bool value) {
  _internal_set_enable_front_wheel(value);
  // @@protoc_insertion_point(field_set:civ.civloc.WheelOdoFilterConfig.enable_front_wheel)
}

// required bool enable_rear_diff = 3;
inline bool WheelOdoFilterConfig::_internal_has_enable_rear_diff() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool WheelOdoFilterConfig::has_enable_rear_diff() const {
  return _internal_has_enable_rear_diff();
}
inline void WheelOdoFilterConfig::clear_enable_rear_diff() {
  enable_rear_diff_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool WheelOdoFilterConfig::_internal_enable_rear_diff() const {
  return enable_rear_diff_;
}
inline bool WheelOdoFilterConfig::enable_rear_diff() const {
  // @@protoc_insertion_point(field_get:civ.civloc.WheelOdoFilterConfig.enable_rear_diff)
  return _internal_enable_rear_diff();
}
inline void WheelOdoFilterConfig::_internal_set_enable_rear_diff(bool value) {
  _has_bits_[0] |= 0x00000004u;
  enable_rear_diff_ = value;
}
inline void WheelOdoFilterConfig::set_enable_rear_diff(bool value) {
  _internal_set_enable_rear_diff(value);
  // @@protoc_insertion_point(field_set:civ.civloc.WheelOdoFilterConfig.enable_rear_diff)
}

// required bool enable_front_diff = 4;
inline bool WheelOdoFilterConfig::_internal_has_enable_front_diff() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool WheelOdoFilterConfig::has_enable_front_diff() const {
  return _internal_has_enable_front_diff();
}
inline void WheelOdoFilterConfig::clear_enable_front_diff() {
  enable_front_diff_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool WheelOdoFilterConfig::_internal_enable_front_diff() const {
  return enable_front_diff_;
}
inline bool WheelOdoFilterConfig::enable_front_diff() const {
  // @@protoc_insertion_point(field_get:civ.civloc.WheelOdoFilterConfig.enable_front_diff)
  return _internal_enable_front_diff();
}
inline void WheelOdoFilterConfig::_internal_set_enable_front_diff(bool value) {
  _has_bits_[0] |= 0x00000008u;
  enable_front_diff_ = value;
}
inline void WheelOdoFilterConfig::set_enable_front_diff(bool value) {
  _internal_set_enable_front_diff(value);
  // @@protoc_insertion_point(field_set:civ.civloc.WheelOdoFilterConfig.enable_front_diff)
}

// repeated double rear_wheel_noise_mps = 5;
inline int WheelOdoFilterConfig::_internal_rear_wheel_noise_mps_size() const {
  return rear_wheel_noise_mps_.size();
}
inline int WheelOdoFilterConfig::rear_wheel_noise_mps_size() const {
  return _internal_rear_wheel_noise_mps_size();
}
inline void WheelOdoFilterConfig::clear_rear_wheel_noise_mps() {
  rear_wheel_noise_mps_.Clear();
}
inline double WheelOdoFilterConfig::_internal_rear_wheel_noise_mps(int index) const {
  return rear_wheel_noise_mps_.Get(index);
}
inline double WheelOdoFilterConfig::rear_wheel_noise_mps(int index) const {
  // @@protoc_insertion_point(field_get:civ.civloc.WheelOdoFilterConfig.rear_wheel_noise_mps)
  return _internal_rear_wheel_noise_mps(index);
}
inline void WheelOdoFilterConfig::set_rear_wheel_noise_mps(int index, double value) {
  rear_wheel_noise_mps_.Set(index, value);
  // @@protoc_insertion_point(field_set:civ.civloc.WheelOdoFilterConfig.rear_wheel_noise_mps)
}
inline void WheelOdoFilterConfig::_internal_add_rear_wheel_noise_mps(double value) {
  rear_wheel_noise_mps_.Add(value);
}
inline void WheelOdoFilterConfig::add_rear_wheel_noise_mps(double value) {
  _internal_add_rear_wheel_noise_mps(value);
  // @@protoc_insertion_point(field_add:civ.civloc.WheelOdoFilterConfig.rear_wheel_noise_mps)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
WheelOdoFilterConfig::_internal_rear_wheel_noise_mps() const {
  return rear_wheel_noise_mps_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
WheelOdoFilterConfig::rear_wheel_noise_mps() const {
  // @@protoc_insertion_point(field_list:civ.civloc.WheelOdoFilterConfig.rear_wheel_noise_mps)
  return _internal_rear_wheel_noise_mps();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
WheelOdoFilterConfig::_internal_mutable_rear_wheel_noise_mps() {
  return &rear_wheel_noise_mps_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
WheelOdoFilterConfig::mutable_rear_wheel_noise_mps() {
  // @@protoc_insertion_point(field_mutable_list:civ.civloc.WheelOdoFilterConfig.rear_wheel_noise_mps)
  return _internal_mutable_rear_wheel_noise_mps();
}

// repeated double front_wheel_noise_mps = 6;
inline int WheelOdoFilterConfig::_internal_front_wheel_noise_mps_size() const {
  return front_wheel_noise_mps_.size();
}
inline int WheelOdoFilterConfig::front_wheel_noise_mps_size() const {
  return _internal_front_wheel_noise_mps_size();
}
inline void WheelOdoFilterConfig::clear_front_wheel_noise_mps() {
  front_wheel_noise_mps_.Clear();
}
inline double WheelOdoFilterConfig::_internal_front_wheel_noise_mps(int index) const {
  return front_wheel_noise_mps_.Get(index);
}
inline double WheelOdoFilterConfig::front_wheel_noise_mps(int index) const {
  // @@protoc_insertion_point(field_get:civ.civloc.WheelOdoFilterConfig.front_wheel_noise_mps)
  return _internal_front_wheel_noise_mps(index);
}
inline void WheelOdoFilterConfig::set_front_wheel_noise_mps(int index, double value) {
  front_wheel_noise_mps_.Set(index, value);
  // @@protoc_insertion_point(field_set:civ.civloc.WheelOdoFilterConfig.front_wheel_noise_mps)
}
inline void WheelOdoFilterConfig::_internal_add_front_wheel_noise_mps(double value) {
  front_wheel_noise_mps_.Add(value);
}
inline void WheelOdoFilterConfig::add_front_wheel_noise_mps(double value) {
  _internal_add_front_wheel_noise_mps(value);
  // @@protoc_insertion_point(field_add:civ.civloc.WheelOdoFilterConfig.front_wheel_noise_mps)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
WheelOdoFilterConfig::_internal_front_wheel_noise_mps() const {
  return front_wheel_noise_mps_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
WheelOdoFilterConfig::front_wheel_noise_mps() const {
  // @@protoc_insertion_point(field_list:civ.civloc.WheelOdoFilterConfig.front_wheel_noise_mps)
  return _internal_front_wheel_noise_mps();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
WheelOdoFilterConfig::_internal_mutable_front_wheel_noise_mps() {
  return &front_wheel_noise_mps_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
WheelOdoFilterConfig::mutable_front_wheel_noise_mps() {
  // @@protoc_insertion_point(field_mutable_list:civ.civloc.WheelOdoFilterConfig.front_wheel_noise_mps)
  return _internal_mutable_front_wheel_noise_mps();
}

// repeated double rear_diff_noise_mps = 7;
inline int WheelOdoFilterConfig::_internal_rear_diff_noise_mps_size() const {
  return rear_diff_noise_mps_.size();
}
inline int WheelOdoFilterConfig::rear_diff_noise_mps_size() const {
  return _internal_rear_diff_noise_mps_size();
}
inline void WheelOdoFilterConfig::clear_rear_diff_noise_mps() {
  rear_diff_noise_mps_.Clear();
}
inline double WheelOdoFilterConfig::_internal_rear_diff_noise_mps(int index) const {
  return rear_diff_noise_mps_.Get(index);
}
inline double WheelOdoFilterConfig::rear_diff_noise_mps(int index) const {
  // @@protoc_insertion_point(field_get:civ.civloc.WheelOdoFilterConfig.rear_diff_noise_mps)
  return _internal_rear_diff_noise_mps(index);
}
inline void WheelOdoFilterConfig::set_rear_diff_noise_mps(int index, double value) {
  rear_diff_noise_mps_.Set(index, value);
  // @@protoc_insertion_point(field_set:civ.civloc.WheelOdoFilterConfig.rear_diff_noise_mps)
}
inline void WheelOdoFilterConfig::_internal_add_rear_diff_noise_mps(double value) {
  rear_diff_noise_mps_.Add(value);
}
inline void WheelOdoFilterConfig::add_rear_diff_noise_mps(double value) {
  _internal_add_rear_diff_noise_mps(value);
  // @@protoc_insertion_point(field_add:civ.civloc.WheelOdoFilterConfig.rear_diff_noise_mps)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
WheelOdoFilterConfig::_internal_rear_diff_noise_mps() const {
  return rear_diff_noise_mps_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
WheelOdoFilterConfig::rear_diff_noise_mps() const {
  // @@protoc_insertion_point(field_list:civ.civloc.WheelOdoFilterConfig.rear_diff_noise_mps)
  return _internal_rear_diff_noise_mps();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
WheelOdoFilterConfig::_internal_mutable_rear_diff_noise_mps() {
  return &rear_diff_noise_mps_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
WheelOdoFilterConfig::mutable_rear_diff_noise_mps() {
  // @@protoc_insertion_point(field_mutable_list:civ.civloc.WheelOdoFilterConfig.rear_diff_noise_mps)
  return _internal_mutable_rear_diff_noise_mps();
}

// repeated double front_diff_noise_mps = 8;
inline int WheelOdoFilterConfig::_internal_front_diff_noise_mps_size() const {
  return front_diff_noise_mps_.size();
}
inline int WheelOdoFilterConfig::front_diff_noise_mps_size() const {
  return _internal_front_diff_noise_mps_size();
}
inline void WheelOdoFilterConfig::clear_front_diff_noise_mps() {
  front_diff_noise_mps_.Clear();
}
inline double WheelOdoFilterConfig::_internal_front_diff_noise_mps(int index) const {
  return front_diff_noise_mps_.Get(index);
}
inline double WheelOdoFilterConfig::front_diff_noise_mps(int index) const {
  // @@protoc_insertion_point(field_get:civ.civloc.WheelOdoFilterConfig.front_diff_noise_mps)
  return _internal_front_diff_noise_mps(index);
}
inline void WheelOdoFilterConfig::set_front_diff_noise_mps(int index, double value) {
  front_diff_noise_mps_.Set(index, value);
  // @@protoc_insertion_point(field_set:civ.civloc.WheelOdoFilterConfig.front_diff_noise_mps)
}
inline void WheelOdoFilterConfig::_internal_add_front_diff_noise_mps(double value) {
  front_diff_noise_mps_.Add(value);
}
inline void WheelOdoFilterConfig::add_front_diff_noise_mps(double value) {
  _internal_add_front_diff_noise_mps(value);
  // @@protoc_insertion_point(field_add:civ.civloc.WheelOdoFilterConfig.front_diff_noise_mps)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
WheelOdoFilterConfig::_internal_front_diff_noise_mps() const {
  return front_diff_noise_mps_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
WheelOdoFilterConfig::front_diff_noise_mps() const {
  // @@protoc_insertion_point(field_list:civ.civloc.WheelOdoFilterConfig.front_diff_noise_mps)
  return _internal_front_diff_noise_mps();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
WheelOdoFilterConfig::_internal_mutable_front_diff_noise_mps() {
  return &front_diff_noise_mps_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
WheelOdoFilterConfig::mutable_front_diff_noise_mps() {
  // @@protoc_insertion_point(field_mutable_list:civ.civloc.WheelOdoFilterConfig.front_diff_noise_mps)
  return _internal_mutable_front_diff_noise_mps();
}

// -------------------------------------------------------------------

// NDTConfig

// required double res_m = 1;
inline bool NDTConfig::_internal_has_res_m() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool NDTConfig::has_res_m() const {
  return _internal_has_res_m();
}
inline void NDTConfig::clear_res_m() {
  res_m_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double NDTConfig::_internal_res_m() const {
  return res_m_;
}
inline double NDTConfig::res_m() const {
  // @@protoc_insertion_point(field_get:civ.civloc.NDTConfig.res_m)
  return _internal_res_m();
}
inline void NDTConfig::_internal_set_res_m(double value) {
  _has_bits_[0] |= 0x00000001u;
  res_m_ = value;
}
inline void NDTConfig::set_res_m(double value) {
  _internal_set_res_m(value);
  // @@protoc_insertion_point(field_set:civ.civloc.NDTConfig.res_m)
}

// required double step_size_m = 2;
inline bool NDTConfig::_internal_has_step_size_m() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool NDTConfig::has_step_size_m() const {
  return _internal_has_step_size_m();
}
inline void NDTConfig::clear_step_size_m() {
  step_size_m_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double NDTConfig::_internal_step_size_m() const {
  return step_size_m_;
}
inline double NDTConfig::step_size_m() const {
  // @@protoc_insertion_point(field_get:civ.civloc.NDTConfig.step_size_m)
  return _internal_step_size_m();
}
inline void NDTConfig::_internal_set_step_size_m(double value) {
  _has_bits_[0] |= 0x00000002u;
  step_size_m_ = value;
}
inline void NDTConfig::set_step_size_m(double value) {
  _internal_set_step_size_m(value);
  // @@protoc_insertion_point(field_set:civ.civloc.NDTConfig.step_size_m)
}

// required double trans_eps_m = 3;
inline bool NDTConfig::_internal_has_trans_eps_m() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool NDTConfig::has_trans_eps_m() const {
  return _internal_has_trans_eps_m();
}
inline void NDTConfig::clear_trans_eps_m() {
  trans_eps_m_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double NDTConfig::_internal_trans_eps_m() const {
  return trans_eps_m_;
}
inline double NDTConfig::trans_eps_m() const {
  // @@protoc_insertion_point(field_get:civ.civloc.NDTConfig.trans_eps_m)
  return _internal_trans_eps_m();
}
inline void NDTConfig::_internal_set_trans_eps_m(double value) {
  _has_bits_[0] |= 0x00000004u;
  trans_eps_m_ = value;
}
inline void NDTConfig::set_trans_eps_m(double value) {
  _internal_set_trans_eps_m(value);
  // @@protoc_insertion_point(field_set:civ.civloc.NDTConfig.trans_eps_m)
}

// required double rot_eps_deg = 4;
inline bool NDTConfig::_internal_has_rot_eps_deg() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool NDTConfig::has_rot_eps_deg() const {
  return _internal_has_rot_eps_deg();
}
inline void NDTConfig::clear_rot_eps_deg() {
  rot_eps_deg_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline double NDTConfig::_internal_rot_eps_deg() const {
  return rot_eps_deg_;
}
inline double NDTConfig::rot_eps_deg() const {
  // @@protoc_insertion_point(field_get:civ.civloc.NDTConfig.rot_eps_deg)
  return _internal_rot_eps_deg();
}
inline void NDTConfig::_internal_set_rot_eps_deg(double value) {
  _has_bits_[0] |= 0x00000008u;
  rot_eps_deg_ = value;
}
inline void NDTConfig::set_rot_eps_deg(double value) {
  _internal_set_rot_eps_deg(value);
  // @@protoc_insertion_point(field_set:civ.civloc.NDTConfig.rot_eps_deg)
}

// required double max_iter = 5;
inline bool NDTConfig::_internal_has_max_iter() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool NDTConfig::has_max_iter() const {
  return _internal_has_max_iter();
}
inline void NDTConfig::clear_max_iter() {
  max_iter_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline double NDTConfig::_internal_max_iter() const {
  return max_iter_;
}
inline double NDTConfig::max_iter() const {
  // @@protoc_insertion_point(field_get:civ.civloc.NDTConfig.max_iter)
  return _internal_max_iter();
}
inline void NDTConfig::_internal_set_max_iter(double value) {
  _has_bits_[0] |= 0x00000010u;
  max_iter_ = value;
}
inline void NDTConfig::set_max_iter(double value) {
  _internal_set_max_iter(value);
  // @@protoc_insertion_point(field_set:civ.civloc.NDTConfig.max_iter)
}

// required double score_threshold = 6;
inline bool NDTConfig::_internal_has_score_threshold() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool NDTConfig::has_score_threshold() const {
  return _internal_has_score_threshold();
}
inline void NDTConfig::clear_score_threshold() {
  score_threshold_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline double NDTConfig::_internal_score_threshold() const {
  return score_threshold_;
}
inline double NDTConfig::score_threshold() const {
  // @@protoc_insertion_point(field_get:civ.civloc.NDTConfig.score_threshold)
  return _internal_score_threshold();
}
inline void NDTConfig::_internal_set_score_threshold(double value) {
  _has_bits_[0] |= 0x00000020u;
  score_threshold_ = value;
}
inline void NDTConfig::set_score_threshold(double value) {
  _internal_set_score_threshold(value);
  // @@protoc_insertion_point(field_set:civ.civloc.NDTConfig.score_threshold)
}

// required double transfer_prob_threshold = 7;
inline bool NDTConfig::_internal_has_transfer_prob_threshold() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool NDTConfig::has_transfer_prob_threshold() const {
  return _internal_has_transfer_prob_threshold();
}
inline void NDTConfig::clear_transfer_prob_threshold() {
  transfer_prob_threshold_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline double NDTConfig::_internal_transfer_prob_threshold() const {
  return transfer_prob_threshold_;
}
inline double NDTConfig::transfer_prob_threshold() const {
  // @@protoc_insertion_point(field_get:civ.civloc.NDTConfig.transfer_prob_threshold)
  return _internal_transfer_prob_threshold();
}
inline void NDTConfig::_internal_set_transfer_prob_threshold(double value) {
  _has_bits_[0] |= 0x00000040u;
  transfer_prob_threshold_ = value;
}
inline void NDTConfig::set_transfer_prob_threshold(double value) {
  _internal_set_transfer_prob_threshold(value);
  // @@protoc_insertion_point(field_set:civ.civloc.NDTConfig.transfer_prob_threshold)
}

// repeated double online_scan_voxel_m = 8;
inline int NDTConfig::_internal_online_scan_voxel_m_size() const {
  return online_scan_voxel_m_.size();
}
inline int NDTConfig::online_scan_voxel_m_size() const {
  return _internal_online_scan_voxel_m_size();
}
inline void NDTConfig::clear_online_scan_voxel_m() {
  online_scan_voxel_m_.Clear();
}
inline double NDTConfig::_internal_online_scan_voxel_m(int index) const {
  return online_scan_voxel_m_.Get(index);
}
inline double NDTConfig::online_scan_voxel_m(int index) const {
  // @@protoc_insertion_point(field_get:civ.civloc.NDTConfig.online_scan_voxel_m)
  return _internal_online_scan_voxel_m(index);
}
inline void NDTConfig::set_online_scan_voxel_m(int index, double value) {
  online_scan_voxel_m_.Set(index, value);
  // @@protoc_insertion_point(field_set:civ.civloc.NDTConfig.online_scan_voxel_m)
}
inline void NDTConfig::_internal_add_online_scan_voxel_m(double value) {
  online_scan_voxel_m_.Add(value);
}
inline void NDTConfig::add_online_scan_voxel_m(double value) {
  _internal_add_online_scan_voxel_m(value);
  // @@protoc_insertion_point(field_add:civ.civloc.NDTConfig.online_scan_voxel_m)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
NDTConfig::_internal_online_scan_voxel_m() const {
  return online_scan_voxel_m_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
NDTConfig::online_scan_voxel_m() const {
  // @@protoc_insertion_point(field_list:civ.civloc.NDTConfig.online_scan_voxel_m)
  return _internal_online_scan_voxel_m();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
NDTConfig::_internal_mutable_online_scan_voxel_m() {
  return &online_scan_voxel_m_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
NDTConfig::mutable_online_scan_voxel_m() {
  // @@protoc_insertion_point(field_mutable_list:civ.civloc.NDTConfig.online_scan_voxel_m)
  return _internal_mutable_online_scan_voxel_m();
}

// repeated double local_map_voxel_m = 9;
inline int NDTConfig::_internal_local_map_voxel_m_size() const {
  return local_map_voxel_m_.size();
}
inline int NDTConfig::local_map_voxel_m_size() const {
  return _internal_local_map_voxel_m_size();
}
inline void NDTConfig::clear_local_map_voxel_m() {
  local_map_voxel_m_.Clear();
}
inline double NDTConfig::_internal_local_map_voxel_m(int index) const {
  return local_map_voxel_m_.Get(index);
}
inline double NDTConfig::local_map_voxel_m(int index) const {
  // @@protoc_insertion_point(field_get:civ.civloc.NDTConfig.local_map_voxel_m)
  return _internal_local_map_voxel_m(index);
}
inline void NDTConfig::set_local_map_voxel_m(int index, double value) {
  local_map_voxel_m_.Set(index, value);
  // @@protoc_insertion_point(field_set:civ.civloc.NDTConfig.local_map_voxel_m)
}
inline void NDTConfig::_internal_add_local_map_voxel_m(double value) {
  local_map_voxel_m_.Add(value);
}
inline void NDTConfig::add_local_map_voxel_m(double value) {
  _internal_add_local_map_voxel_m(value);
  // @@protoc_insertion_point(field_add:civ.civloc.NDTConfig.local_map_voxel_m)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
NDTConfig::_internal_local_map_voxel_m() const {
  return local_map_voxel_m_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
NDTConfig::local_map_voxel_m() const {
  // @@protoc_insertion_point(field_list:civ.civloc.NDTConfig.local_map_voxel_m)
  return _internal_local_map_voxel_m();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
NDTConfig::_internal_mutable_local_map_voxel_m() {
  return &local_map_voxel_m_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
NDTConfig::mutable_local_map_voxel_m() {
  // @@protoc_insertion_point(field_mutable_list:civ.civloc.NDTConfig.local_map_voxel_m)
  return _internal_mutable_local_map_voxel_m();
}

// -------------------------------------------------------------------

// LidarFilterConfig

// required bool enable_ndt_map_match = 1;
inline bool LidarFilterConfig::_internal_has_enable_ndt_map_match() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool LidarFilterConfig::has_enable_ndt_map_match() const {
  return _internal_has_enable_ndt_map_match();
}
inline void LidarFilterConfig::clear_enable_ndt_map_match() {
  enable_ndt_map_match_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool LidarFilterConfig::_internal_enable_ndt_map_match() const {
  return enable_ndt_map_match_;
}
inline bool LidarFilterConfig::enable_ndt_map_match() const {
  // @@protoc_insertion_point(field_get:civ.civloc.LidarFilterConfig.enable_ndt_map_match)
  return _internal_enable_ndt_map_match();
}
inline void LidarFilterConfig::_internal_set_enable_ndt_map_match(bool value) {
  _has_bits_[0] |= 0x00000001u;
  enable_ndt_map_match_ = value;
}
inline void LidarFilterConfig::set_enable_ndt_map_match(bool value) {
  _internal_set_enable_ndt_map_match(value);
  // @@protoc_insertion_point(field_set:civ.civloc.LidarFilterConfig.enable_ndt_map_match)
}

// required bool enable_ndt_frame_match = 2;
inline bool LidarFilterConfig::_internal_has_enable_ndt_frame_match() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool LidarFilterConfig::has_enable_ndt_frame_match() const {
  return _internal_has_enable_ndt_frame_match();
}
inline void LidarFilterConfig::clear_enable_ndt_frame_match() {
  enable_ndt_frame_match_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool LidarFilterConfig::_internal_enable_ndt_frame_match() const {
  return enable_ndt_frame_match_;
}
inline bool LidarFilterConfig::enable_ndt_frame_match() const {
  // @@protoc_insertion_point(field_get:civ.civloc.LidarFilterConfig.enable_ndt_frame_match)
  return _internal_enable_ndt_frame_match();
}
inline void LidarFilterConfig::_internal_set_enable_ndt_frame_match(bool value) {
  _has_bits_[0] |= 0x00000002u;
  enable_ndt_frame_match_ = value;
}
inline void LidarFilterConfig::set_enable_ndt_frame_match(bool value) {
  _internal_set_enable_ndt_frame_match(value);
  // @@protoc_insertion_point(field_set:civ.civloc.LidarFilterConfig.enable_ndt_frame_match)
}

// repeated double ndt_map_match_transfer_prob_threshold = 3;
inline int LidarFilterConfig::_internal_ndt_map_match_transfer_prob_threshold_size() const {
  return ndt_map_match_transfer_prob_threshold_.size();
}
inline int LidarFilterConfig::ndt_map_match_transfer_prob_threshold_size() const {
  return _internal_ndt_map_match_transfer_prob_threshold_size();
}
inline void LidarFilterConfig::clear_ndt_map_match_transfer_prob_threshold() {
  ndt_map_match_transfer_prob_threshold_.Clear();
}
inline double LidarFilterConfig::_internal_ndt_map_match_transfer_prob_threshold(int index) const {
  return ndt_map_match_transfer_prob_threshold_.Get(index);
}
inline double LidarFilterConfig::ndt_map_match_transfer_prob_threshold(int index) const {
  // @@protoc_insertion_point(field_get:civ.civloc.LidarFilterConfig.ndt_map_match_transfer_prob_threshold)
  return _internal_ndt_map_match_transfer_prob_threshold(index);
}
inline void LidarFilterConfig::set_ndt_map_match_transfer_prob_threshold(int index, double value) {
  ndt_map_match_transfer_prob_threshold_.Set(index, value);
  // @@protoc_insertion_point(field_set:civ.civloc.LidarFilterConfig.ndt_map_match_transfer_prob_threshold)
}
inline void LidarFilterConfig::_internal_add_ndt_map_match_transfer_prob_threshold(double value) {
  ndt_map_match_transfer_prob_threshold_.Add(value);
}
inline void LidarFilterConfig::add_ndt_map_match_transfer_prob_threshold(double value) {
  _internal_add_ndt_map_match_transfer_prob_threshold(value);
  // @@protoc_insertion_point(field_add:civ.civloc.LidarFilterConfig.ndt_map_match_transfer_prob_threshold)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
LidarFilterConfig::_internal_ndt_map_match_transfer_prob_threshold() const {
  return ndt_map_match_transfer_prob_threshold_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
LidarFilterConfig::ndt_map_match_transfer_prob_threshold() const {
  // @@protoc_insertion_point(field_list:civ.civloc.LidarFilterConfig.ndt_map_match_transfer_prob_threshold)
  return _internal_ndt_map_match_transfer_prob_threshold();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
LidarFilterConfig::_internal_mutable_ndt_map_match_transfer_prob_threshold() {
  return &ndt_map_match_transfer_prob_threshold_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
LidarFilterConfig::mutable_ndt_map_match_transfer_prob_threshold() {
  // @@protoc_insertion_point(field_mutable_list:civ.civloc.LidarFilterConfig.ndt_map_match_transfer_prob_threshold)
  return _internal_mutable_ndt_map_match_transfer_prob_threshold();
}

// repeated double ndt_map_match_score_threshold = 4;
inline int LidarFilterConfig::_internal_ndt_map_match_score_threshold_size() const {
  return ndt_map_match_score_threshold_.size();
}
inline int LidarFilterConfig::ndt_map_match_score_threshold_size() const {
  return _internal_ndt_map_match_score_threshold_size();
}
inline void LidarFilterConfig::clear_ndt_map_match_score_threshold() {
  ndt_map_match_score_threshold_.Clear();
}
inline double LidarFilterConfig::_internal_ndt_map_match_score_threshold(int index) const {
  return ndt_map_match_score_threshold_.Get(index);
}
inline double LidarFilterConfig::ndt_map_match_score_threshold(int index) const {
  // @@protoc_insertion_point(field_get:civ.civloc.LidarFilterConfig.ndt_map_match_score_threshold)
  return _internal_ndt_map_match_score_threshold(index);
}
inline void LidarFilterConfig::set_ndt_map_match_score_threshold(int index, double value) {
  ndt_map_match_score_threshold_.Set(index, value);
  // @@protoc_insertion_point(field_set:civ.civloc.LidarFilterConfig.ndt_map_match_score_threshold)
}
inline void LidarFilterConfig::_internal_add_ndt_map_match_score_threshold(double value) {
  ndt_map_match_score_threshold_.Add(value);
}
inline void LidarFilterConfig::add_ndt_map_match_score_threshold(double value) {
  _internal_add_ndt_map_match_score_threshold(value);
  // @@protoc_insertion_point(field_add:civ.civloc.LidarFilterConfig.ndt_map_match_score_threshold)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
LidarFilterConfig::_internal_ndt_map_match_score_threshold() const {
  return ndt_map_match_score_threshold_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
LidarFilterConfig::ndt_map_match_score_threshold() const {
  // @@protoc_insertion_point(field_list:civ.civloc.LidarFilterConfig.ndt_map_match_score_threshold)
  return _internal_ndt_map_match_score_threshold();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
LidarFilterConfig::_internal_mutable_ndt_map_match_score_threshold() {
  return &ndt_map_match_score_threshold_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
LidarFilterConfig::mutable_ndt_map_match_score_threshold() {
  // @@protoc_insertion_point(field_mutable_list:civ.civloc.LidarFilterConfig.ndt_map_match_score_threshold)
  return _internal_mutable_ndt_map_match_score_threshold();
}

// repeated double ndt_map_match_nice_noise_mps = 5;
inline int LidarFilterConfig::_internal_ndt_map_match_nice_noise_mps_size() const {
  return ndt_map_match_nice_noise_mps_.size();
}
inline int LidarFilterConfig::ndt_map_match_nice_noise_mps_size() const {
  return _internal_ndt_map_match_nice_noise_mps_size();
}
inline void LidarFilterConfig::clear_ndt_map_match_nice_noise_mps() {
  ndt_map_match_nice_noise_mps_.Clear();
}
inline double LidarFilterConfig::_internal_ndt_map_match_nice_noise_mps(int index) const {
  return ndt_map_match_nice_noise_mps_.Get(index);
}
inline double LidarFilterConfig::ndt_map_match_nice_noise_mps(int index) const {
  // @@protoc_insertion_point(field_get:civ.civloc.LidarFilterConfig.ndt_map_match_nice_noise_mps)
  return _internal_ndt_map_match_nice_noise_mps(index);
}
inline void LidarFilterConfig::set_ndt_map_match_nice_noise_mps(int index, double value) {
  ndt_map_match_nice_noise_mps_.Set(index, value);
  // @@protoc_insertion_point(field_set:civ.civloc.LidarFilterConfig.ndt_map_match_nice_noise_mps)
}
inline void LidarFilterConfig::_internal_add_ndt_map_match_nice_noise_mps(double value) {
  ndt_map_match_nice_noise_mps_.Add(value);
}
inline void LidarFilterConfig::add_ndt_map_match_nice_noise_mps(double value) {
  _internal_add_ndt_map_match_nice_noise_mps(value);
  // @@protoc_insertion_point(field_add:civ.civloc.LidarFilterConfig.ndt_map_match_nice_noise_mps)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
LidarFilterConfig::_internal_ndt_map_match_nice_noise_mps() const {
  return ndt_map_match_nice_noise_mps_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
LidarFilterConfig::ndt_map_match_nice_noise_mps() const {
  // @@protoc_insertion_point(field_list:civ.civloc.LidarFilterConfig.ndt_map_match_nice_noise_mps)
  return _internal_ndt_map_match_nice_noise_mps();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
LidarFilterConfig::_internal_mutable_ndt_map_match_nice_noise_mps() {
  return &ndt_map_match_nice_noise_mps_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
LidarFilterConfig::mutable_ndt_map_match_nice_noise_mps() {
  // @@protoc_insertion_point(field_mutable_list:civ.civloc.LidarFilterConfig.ndt_map_match_nice_noise_mps)
  return _internal_mutable_ndt_map_match_nice_noise_mps();
}

// repeated double ndt_map_match_bad_noise_mps = 6;
inline int LidarFilterConfig::_internal_ndt_map_match_bad_noise_mps_size() const {
  return ndt_map_match_bad_noise_mps_.size();
}
inline int LidarFilterConfig::ndt_map_match_bad_noise_mps_size() const {
  return _internal_ndt_map_match_bad_noise_mps_size();
}
inline void LidarFilterConfig::clear_ndt_map_match_bad_noise_mps() {
  ndt_map_match_bad_noise_mps_.Clear();
}
inline double LidarFilterConfig::_internal_ndt_map_match_bad_noise_mps(int index) const {
  return ndt_map_match_bad_noise_mps_.Get(index);
}
inline double LidarFilterConfig::ndt_map_match_bad_noise_mps(int index) const {
  // @@protoc_insertion_point(field_get:civ.civloc.LidarFilterConfig.ndt_map_match_bad_noise_mps)
  return _internal_ndt_map_match_bad_noise_mps(index);
}
inline void LidarFilterConfig::set_ndt_map_match_bad_noise_mps(int index, double value) {
  ndt_map_match_bad_noise_mps_.Set(index, value);
  // @@protoc_insertion_point(field_set:civ.civloc.LidarFilterConfig.ndt_map_match_bad_noise_mps)
}
inline void LidarFilterConfig::_internal_add_ndt_map_match_bad_noise_mps(double value) {
  ndt_map_match_bad_noise_mps_.Add(value);
}
inline void LidarFilterConfig::add_ndt_map_match_bad_noise_mps(double value) {
  _internal_add_ndt_map_match_bad_noise_mps(value);
  // @@protoc_insertion_point(field_add:civ.civloc.LidarFilterConfig.ndt_map_match_bad_noise_mps)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
LidarFilterConfig::_internal_ndt_map_match_bad_noise_mps() const {
  return ndt_map_match_bad_noise_mps_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
LidarFilterConfig::ndt_map_match_bad_noise_mps() const {
  // @@protoc_insertion_point(field_list:civ.civloc.LidarFilterConfig.ndt_map_match_bad_noise_mps)
  return _internal_ndt_map_match_bad_noise_mps();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
LidarFilterConfig::_internal_mutable_ndt_map_match_bad_noise_mps() {
  return &ndt_map_match_bad_noise_mps_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
LidarFilterConfig::mutable_ndt_map_match_bad_noise_mps() {
  // @@protoc_insertion_point(field_mutable_list:civ.civloc.LidarFilterConfig.ndt_map_match_bad_noise_mps)
  return _internal_mutable_ndt_map_match_bad_noise_mps();
}

// repeated double ndt_frame_match_noise_mps = 7;
inline int LidarFilterConfig::_internal_ndt_frame_match_noise_mps_size() const {
  return ndt_frame_match_noise_mps_.size();
}
inline int LidarFilterConfig::ndt_frame_match_noise_mps_size() const {
  return _internal_ndt_frame_match_noise_mps_size();
}
inline void LidarFilterConfig::clear_ndt_frame_match_noise_mps() {
  ndt_frame_match_noise_mps_.Clear();
}
inline double LidarFilterConfig::_internal_ndt_frame_match_noise_mps(int index) const {
  return ndt_frame_match_noise_mps_.Get(index);
}
inline double LidarFilterConfig::ndt_frame_match_noise_mps(int index) const {
  // @@protoc_insertion_point(field_get:civ.civloc.LidarFilterConfig.ndt_frame_match_noise_mps)
  return _internal_ndt_frame_match_noise_mps(index);
}
inline void LidarFilterConfig::set_ndt_frame_match_noise_mps(int index, double value) {
  ndt_frame_match_noise_mps_.Set(index, value);
  // @@protoc_insertion_point(field_set:civ.civloc.LidarFilterConfig.ndt_frame_match_noise_mps)
}
inline void LidarFilterConfig::_internal_add_ndt_frame_match_noise_mps(double value) {
  ndt_frame_match_noise_mps_.Add(value);
}
inline void LidarFilterConfig::add_ndt_frame_match_noise_mps(double value) {
  _internal_add_ndt_frame_match_noise_mps(value);
  // @@protoc_insertion_point(field_add:civ.civloc.LidarFilterConfig.ndt_frame_match_noise_mps)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
LidarFilterConfig::_internal_ndt_frame_match_noise_mps() const {
  return ndt_frame_match_noise_mps_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
LidarFilterConfig::ndt_frame_match_noise_mps() const {
  // @@protoc_insertion_point(field_list:civ.civloc.LidarFilterConfig.ndt_frame_match_noise_mps)
  return _internal_ndt_frame_match_noise_mps();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
LidarFilterConfig::_internal_mutable_ndt_frame_match_noise_mps() {
  return &ndt_frame_match_noise_mps_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
LidarFilterConfig::mutable_ndt_frame_match_noise_mps() {
  // @@protoc_insertion_point(field_mutable_list:civ.civloc.LidarFilterConfig.ndt_frame_match_noise_mps)
  return _internal_mutable_ndt_frame_match_noise_mps();
}

// -------------------------------------------------------------------

// VisionFilterConfig

// required bool enable_bev_line = 1;
inline bool VisionFilterConfig::_internal_has_enable_bev_line() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool VisionFilterConfig::has_enable_bev_line() const {
  return _internal_has_enable_bev_line();
}
inline void VisionFilterConfig::clear_enable_bev_line() {
  enable_bev_line_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool VisionFilterConfig::_internal_enable_bev_line() const {
  return enable_bev_line_;
}
inline bool VisionFilterConfig::enable_bev_line() const {
  // @@protoc_insertion_point(field_get:civ.civloc.VisionFilterConfig.enable_bev_line)
  return _internal_enable_bev_line();
}
inline void VisionFilterConfig::_internal_set_enable_bev_line(bool value) {
  _has_bits_[0] |= 0x00000004u;
  enable_bev_line_ = value;
}
inline void VisionFilterConfig::set_enable_bev_line(bool value) {
  _internal_set_enable_bev_line(value);
  // @@protoc_insertion_point(field_set:civ.civloc.VisionFilterConfig.enable_bev_line)
}

// required bool enable_bev_cubic_curv = 2;
inline bool VisionFilterConfig::_internal_has_enable_bev_cubic_curv() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool VisionFilterConfig::has_enable_bev_cubic_curv() const {
  return _internal_has_enable_bev_cubic_curv();
}
inline void VisionFilterConfig::clear_enable_bev_cubic_curv() {
  enable_bev_cubic_curv_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool VisionFilterConfig::_internal_enable_bev_cubic_curv() const {
  return enable_bev_cubic_curv_;
}
inline bool VisionFilterConfig::enable_bev_cubic_curv() const {
  // @@protoc_insertion_point(field_get:civ.civloc.VisionFilterConfig.enable_bev_cubic_curv)
  return _internal_enable_bev_cubic_curv();
}
inline void VisionFilterConfig::_internal_set_enable_bev_cubic_curv(bool value) {
  _has_bits_[0] |= 0x00000008u;
  enable_bev_cubic_curv_ = value;
}
inline void VisionFilterConfig::set_enable_bev_cubic_curv(bool value) {
  _internal_set_enable_bev_cubic_curv(value);
  // @@protoc_insertion_point(field_set:civ.civloc.VisionFilterConfig.enable_bev_cubic_curv)
}

// required bool enable_pixel_line = 3;
inline bool VisionFilterConfig::_internal_has_enable_pixel_line() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool VisionFilterConfig::has_enable_pixel_line() const {
  return _internal_has_enable_pixel_line();
}
inline void VisionFilterConfig::clear_enable_pixel_line() {
  enable_pixel_line_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool VisionFilterConfig::_internal_enable_pixel_line() const {
  return enable_pixel_line_;
}
inline bool VisionFilterConfig::enable_pixel_line() const {
  // @@protoc_insertion_point(field_get:civ.civloc.VisionFilterConfig.enable_pixel_line)
  return _internal_enable_pixel_line();
}
inline void VisionFilterConfig::_internal_set_enable_pixel_line(bool value) {
  _has_bits_[0] |= 0x00000010u;
  enable_pixel_line_ = value;
}
inline void VisionFilterConfig::set_enable_pixel_line(bool value) {
  _internal_set_enable_pixel_line(value);
  // @@protoc_insertion_point(field_set:civ.civloc.VisionFilterConfig.enable_pixel_line)
}

// required bool enable_pixel_cubic_curv = 4;
inline bool VisionFilterConfig::_internal_has_enable_pixel_cubic_curv() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool VisionFilterConfig::has_enable_pixel_cubic_curv() const {
  return _internal_has_enable_pixel_cubic_curv();
}
inline void VisionFilterConfig::clear_enable_pixel_cubic_curv() {
  enable_pixel_cubic_curv_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool VisionFilterConfig::_internal_enable_pixel_cubic_curv() const {
  return enable_pixel_cubic_curv_;
}
inline bool VisionFilterConfig::enable_pixel_cubic_curv() const {
  // @@protoc_insertion_point(field_get:civ.civloc.VisionFilterConfig.enable_pixel_cubic_curv)
  return _internal_enable_pixel_cubic_curv();
}
inline void VisionFilterConfig::_internal_set_enable_pixel_cubic_curv(bool value) {
  _has_bits_[0] |= 0x00000020u;
  enable_pixel_cubic_curv_ = value;
}
inline void VisionFilterConfig::set_enable_pixel_cubic_curv(bool value) {
  _internal_set_enable_pixel_cubic_curv(value);
  // @@protoc_insertion_point(field_set:civ.civloc.VisionFilterConfig.enable_pixel_cubic_curv)
}

// repeated double vision_noise_mps = 5;
inline int VisionFilterConfig::_internal_vision_noise_mps_size() const {
  return vision_noise_mps_.size();
}
inline int VisionFilterConfig::vision_noise_mps_size() const {
  return _internal_vision_noise_mps_size();
}
inline void VisionFilterConfig::clear_vision_noise_mps() {
  vision_noise_mps_.Clear();
}
inline double VisionFilterConfig::_internal_vision_noise_mps(int index) const {
  return vision_noise_mps_.Get(index);
}
inline double VisionFilterConfig::vision_noise_mps(int index) const {
  // @@protoc_insertion_point(field_get:civ.civloc.VisionFilterConfig.vision_noise_mps)
  return _internal_vision_noise_mps(index);
}
inline void VisionFilterConfig::set_vision_noise_mps(int index, double value) {
  vision_noise_mps_.Set(index, value);
  // @@protoc_insertion_point(field_set:civ.civloc.VisionFilterConfig.vision_noise_mps)
}
inline void VisionFilterConfig::_internal_add_vision_noise_mps(double value) {
  vision_noise_mps_.Add(value);
}
inline void VisionFilterConfig::add_vision_noise_mps(double value) {
  _internal_add_vision_noise_mps(value);
  // @@protoc_insertion_point(field_add:civ.civloc.VisionFilterConfig.vision_noise_mps)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
VisionFilterConfig::_internal_vision_noise_mps() const {
  return vision_noise_mps_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
VisionFilterConfig::vision_noise_mps() const {
  // @@protoc_insertion_point(field_list:civ.civloc.VisionFilterConfig.vision_noise_mps)
  return _internal_vision_noise_mps();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
VisionFilterConfig::_internal_mutable_vision_noise_mps() {
  return &vision_noise_mps_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
VisionFilterConfig::mutable_vision_noise_mps() {
  // @@protoc_insertion_point(field_mutable_list:civ.civloc.VisionFilterConfig.vision_noise_mps)
  return _internal_mutable_vision_noise_mps();
}

// repeated double perc_range_m = 6;
inline int VisionFilterConfig::_internal_perc_range_m_size() const {
  return perc_range_m_.size();
}
inline int VisionFilterConfig::perc_range_m_size() const {
  return _internal_perc_range_m_size();
}
inline void VisionFilterConfig::clear_perc_range_m() {
  perc_range_m_.Clear();
}
inline double VisionFilterConfig::_internal_perc_range_m(int index) const {
  return perc_range_m_.Get(index);
}
inline double VisionFilterConfig::perc_range_m(int index) const {
  // @@protoc_insertion_point(field_get:civ.civloc.VisionFilterConfig.perc_range_m)
  return _internal_perc_range_m(index);
}
inline void VisionFilterConfig::set_perc_range_m(int index, double value) {
  perc_range_m_.Set(index, value);
  // @@protoc_insertion_point(field_set:civ.civloc.VisionFilterConfig.perc_range_m)
}
inline void VisionFilterConfig::_internal_add_perc_range_m(double value) {
  perc_range_m_.Add(value);
}
inline void VisionFilterConfig::add_perc_range_m(double value) {
  _internal_add_perc_range_m(value);
  // @@protoc_insertion_point(field_add:civ.civloc.VisionFilterConfig.perc_range_m)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
VisionFilterConfig::_internal_perc_range_m() const {
  return perc_range_m_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
VisionFilterConfig::perc_range_m() const {
  // @@protoc_insertion_point(field_list:civ.civloc.VisionFilterConfig.perc_range_m)
  return _internal_perc_range_m();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
VisionFilterConfig::_internal_mutable_perc_range_m() {
  return &perc_range_m_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
VisionFilterConfig::mutable_perc_range_m() {
  // @@protoc_insertion_point(field_mutable_list:civ.civloc.VisionFilterConfig.perc_range_m)
  return _internal_mutable_perc_range_m();
}

// required double valid_mean_match_dist_m = 7;
inline bool VisionFilterConfig::_internal_has_valid_mean_match_dist_m() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool VisionFilterConfig::has_valid_mean_match_dist_m() const {
  return _internal_has_valid_mean_match_dist_m();
}
inline void VisionFilterConfig::clear_valid_mean_match_dist_m() {
  valid_mean_match_dist_m_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double VisionFilterConfig::_internal_valid_mean_match_dist_m() const {
  return valid_mean_match_dist_m_;
}
inline double VisionFilterConfig::valid_mean_match_dist_m() const {
  // @@protoc_insertion_point(field_get:civ.civloc.VisionFilterConfig.valid_mean_match_dist_m)
  return _internal_valid_mean_match_dist_m();
}
inline void VisionFilterConfig::_internal_set_valid_mean_match_dist_m(double value) {
  _has_bits_[0] |= 0x00000001u;
  valid_mean_match_dist_m_ = value;
}
inline void VisionFilterConfig::set_valid_mean_match_dist_m(double value) {
  _internal_set_valid_mean_match_dist_m(value);
  // @@protoc_insertion_point(field_set:civ.civloc.VisionFilterConfig.valid_mean_match_dist_m)
}

// required double valid_match_point_dist_m = 8;
inline bool VisionFilterConfig::_internal_has_valid_match_point_dist_m() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool VisionFilterConfig::has_valid_match_point_dist_m() const {
  return _internal_has_valid_match_point_dist_m();
}
inline void VisionFilterConfig::clear_valid_match_point_dist_m() {
  valid_match_point_dist_m_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double VisionFilterConfig::_internal_valid_match_point_dist_m() const {
  return valid_match_point_dist_m_;
}
inline double VisionFilterConfig::valid_match_point_dist_m() const {
  // @@protoc_insertion_point(field_get:civ.civloc.VisionFilterConfig.valid_match_point_dist_m)
  return _internal_valid_match_point_dist_m();
}
inline void VisionFilterConfig::_internal_set_valid_match_point_dist_m(double value) {
  _has_bits_[0] |= 0x00000002u;
  valid_match_point_dist_m_ = value;
}
inline void VisionFilterConfig::set_valid_match_point_dist_m(double value) {
  _internal_set_valid_match_point_dist_m(value);
  // @@protoc_insertion_point(field_set:civ.civloc.VisionFilterConfig.valid_match_point_dist_m)
}

// -------------------------------------------------------------------

// FuseConfig

// required .civ.civloc.FuseConfig.FuseMode mode = 1;
inline bool FuseConfig::_internal_has_mode() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool FuseConfig::has_mode() const {
  return _internal_has_mode();
}
inline void FuseConfig::clear_mode() {
  mode_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::civ::civloc::FuseConfig_FuseMode FuseConfig::_internal_mode() const {
  return static_cast< ::civ::civloc::FuseConfig_FuseMode >(mode_);
}
inline ::civ::civloc::FuseConfig_FuseMode FuseConfig::mode() const {
  // @@protoc_insertion_point(field_get:civ.civloc.FuseConfig.mode)
  return _internal_mode();
}
inline void FuseConfig::_internal_set_mode(::civ::civloc::FuseConfig_FuseMode value) {
  assert(::civ::civloc::FuseConfig_FuseMode_IsValid(value));
  _has_bits_[0] |= 0x00000040u;
  mode_ = value;
}
inline void FuseConfig::set_mode(::civ::civloc::FuseConfig_FuseMode value) {
  _internal_set_mode(value);
  // @@protoc_insertion_point(field_set:civ.civloc.FuseConfig.mode)
}

// required .civ.civloc.FilterPara filter_para = 2;
inline bool FuseConfig::_internal_has_filter_para() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || filter_para_ != nullptr);
  return value;
}
inline bool FuseConfig::has_filter_para() const {
  return _internal_has_filter_para();
}
inline void FuseConfig::clear_filter_para() {
  if (filter_para_ != nullptr) filter_para_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::civ::civloc::FilterPara& FuseConfig::_internal_filter_para() const {
  const ::civ::civloc::FilterPara* p = filter_para_;
  return p != nullptr ? *p : reinterpret_cast<const ::civ::civloc::FilterPara&>(
      ::civ::civloc::_FilterPara_default_instance_);
}
inline const ::civ::civloc::FilterPara& FuseConfig::filter_para() const {
  // @@protoc_insertion_point(field_get:civ.civloc.FuseConfig.filter_para)
  return _internal_filter_para();
}
inline void FuseConfig::unsafe_arena_set_allocated_filter_para(
    ::civ::civloc::FilterPara* filter_para) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(filter_para_);
  }
  filter_para_ = filter_para;
  if (filter_para) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:civ.civloc.FuseConfig.filter_para)
}
inline ::civ::civloc::FilterPara* FuseConfig::release_filter_para() {
  _has_bits_[0] &= ~0x00000001u;
  ::civ::civloc::FilterPara* temp = filter_para_;
  filter_para_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::civ::civloc::FilterPara* FuseConfig::unsafe_arena_release_filter_para() {
  // @@protoc_insertion_point(field_release:civ.civloc.FuseConfig.filter_para)
  _has_bits_[0] &= ~0x00000001u;
  ::civ::civloc::FilterPara* temp = filter_para_;
  filter_para_ = nullptr;
  return temp;
}
inline ::civ::civloc::FilterPara* FuseConfig::_internal_mutable_filter_para() {
  _has_bits_[0] |= 0x00000001u;
  if (filter_para_ == nullptr) {
    auto* p = CreateMaybeMessage<::civ::civloc::FilterPara>(GetArena());
    filter_para_ = p;
  }
  return filter_para_;
}
inline ::civ::civloc::FilterPara* FuseConfig::mutable_filter_para() {
  // @@protoc_insertion_point(field_mutable:civ.civloc.FuseConfig.filter_para)
  return _internal_mutable_filter_para();
}
inline void FuseConfig::set_allocated_filter_para(::civ::civloc::FilterPara* filter_para) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete filter_para_;
  }
  if (filter_para) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(filter_para);
    if (message_arena != submessage_arena) {
      filter_para = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, filter_para, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  filter_para_ = filter_para;
  // @@protoc_insertion_point(field_set_allocated:civ.civloc.FuseConfig.filter_para)
}

// required .civ.civloc.GnssFilterConfig gnss_filter = 3;
inline bool FuseConfig::_internal_has_gnss_filter() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || gnss_filter_ != nullptr);
  return value;
}
inline bool FuseConfig::has_gnss_filter() const {
  return _internal_has_gnss_filter();
}
inline void FuseConfig::clear_gnss_filter() {
  if (gnss_filter_ != nullptr) gnss_filter_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::civ::civloc::GnssFilterConfig& FuseConfig::_internal_gnss_filter() const {
  const ::civ::civloc::GnssFilterConfig* p = gnss_filter_;
  return p != nullptr ? *p : reinterpret_cast<const ::civ::civloc::GnssFilterConfig&>(
      ::civ::civloc::_GnssFilterConfig_default_instance_);
}
inline const ::civ::civloc::GnssFilterConfig& FuseConfig::gnss_filter() const {
  // @@protoc_insertion_point(field_get:civ.civloc.FuseConfig.gnss_filter)
  return _internal_gnss_filter();
}
inline void FuseConfig::unsafe_arena_set_allocated_gnss_filter(
    ::civ::civloc::GnssFilterConfig* gnss_filter) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(gnss_filter_);
  }
  gnss_filter_ = gnss_filter;
  if (gnss_filter) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:civ.civloc.FuseConfig.gnss_filter)
}
inline ::civ::civloc::GnssFilterConfig* FuseConfig::release_gnss_filter() {
  _has_bits_[0] &= ~0x00000002u;
  ::civ::civloc::GnssFilterConfig* temp = gnss_filter_;
  gnss_filter_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::civ::civloc::GnssFilterConfig* FuseConfig::unsafe_arena_release_gnss_filter() {
  // @@protoc_insertion_point(field_release:civ.civloc.FuseConfig.gnss_filter)
  _has_bits_[0] &= ~0x00000002u;
  ::civ::civloc::GnssFilterConfig* temp = gnss_filter_;
  gnss_filter_ = nullptr;
  return temp;
}
inline ::civ::civloc::GnssFilterConfig* FuseConfig::_internal_mutable_gnss_filter() {
  _has_bits_[0] |= 0x00000002u;
  if (gnss_filter_ == nullptr) {
    auto* p = CreateMaybeMessage<::civ::civloc::GnssFilterConfig>(GetArena());
    gnss_filter_ = p;
  }
  return gnss_filter_;
}
inline ::civ::civloc::GnssFilterConfig* FuseConfig::mutable_gnss_filter() {
  // @@protoc_insertion_point(field_mutable:civ.civloc.FuseConfig.gnss_filter)
  return _internal_mutable_gnss_filter();
}
inline void FuseConfig::set_allocated_gnss_filter(::civ::civloc::GnssFilterConfig* gnss_filter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete gnss_filter_;
  }
  if (gnss_filter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(gnss_filter);
    if (message_arena != submessage_arena) {
      gnss_filter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gnss_filter, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  gnss_filter_ = gnss_filter;
  // @@protoc_insertion_point(field_set_allocated:civ.civloc.FuseConfig.gnss_filter)
}

// required .civ.civloc.VehicleModelFilterConfig vm_filter = 4;
inline bool FuseConfig::_internal_has_vm_filter() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || vm_filter_ != nullptr);
  return value;
}
inline bool FuseConfig::has_vm_filter() const {
  return _internal_has_vm_filter();
}
inline void FuseConfig::clear_vm_filter() {
  if (vm_filter_ != nullptr) vm_filter_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::civ::civloc::VehicleModelFilterConfig& FuseConfig::_internal_vm_filter() const {
  const ::civ::civloc::VehicleModelFilterConfig* p = vm_filter_;
  return p != nullptr ? *p : reinterpret_cast<const ::civ::civloc::VehicleModelFilterConfig&>(
      ::civ::civloc::_VehicleModelFilterConfig_default_instance_);
}
inline const ::civ::civloc::VehicleModelFilterConfig& FuseConfig::vm_filter() const {
  // @@protoc_insertion_point(field_get:civ.civloc.FuseConfig.vm_filter)
  return _internal_vm_filter();
}
inline void FuseConfig::unsafe_arena_set_allocated_vm_filter(
    ::civ::civloc::VehicleModelFilterConfig* vm_filter) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vm_filter_);
  }
  vm_filter_ = vm_filter;
  if (vm_filter) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:civ.civloc.FuseConfig.vm_filter)
}
inline ::civ::civloc::VehicleModelFilterConfig* FuseConfig::release_vm_filter() {
  _has_bits_[0] &= ~0x00000004u;
  ::civ::civloc::VehicleModelFilterConfig* temp = vm_filter_;
  vm_filter_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::civ::civloc::VehicleModelFilterConfig* FuseConfig::unsafe_arena_release_vm_filter() {
  // @@protoc_insertion_point(field_release:civ.civloc.FuseConfig.vm_filter)
  _has_bits_[0] &= ~0x00000004u;
  ::civ::civloc::VehicleModelFilterConfig* temp = vm_filter_;
  vm_filter_ = nullptr;
  return temp;
}
inline ::civ::civloc::VehicleModelFilterConfig* FuseConfig::_internal_mutable_vm_filter() {
  _has_bits_[0] |= 0x00000004u;
  if (vm_filter_ == nullptr) {
    auto* p = CreateMaybeMessage<::civ::civloc::VehicleModelFilterConfig>(GetArena());
    vm_filter_ = p;
  }
  return vm_filter_;
}
inline ::civ::civloc::VehicleModelFilterConfig* FuseConfig::mutable_vm_filter() {
  // @@protoc_insertion_point(field_mutable:civ.civloc.FuseConfig.vm_filter)
  return _internal_mutable_vm_filter();
}
inline void FuseConfig::set_allocated_vm_filter(::civ::civloc::VehicleModelFilterConfig* vm_filter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete vm_filter_;
  }
  if (vm_filter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(vm_filter);
    if (message_arena != submessage_arena) {
      vm_filter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vm_filter, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  vm_filter_ = vm_filter;
  // @@protoc_insertion_point(field_set_allocated:civ.civloc.FuseConfig.vm_filter)
}

// required .civ.civloc.WheelOdoFilterConfig wheel_filter = 5;
inline bool FuseConfig::_internal_has_wheel_filter() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || wheel_filter_ != nullptr);
  return value;
}
inline bool FuseConfig::has_wheel_filter() const {
  return _internal_has_wheel_filter();
}
inline void FuseConfig::clear_wheel_filter() {
  if (wheel_filter_ != nullptr) wheel_filter_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::civ::civloc::WheelOdoFilterConfig& FuseConfig::_internal_wheel_filter() const {
  const ::civ::civloc::WheelOdoFilterConfig* p = wheel_filter_;
  return p != nullptr ? *p : reinterpret_cast<const ::civ::civloc::WheelOdoFilterConfig&>(
      ::civ::civloc::_WheelOdoFilterConfig_default_instance_);
}
inline const ::civ::civloc::WheelOdoFilterConfig& FuseConfig::wheel_filter() const {
  // @@protoc_insertion_point(field_get:civ.civloc.FuseConfig.wheel_filter)
  return _internal_wheel_filter();
}
inline void FuseConfig::unsafe_arena_set_allocated_wheel_filter(
    ::civ::civloc::WheelOdoFilterConfig* wheel_filter) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(wheel_filter_);
  }
  wheel_filter_ = wheel_filter;
  if (wheel_filter) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:civ.civloc.FuseConfig.wheel_filter)
}
inline ::civ::civloc::WheelOdoFilterConfig* FuseConfig::release_wheel_filter() {
  _has_bits_[0] &= ~0x00000008u;
  ::civ::civloc::WheelOdoFilterConfig* temp = wheel_filter_;
  wheel_filter_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::civ::civloc::WheelOdoFilterConfig* FuseConfig::unsafe_arena_release_wheel_filter() {
  // @@protoc_insertion_point(field_release:civ.civloc.FuseConfig.wheel_filter)
  _has_bits_[0] &= ~0x00000008u;
  ::civ::civloc::WheelOdoFilterConfig* temp = wheel_filter_;
  wheel_filter_ = nullptr;
  return temp;
}
inline ::civ::civloc::WheelOdoFilterConfig* FuseConfig::_internal_mutable_wheel_filter() {
  _has_bits_[0] |= 0x00000008u;
  if (wheel_filter_ == nullptr) {
    auto* p = CreateMaybeMessage<::civ::civloc::WheelOdoFilterConfig>(GetArena());
    wheel_filter_ = p;
  }
  return wheel_filter_;
}
inline ::civ::civloc::WheelOdoFilterConfig* FuseConfig::mutable_wheel_filter() {
  // @@protoc_insertion_point(field_mutable:civ.civloc.FuseConfig.wheel_filter)
  return _internal_mutable_wheel_filter();
}
inline void FuseConfig::set_allocated_wheel_filter(::civ::civloc::WheelOdoFilterConfig* wheel_filter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete wheel_filter_;
  }
  if (wheel_filter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(wheel_filter);
    if (message_arena != submessage_arena) {
      wheel_filter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, wheel_filter, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  wheel_filter_ = wheel_filter;
  // @@protoc_insertion_point(field_set_allocated:civ.civloc.FuseConfig.wheel_filter)
}

// optional .civ.civloc.LidarFilterConfig lidar_filter = 6;
inline bool FuseConfig::_internal_has_lidar_filter() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || lidar_filter_ != nullptr);
  return value;
}
inline bool FuseConfig::has_lidar_filter() const {
  return _internal_has_lidar_filter();
}
inline void FuseConfig::clear_lidar_filter() {
  if (lidar_filter_ != nullptr) lidar_filter_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::civ::civloc::LidarFilterConfig& FuseConfig::_internal_lidar_filter() const {
  const ::civ::civloc::LidarFilterConfig* p = lidar_filter_;
  return p != nullptr ? *p : reinterpret_cast<const ::civ::civloc::LidarFilterConfig&>(
      ::civ::civloc::_LidarFilterConfig_default_instance_);
}
inline const ::civ::civloc::LidarFilterConfig& FuseConfig::lidar_filter() const {
  // @@protoc_insertion_point(field_get:civ.civloc.FuseConfig.lidar_filter)
  return _internal_lidar_filter();
}
inline void FuseConfig::unsafe_arena_set_allocated_lidar_filter(
    ::civ::civloc::LidarFilterConfig* lidar_filter) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lidar_filter_);
  }
  lidar_filter_ = lidar_filter;
  if (lidar_filter) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:civ.civloc.FuseConfig.lidar_filter)
}
inline ::civ::civloc::LidarFilterConfig* FuseConfig::release_lidar_filter() {
  _has_bits_[0] &= ~0x00000010u;
  ::civ::civloc::LidarFilterConfig* temp = lidar_filter_;
  lidar_filter_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::civ::civloc::LidarFilterConfig* FuseConfig::unsafe_arena_release_lidar_filter() {
  // @@protoc_insertion_point(field_release:civ.civloc.FuseConfig.lidar_filter)
  _has_bits_[0] &= ~0x00000010u;
  ::civ::civloc::LidarFilterConfig* temp = lidar_filter_;
  lidar_filter_ = nullptr;
  return temp;
}
inline ::civ::civloc::LidarFilterConfig* FuseConfig::_internal_mutable_lidar_filter() {
  _has_bits_[0] |= 0x00000010u;
  if (lidar_filter_ == nullptr) {
    auto* p = CreateMaybeMessage<::civ::civloc::LidarFilterConfig>(GetArena());
    lidar_filter_ = p;
  }
  return lidar_filter_;
}
inline ::civ::civloc::LidarFilterConfig* FuseConfig::mutable_lidar_filter() {
  // @@protoc_insertion_point(field_mutable:civ.civloc.FuseConfig.lidar_filter)
  return _internal_mutable_lidar_filter();
}
inline void FuseConfig::set_allocated_lidar_filter(::civ::civloc::LidarFilterConfig* lidar_filter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete lidar_filter_;
  }
  if (lidar_filter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(lidar_filter);
    if (message_arena != submessage_arena) {
      lidar_filter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lidar_filter, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  lidar_filter_ = lidar_filter;
  // @@protoc_insertion_point(field_set_allocated:civ.civloc.FuseConfig.lidar_filter)
}

// required .civ.civloc.VisionFilterConfig vision_filter = 7;
inline bool FuseConfig::_internal_has_vision_filter() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || vision_filter_ != nullptr);
  return value;
}
inline bool FuseConfig::has_vision_filter() const {
  return _internal_has_vision_filter();
}
inline void FuseConfig::clear_vision_filter() {
  if (vision_filter_ != nullptr) vision_filter_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
inline const ::civ::civloc::VisionFilterConfig& FuseConfig::_internal_vision_filter() const {
  const ::civ::civloc::VisionFilterConfig* p = vision_filter_;
  return p != nullptr ? *p : reinterpret_cast<const ::civ::civloc::VisionFilterConfig&>(
      ::civ::civloc::_VisionFilterConfig_default_instance_);
}
inline const ::civ::civloc::VisionFilterConfig& FuseConfig::vision_filter() const {
  // @@protoc_insertion_point(field_get:civ.civloc.FuseConfig.vision_filter)
  return _internal_vision_filter();
}
inline void FuseConfig::unsafe_arena_set_allocated_vision_filter(
    ::civ::civloc::VisionFilterConfig* vision_filter) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vision_filter_);
  }
  vision_filter_ = vision_filter;
  if (vision_filter) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:civ.civloc.FuseConfig.vision_filter)
}
inline ::civ::civloc::VisionFilterConfig* FuseConfig::release_vision_filter() {
  _has_bits_[0] &= ~0x00000020u;
  ::civ::civloc::VisionFilterConfig* temp = vision_filter_;
  vision_filter_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::civ::civloc::VisionFilterConfig* FuseConfig::unsafe_arena_release_vision_filter() {
  // @@protoc_insertion_point(field_release:civ.civloc.FuseConfig.vision_filter)
  _has_bits_[0] &= ~0x00000020u;
  ::civ::civloc::VisionFilterConfig* temp = vision_filter_;
  vision_filter_ = nullptr;
  return temp;
}
inline ::civ::civloc::VisionFilterConfig* FuseConfig::_internal_mutable_vision_filter() {
  _has_bits_[0] |= 0x00000020u;
  if (vision_filter_ == nullptr) {
    auto* p = CreateMaybeMessage<::civ::civloc::VisionFilterConfig>(GetArena());
    vision_filter_ = p;
  }
  return vision_filter_;
}
inline ::civ::civloc::VisionFilterConfig* FuseConfig::mutable_vision_filter() {
  // @@protoc_insertion_point(field_mutable:civ.civloc.FuseConfig.vision_filter)
  return _internal_mutable_vision_filter();
}
inline void FuseConfig::set_allocated_vision_filter(::civ::civloc::VisionFilterConfig* vision_filter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete vision_filter_;
  }
  if (vision_filter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(vision_filter);
    if (message_arena != submessage_arena) {
      vision_filter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vision_filter, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  vision_filter_ = vision_filter;
  // @@protoc_insertion_point(field_set_allocated:civ.civloc.FuseConfig.vision_filter)
}

// required bool online_estimation_qvv1 = 10;
inline bool FuseConfig::_internal_has_online_estimation_qvv1() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool FuseConfig::has_online_estimation_qvv1() const {
  return _internal_has_online_estimation_qvv1();
}
inline void FuseConfig::clear_online_estimation_qvv1() {
  online_estimation_qvv1_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool FuseConfig::_internal_online_estimation_qvv1() const {
  return online_estimation_qvv1_;
}
inline bool FuseConfig::online_estimation_qvv1() const {
  // @@protoc_insertion_point(field_get:civ.civloc.FuseConfig.online_estimation_qvv1)
  return _internal_online_estimation_qvv1();
}
inline void FuseConfig::_internal_set_online_estimation_qvv1(bool value) {
  _has_bits_[0] |= 0x00000080u;
  online_estimation_qvv1_ = value;
}
inline void FuseConfig::set_online_estimation_qvv1(bool value) {
  _internal_set_online_estimation_qvv1(value);
  // @@protoc_insertion_point(field_set:civ.civloc.FuseConfig.online_estimation_qvv1)
}

// required bool online_estimation_ko = 20;
inline bool FuseConfig::_internal_has_online_estimation_ko() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool FuseConfig::has_online_estimation_ko() const {
  return _internal_has_online_estimation_ko();
}
inline void FuseConfig::clear_online_estimation_ko() {
  online_estimation_ko_ = false;
  _has_bits_[0] &= ~0x00000100u;
}
inline bool FuseConfig::_internal_online_estimation_ko() const {
  return online_estimation_ko_;
}
inline bool FuseConfig::online_estimation_ko() const {
  // @@protoc_insertion_point(field_get:civ.civloc.FuseConfig.online_estimation_ko)
  return _internal_online_estimation_ko();
}
inline void FuseConfig::_internal_set_online_estimation_ko(bool value) {
  _has_bits_[0] |= 0x00000100u;
  online_estimation_ko_ = value;
}
inline void FuseConfig::set_online_estimation_ko(bool value) {
  _internal_set_online_estimation_ko(value);
  // @@protoc_insertion_point(field_set:civ.civloc.FuseConfig.online_estimation_ko)
}

// -------------------------------------------------------------------

// VisionMapConfig

// required string channel_name = 1;
inline bool VisionMapConfig::_internal_has_channel_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool VisionMapConfig::has_channel_name() const {
  return _internal_has_channel_name();
}
inline void VisionMapConfig::clear_channel_name() {
  channel_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& VisionMapConfig::channel_name() const {
  // @@protoc_insertion_point(field_get:civ.civloc.VisionMapConfig.channel_name)
  return _internal_channel_name();
}
inline void VisionMapConfig::set_channel_name(const std::string& value) {
  _internal_set_channel_name(value);
  // @@protoc_insertion_point(field_set:civ.civloc.VisionMapConfig.channel_name)
}
inline std::string* VisionMapConfig::mutable_channel_name() {
  // @@protoc_insertion_point(field_mutable:civ.civloc.VisionMapConfig.channel_name)
  return _internal_mutable_channel_name();
}
inline const std::string& VisionMapConfig::_internal_channel_name() const {
  return channel_name_.Get();
}
inline void VisionMapConfig::_internal_set_channel_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  channel_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void VisionMapConfig::set_channel_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  channel_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:civ.civloc.VisionMapConfig.channel_name)
}
inline void VisionMapConfig::set_channel_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  channel_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:civ.civloc.VisionMapConfig.channel_name)
}
inline void VisionMapConfig::set_channel_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  channel_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:civ.civloc.VisionMapConfig.channel_name)
}
inline std::string* VisionMapConfig::_internal_mutable_channel_name() {
  _has_bits_[0] |= 0x00000001u;
  return channel_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* VisionMapConfig::release_channel_name() {
  // @@protoc_insertion_point(field_release:civ.civloc.VisionMapConfig.channel_name)
  if (!_internal_has_channel_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return channel_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void VisionMapConfig::set_allocated_channel_name(std::string* channel_name) {
  if (channel_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  channel_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), channel_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:civ.civloc.VisionMapConfig.channel_name)
}

// required double max_leaf_dimension = 2;
inline bool VisionMapConfig::_internal_has_max_leaf_dimension() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool VisionMapConfig::has_max_leaf_dimension() const {
  return _internal_has_max_leaf_dimension();
}
inline void VisionMapConfig::clear_max_leaf_dimension() {
  max_leaf_dimension_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double VisionMapConfig::_internal_max_leaf_dimension() const {
  return max_leaf_dimension_;
}
inline double VisionMapConfig::max_leaf_dimension() const {
  // @@protoc_insertion_point(field_get:civ.civloc.VisionMapConfig.max_leaf_dimension)
  return _internal_max_leaf_dimension();
}
inline void VisionMapConfig::_internal_set_max_leaf_dimension(double value) {
  _has_bits_[0] |= 0x00000002u;
  max_leaf_dimension_ = value;
}
inline void VisionMapConfig::set_max_leaf_dimension(double value) {
  _internal_set_max_leaf_dimension(value);
  // @@protoc_insertion_point(field_set:civ.civloc.VisionMapConfig.max_leaf_dimension)
}

// required int32 max_leaf_size = 3;
inline bool VisionMapConfig::_internal_has_max_leaf_size() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool VisionMapConfig::has_max_leaf_size() const {
  return _internal_has_max_leaf_size();
}
inline void VisionMapConfig::clear_max_leaf_size() {
  max_leaf_size_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VisionMapConfig::_internal_max_leaf_size() const {
  return max_leaf_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VisionMapConfig::max_leaf_size() const {
  // @@protoc_insertion_point(field_get:civ.civloc.VisionMapConfig.max_leaf_size)
  return _internal_max_leaf_size();
}
inline void VisionMapConfig::_internal_set_max_leaf_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  max_leaf_size_ = value;
}
inline void VisionMapConfig::set_max_leaf_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_max_leaf_size(value);
  // @@protoc_insertion_point(field_set:civ.civloc.VisionMapConfig.max_leaf_size)
}

// required double box_half_width_m = 4;
inline bool VisionMapConfig::_internal_has_box_half_width_m() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool VisionMapConfig::has_box_half_width_m() const {
  return _internal_has_box_half_width_m();
}
inline void VisionMapConfig::clear_box_half_width_m() {
  box_half_width_m_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double VisionMapConfig::_internal_box_half_width_m() const {
  return box_half_width_m_;
}
inline double VisionMapConfig::box_half_width_m() const {
  // @@protoc_insertion_point(field_get:civ.civloc.VisionMapConfig.box_half_width_m)
  return _internal_box_half_width_m();
}
inline void VisionMapConfig::_internal_set_box_half_width_m(double value) {
  _has_bits_[0] |= 0x00000004u;
  box_half_width_m_ = value;
}
inline void VisionMapConfig::set_box_half_width_m(double value) {
  _internal_set_box_half_width_m(value);
  // @@protoc_insertion_point(field_set:civ.civloc.VisionMapConfig.box_half_width_m)
}

// required double search_distance_m = 5;
inline bool VisionMapConfig::_internal_has_search_distance_m() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool VisionMapConfig::has_search_distance_m() const {
  return _internal_has_search_distance_m();
}
inline void VisionMapConfig::clear_search_distance_m() {
  search_distance_m_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline double VisionMapConfig::_internal_search_distance_m() const {
  return search_distance_m_;
}
inline double VisionMapConfig::search_distance_m() const {
  // @@protoc_insertion_point(field_get:civ.civloc.VisionMapConfig.search_distance_m)
  return _internal_search_distance_m();
}
inline void VisionMapConfig::_internal_set_search_distance_m(double value) {
  _has_bits_[0] |= 0x00000008u;
  search_distance_m_ = value;
}
inline void VisionMapConfig::set_search_distance_m(double value) {
  _internal_set_search_distance_m(value);
  // @@protoc_insertion_point(field_set:civ.civloc.VisionMapConfig.search_distance_m)
}

// required double sample_interval_m = 6;
inline bool VisionMapConfig::_internal_has_sample_interval_m() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool VisionMapConfig::has_sample_interval_m() const {
  return _internal_has_sample_interval_m();
}
inline void VisionMapConfig::clear_sample_interval_m() {
  sample_interval_m_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline double VisionMapConfig::_internal_sample_interval_m() const {
  return sample_interval_m_;
}
inline double VisionMapConfig::sample_interval_m() const {
  // @@protoc_insertion_point(field_get:civ.civloc.VisionMapConfig.sample_interval_m)
  return _internal_sample_interval_m();
}
inline void VisionMapConfig::_internal_set_sample_interval_m(double value) {
  _has_bits_[0] |= 0x00000010u;
  sample_interval_m_ = value;
}
inline void VisionMapConfig::set_sample_interval_m(double value) {
  _internal_set_sample_interval_m(value);
  // @@protoc_insertion_point(field_set:civ.civloc.VisionMapConfig.sample_interval_m)
}

// -------------------------------------------------------------------

// PointCloudMapConfig

// required string map_path = 1;
inline bool PointCloudMapConfig::_internal_has_map_path() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PointCloudMapConfig::has_map_path() const {
  return _internal_has_map_path();
}
inline void PointCloudMapConfig::clear_map_path() {
  map_path_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PointCloudMapConfig::map_path() const {
  // @@protoc_insertion_point(field_get:civ.civloc.PointCloudMapConfig.map_path)
  return _internal_map_path();
}
inline void PointCloudMapConfig::set_map_path(const std::string& value) {
  _internal_set_map_path(value);
  // @@protoc_insertion_point(field_set:civ.civloc.PointCloudMapConfig.map_path)
}
inline std::string* PointCloudMapConfig::mutable_map_path() {
  // @@protoc_insertion_point(field_mutable:civ.civloc.PointCloudMapConfig.map_path)
  return _internal_mutable_map_path();
}
inline const std::string& PointCloudMapConfig::_internal_map_path() const {
  return map_path_.Get();
}
inline void PointCloudMapConfig::_internal_set_map_path(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  map_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PointCloudMapConfig::set_map_path(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  map_path_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:civ.civloc.PointCloudMapConfig.map_path)
}
inline void PointCloudMapConfig::set_map_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  map_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:civ.civloc.PointCloudMapConfig.map_path)
}
inline void PointCloudMapConfig::set_map_path(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  map_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:civ.civloc.PointCloudMapConfig.map_path)
}
inline std::string* PointCloudMapConfig::_internal_mutable_map_path() {
  _has_bits_[0] |= 0x00000001u;
  return map_path_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PointCloudMapConfig::release_map_path() {
  // @@protoc_insertion_point(field_release:civ.civloc.PointCloudMapConfig.map_path)
  if (!_internal_has_map_path()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return map_path_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PointCloudMapConfig::set_allocated_map_path(std::string* map_path) {
  if (map_path != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  map_path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), map_path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:civ.civloc.PointCloudMapConfig.map_path)
}

// optional float search_radius_m = 2 [default = 300];
inline bool PointCloudMapConfig::_internal_has_search_radius_m() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PointCloudMapConfig::has_search_radius_m() const {
  return _internal_has_search_radius_m();
}
inline void PointCloudMapConfig::clear_search_radius_m() {
  search_radius_m_ = 300;
  _has_bits_[0] &= ~0x00000004u;
}
inline float PointCloudMapConfig::_internal_search_radius_m() const {
  return search_radius_m_;
}
inline float PointCloudMapConfig::search_radius_m() const {
  // @@protoc_insertion_point(field_get:civ.civloc.PointCloudMapConfig.search_radius_m)
  return _internal_search_radius_m();
}
inline void PointCloudMapConfig::_internal_set_search_radius_m(float value) {
  _has_bits_[0] |= 0x00000004u;
  search_radius_m_ = value;
}
inline void PointCloudMapConfig::set_search_radius_m(float value) {
  _internal_set_search_radius_m(value);
  // @@protoc_insertion_point(field_set:civ.civloc.PointCloudMapConfig.search_radius_m)
}

// required string map_cfg_file = 3;
inline bool PointCloudMapConfig::_internal_has_map_cfg_file() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PointCloudMapConfig::has_map_cfg_file() const {
  return _internal_has_map_cfg_file();
}
inline void PointCloudMapConfig::clear_map_cfg_file() {
  map_cfg_file_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& PointCloudMapConfig::map_cfg_file() const {
  // @@protoc_insertion_point(field_get:civ.civloc.PointCloudMapConfig.map_cfg_file)
  return _internal_map_cfg_file();
}
inline void PointCloudMapConfig::set_map_cfg_file(const std::string& value) {
  _internal_set_map_cfg_file(value);
  // @@protoc_insertion_point(field_set:civ.civloc.PointCloudMapConfig.map_cfg_file)
}
inline std::string* PointCloudMapConfig::mutable_map_cfg_file() {
  // @@protoc_insertion_point(field_mutable:civ.civloc.PointCloudMapConfig.map_cfg_file)
  return _internal_mutable_map_cfg_file();
}
inline const std::string& PointCloudMapConfig::_internal_map_cfg_file() const {
  return map_cfg_file_.Get();
}
inline void PointCloudMapConfig::_internal_set_map_cfg_file(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  map_cfg_file_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PointCloudMapConfig::set_map_cfg_file(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  map_cfg_file_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:civ.civloc.PointCloudMapConfig.map_cfg_file)
}
inline void PointCloudMapConfig::set_map_cfg_file(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  map_cfg_file_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:civ.civloc.PointCloudMapConfig.map_cfg_file)
}
inline void PointCloudMapConfig::set_map_cfg_file(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  map_cfg_file_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:civ.civloc.PointCloudMapConfig.map_cfg_file)
}
inline std::string* PointCloudMapConfig::_internal_mutable_map_cfg_file() {
  _has_bits_[0] |= 0x00000002u;
  return map_cfg_file_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PointCloudMapConfig::release_map_cfg_file() {
  // @@protoc_insertion_point(field_release:civ.civloc.PointCloudMapConfig.map_cfg_file)
  if (!_internal_has_map_cfg_file()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return map_cfg_file_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PointCloudMapConfig::set_allocated_map_cfg_file(std::string* map_cfg_file) {
  if (map_cfg_file != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  map_cfg_file_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), map_cfg_file,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:civ.civloc.PointCloudMapConfig.map_cfg_file)
}

// -------------------------------------------------------------------

// IOConfig

// optional string data_dir = 1;
inline bool IOConfig::_internal_has_data_dir() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool IOConfig::has_data_dir() const {
  return _internal_has_data_dir();
}
inline void IOConfig::clear_data_dir() {
  data_dir_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& IOConfig::data_dir() const {
  // @@protoc_insertion_point(field_get:civ.civloc.IOConfig.data_dir)
  return _internal_data_dir();
}
inline void IOConfig::set_data_dir(const std::string& value) {
  _internal_set_data_dir(value);
  // @@protoc_insertion_point(field_set:civ.civloc.IOConfig.data_dir)
}
inline std::string* IOConfig::mutable_data_dir() {
  // @@protoc_insertion_point(field_mutable:civ.civloc.IOConfig.data_dir)
  return _internal_mutable_data_dir();
}
inline const std::string& IOConfig::_internal_data_dir() const {
  return data_dir_.Get();
}
inline void IOConfig::_internal_set_data_dir(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  data_dir_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void IOConfig::set_data_dir(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  data_dir_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:civ.civloc.IOConfig.data_dir)
}
inline void IOConfig::set_data_dir(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  data_dir_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:civ.civloc.IOConfig.data_dir)
}
inline void IOConfig::set_data_dir(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  data_dir_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:civ.civloc.IOConfig.data_dir)
}
inline std::string* IOConfig::_internal_mutable_data_dir() {
  _has_bits_[0] |= 0x00000001u;
  return data_dir_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* IOConfig::release_data_dir() {
  // @@protoc_insertion_point(field_release:civ.civloc.IOConfig.data_dir)
  if (!_internal_has_data_dir()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return data_dir_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IOConfig::set_allocated_data_dir(std::string* data_dir) {
  if (data_dir != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  data_dir_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data_dir,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:civ.civloc.IOConfig.data_dir)
}

// -------------------------------------------------------------------

// DetectConfig

// required double sample_range_time = 1;
inline bool DetectConfig::_internal_has_sample_range_time() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DetectConfig::has_sample_range_time() const {
  return _internal_has_sample_range_time();
}
inline void DetectConfig::clear_sample_range_time() {
  sample_range_time_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double DetectConfig::_internal_sample_range_time() const {
  return sample_range_time_;
}
inline double DetectConfig::sample_range_time() const {
  // @@protoc_insertion_point(field_get:civ.civloc.DetectConfig.sample_range_time)
  return _internal_sample_range_time();
}
inline void DetectConfig::_internal_set_sample_range_time(double value) {
  _has_bits_[0] |= 0x00000001u;
  sample_range_time_ = value;
}
inline void DetectConfig::set_sample_range_time(double value) {
  _internal_set_sample_range_time(value);
  // @@protoc_insertion_point(field_set:civ.civloc.DetectConfig.sample_range_time)
}

// required int32 static_continuous_number = 2;
inline bool DetectConfig::_internal_has_static_continuous_number() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool DetectConfig::has_static_continuous_number() const {
  return _internal_has_static_continuous_number();
}
inline void DetectConfig::clear_static_continuous_number() {
  static_continuous_number_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DetectConfig::_internal_static_continuous_number() const {
  return static_continuous_number_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DetectConfig::static_continuous_number() const {
  // @@protoc_insertion_point(field_get:civ.civloc.DetectConfig.static_continuous_number)
  return _internal_static_continuous_number();
}
inline void DetectConfig::_internal_set_static_continuous_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  static_continuous_number_ = value;
}
inline void DetectConfig::set_static_continuous_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_static_continuous_number(value);
  // @@protoc_insertion_point(field_set:civ.civloc.DetectConfig.static_continuous_number)
}

// repeated double zero_velocity_detector_threshold = 3;
inline int DetectConfig::_internal_zero_velocity_detector_threshold_size() const {
  return zero_velocity_detector_threshold_.size();
}
inline int DetectConfig::zero_velocity_detector_threshold_size() const {
  return _internal_zero_velocity_detector_threshold_size();
}
inline void DetectConfig::clear_zero_velocity_detector_threshold() {
  zero_velocity_detector_threshold_.Clear();
}
inline double DetectConfig::_internal_zero_velocity_detector_threshold(int index) const {
  return zero_velocity_detector_threshold_.Get(index);
}
inline double DetectConfig::zero_velocity_detector_threshold(int index) const {
  // @@protoc_insertion_point(field_get:civ.civloc.DetectConfig.zero_velocity_detector_threshold)
  return _internal_zero_velocity_detector_threshold(index);
}
inline void DetectConfig::set_zero_velocity_detector_threshold(int index, double value) {
  zero_velocity_detector_threshold_.Set(index, value);
  // @@protoc_insertion_point(field_set:civ.civloc.DetectConfig.zero_velocity_detector_threshold)
}
inline void DetectConfig::_internal_add_zero_velocity_detector_threshold(double value) {
  zero_velocity_detector_threshold_.Add(value);
}
inline void DetectConfig::add_zero_velocity_detector_threshold(double value) {
  _internal_add_zero_velocity_detector_threshold(value);
  // @@protoc_insertion_point(field_add:civ.civloc.DetectConfig.zero_velocity_detector_threshold)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
DetectConfig::_internal_zero_velocity_detector_threshold() const {
  return zero_velocity_detector_threshold_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
DetectConfig::zero_velocity_detector_threshold() const {
  // @@protoc_insertion_point(field_list:civ.civloc.DetectConfig.zero_velocity_detector_threshold)
  return _internal_zero_velocity_detector_threshold();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
DetectConfig::_internal_mutable_zero_velocity_detector_threshold() {
  return &zero_velocity_detector_threshold_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
DetectConfig::mutable_zero_velocity_detector_threshold() {
  // @@protoc_insertion_point(field_mutable_list:civ.civloc.DetectConfig.zero_velocity_detector_threshold)
  return _internal_mutable_zero_velocity_detector_threshold();
}

// -------------------------------------------------------------------

// LidarMatchConfig

// required bool enable_lidar = 1 [default = false];
inline bool LidarMatchConfig::_internal_has_enable_lidar() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool LidarMatchConfig::has_enable_lidar() const {
  return _internal_has_enable_lidar();
}
inline void LidarMatchConfig::clear_enable_lidar() {
  enable_lidar_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool LidarMatchConfig::_internal_enable_lidar() const {
  return enable_lidar_;
}
inline bool LidarMatchConfig::enable_lidar() const {
  // @@protoc_insertion_point(field_get:civ.civloc.LidarMatchConfig.enable_lidar)
  return _internal_enable_lidar();
}
inline void LidarMatchConfig::_internal_set_enable_lidar(bool value) {
  _has_bits_[0] |= 0x00000002u;
  enable_lidar_ = value;
}
inline void LidarMatchConfig::set_enable_lidar(bool value) {
  _internal_set_enable_lidar(value);
  // @@protoc_insertion_point(field_set:civ.civloc.LidarMatchConfig.enable_lidar)
}

// repeated double online_scan_range_m = 2;
inline int LidarMatchConfig::_internal_online_scan_range_m_size() const {
  return online_scan_range_m_.size();
}
inline int LidarMatchConfig::online_scan_range_m_size() const {
  return _internal_online_scan_range_m_size();
}
inline void LidarMatchConfig::clear_online_scan_range_m() {
  online_scan_range_m_.Clear();
}
inline double LidarMatchConfig::_internal_online_scan_range_m(int index) const {
  return online_scan_range_m_.Get(index);
}
inline double LidarMatchConfig::online_scan_range_m(int index) const {
  // @@protoc_insertion_point(field_get:civ.civloc.LidarMatchConfig.online_scan_range_m)
  return _internal_online_scan_range_m(index);
}
inline void LidarMatchConfig::set_online_scan_range_m(int index, double value) {
  online_scan_range_m_.Set(index, value);
  // @@protoc_insertion_point(field_set:civ.civloc.LidarMatchConfig.online_scan_range_m)
}
inline void LidarMatchConfig::_internal_add_online_scan_range_m(double value) {
  online_scan_range_m_.Add(value);
}
inline void LidarMatchConfig::add_online_scan_range_m(double value) {
  _internal_add_online_scan_range_m(value);
  // @@protoc_insertion_point(field_add:civ.civloc.LidarMatchConfig.online_scan_range_m)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
LidarMatchConfig::_internal_online_scan_range_m() const {
  return online_scan_range_m_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
LidarMatchConfig::online_scan_range_m() const {
  // @@protoc_insertion_point(field_list:civ.civloc.LidarMatchConfig.online_scan_range_m)
  return _internal_online_scan_range_m();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
LidarMatchConfig::_internal_mutable_online_scan_range_m() {
  return &online_scan_range_m_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
LidarMatchConfig::mutable_online_scan_range_m() {
  // @@protoc_insertion_point(field_mutable_list:civ.civloc.LidarMatchConfig.online_scan_range_m)
  return _internal_mutable_online_scan_range_m();
}

// optional .civ.civloc.NDTConfig ndt_config = 20;
inline bool LidarMatchConfig::_internal_has_ndt_config() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || ndt_config_ != nullptr);
  return value;
}
inline bool LidarMatchConfig::has_ndt_config() const {
  return _internal_has_ndt_config();
}
inline void LidarMatchConfig::clear_ndt_config() {
  if (ndt_config_ != nullptr) ndt_config_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::civ::civloc::NDTConfig& LidarMatchConfig::_internal_ndt_config() const {
  const ::civ::civloc::NDTConfig* p = ndt_config_;
  return p != nullptr ? *p : reinterpret_cast<const ::civ::civloc::NDTConfig&>(
      ::civ::civloc::_NDTConfig_default_instance_);
}
inline const ::civ::civloc::NDTConfig& LidarMatchConfig::ndt_config() const {
  // @@protoc_insertion_point(field_get:civ.civloc.LidarMatchConfig.ndt_config)
  return _internal_ndt_config();
}
inline void LidarMatchConfig::unsafe_arena_set_allocated_ndt_config(
    ::civ::civloc::NDTConfig* ndt_config) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ndt_config_);
  }
  ndt_config_ = ndt_config;
  if (ndt_config) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:civ.civloc.LidarMatchConfig.ndt_config)
}
inline ::civ::civloc::NDTConfig* LidarMatchConfig::release_ndt_config() {
  _has_bits_[0] &= ~0x00000001u;
  ::civ::civloc::NDTConfig* temp = ndt_config_;
  ndt_config_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::civ::civloc::NDTConfig* LidarMatchConfig::unsafe_arena_release_ndt_config() {
  // @@protoc_insertion_point(field_release:civ.civloc.LidarMatchConfig.ndt_config)
  _has_bits_[0] &= ~0x00000001u;
  ::civ::civloc::NDTConfig* temp = ndt_config_;
  ndt_config_ = nullptr;
  return temp;
}
inline ::civ::civloc::NDTConfig* LidarMatchConfig::_internal_mutable_ndt_config() {
  _has_bits_[0] |= 0x00000001u;
  if (ndt_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::civ::civloc::NDTConfig>(GetArena());
    ndt_config_ = p;
  }
  return ndt_config_;
}
inline ::civ::civloc::NDTConfig* LidarMatchConfig::mutable_ndt_config() {
  // @@protoc_insertion_point(field_mutable:civ.civloc.LidarMatchConfig.ndt_config)
  return _internal_mutable_ndt_config();
}
inline void LidarMatchConfig::set_allocated_ndt_config(::civ::civloc::NDTConfig* ndt_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete ndt_config_;
  }
  if (ndt_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(ndt_config);
    if (message_arena != submessage_arena) {
      ndt_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ndt_config, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  ndt_config_ = ndt_config;
  // @@protoc_insertion_point(field_set_allocated:civ.civloc.LidarMatchConfig.ndt_config)
}

// -------------------------------------------------------------------

// VisionMatchConfig

// required bool enable_vision = 1;
inline bool VisionMatchConfig::_internal_has_enable_vision() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool VisionMatchConfig::has_enable_vision() const {
  return _internal_has_enable_vision();
}
inline void VisionMatchConfig::clear_enable_vision() {
  enable_vision_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool VisionMatchConfig::_internal_enable_vision() const {
  return enable_vision_;
}
inline bool VisionMatchConfig::enable_vision() const {
  // @@protoc_insertion_point(field_get:civ.civloc.VisionMatchConfig.enable_vision)
  return _internal_enable_vision();
}
inline void VisionMatchConfig::_internal_set_enable_vision(bool value) {
  _has_bits_[0] |= 0x00000002u;
  enable_vision_ = value;
}
inline void VisionMatchConfig::set_enable_vision(bool value) {
  _internal_set_enable_vision(value);
  // @@protoc_insertion_point(field_set:civ.civloc.VisionMatchConfig.enable_vision)
}

// required double match_threshold_m = 2;
inline bool VisionMatchConfig::_internal_has_match_threshold_m() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool VisionMatchConfig::has_match_threshold_m() const {
  return _internal_has_match_threshold_m();
}
inline void VisionMatchConfig::clear_match_threshold_m() {
  match_threshold_m_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double VisionMatchConfig::_internal_match_threshold_m() const {
  return match_threshold_m_;
}
inline double VisionMatchConfig::match_threshold_m() const {
  // @@protoc_insertion_point(field_get:civ.civloc.VisionMatchConfig.match_threshold_m)
  return _internal_match_threshold_m();
}
inline void VisionMatchConfig::_internal_set_match_threshold_m(double value) {
  _has_bits_[0] |= 0x00000001u;
  match_threshold_m_ = value;
}
inline void VisionMatchConfig::set_match_threshold_m(double value) {
  _internal_set_match_threshold_m(value);
  // @@protoc_insertion_point(field_set:civ.civloc.VisionMatchConfig.match_threshold_m)
}

// -------------------------------------------------------------------

// LocatorConfig

// required string version = 1 [default = "1.0.0"];
inline bool LocatorConfig::_internal_has_version() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool LocatorConfig::has_version() const {
  return _internal_has_version();
}
inline void LocatorConfig::clear_version() {
  version_.ClearToDefault(::civ::civloc::LocatorConfig::_i_give_permission_to_break_this_code_default_version_, GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& LocatorConfig::version() const {
  // @@protoc_insertion_point(field_get:civ.civloc.LocatorConfig.version)
  if (version_.IsDefault(nullptr)) return _i_give_permission_to_break_this_code_default_version_.get();
  return _internal_version();
}
inline void LocatorConfig::set_version(const std::string& value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:civ.civloc.LocatorConfig.version)
}
inline std::string* LocatorConfig::mutable_version() {
  // @@protoc_insertion_point(field_mutable:civ.civloc.LocatorConfig.version)
  return _internal_mutable_version();
}
inline const std::string& LocatorConfig::_internal_version() const {
  return version_.Get();
}
inline void LocatorConfig::_internal_set_version(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, value, GetArena());
}
inline void LocatorConfig::set_version(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  version_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:civ.civloc.LocatorConfig.version)
}
inline void LocatorConfig::set_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:civ.civloc.LocatorConfig.version)
}
inline void LocatorConfig::set_version(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:civ.civloc.LocatorConfig.version)
}
inline std::string* LocatorConfig::_internal_mutable_version() {
  _has_bits_[0] |= 0x00000001u;
  return version_.Mutable(::civ::civloc::LocatorConfig::_i_give_permission_to_break_this_code_default_version_, GetArena());
}
inline std::string* LocatorConfig::release_version() {
  // @@protoc_insertion_point(field_release:civ.civloc.LocatorConfig.version)
  if (!_internal_has_version()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return version_.ReleaseNonDefault(nullptr, GetArena());
}
inline void LocatorConfig::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  version_.SetAllocated(nullptr, version,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:civ.civloc.LocatorConfig.version)
}

// required .civ.civloc.CacherConfig cacher_cfg = 2;
inline bool LocatorConfig::_internal_has_cacher_cfg() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || cacher_cfg_ != nullptr);
  return value;
}
inline bool LocatorConfig::has_cacher_cfg() const {
  return _internal_has_cacher_cfg();
}
inline void LocatorConfig::clear_cacher_cfg() {
  if (cacher_cfg_ != nullptr) cacher_cfg_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::civ::civloc::CacherConfig& LocatorConfig::_internal_cacher_cfg() const {
  const ::civ::civloc::CacherConfig* p = cacher_cfg_;
  return p != nullptr ? *p : reinterpret_cast<const ::civ::civloc::CacherConfig&>(
      ::civ::civloc::_CacherConfig_default_instance_);
}
inline const ::civ::civloc::CacherConfig& LocatorConfig::cacher_cfg() const {
  // @@protoc_insertion_point(field_get:civ.civloc.LocatorConfig.cacher_cfg)
  return _internal_cacher_cfg();
}
inline void LocatorConfig::unsafe_arena_set_allocated_cacher_cfg(
    ::civ::civloc::CacherConfig* cacher_cfg) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cacher_cfg_);
  }
  cacher_cfg_ = cacher_cfg;
  if (cacher_cfg) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:civ.civloc.LocatorConfig.cacher_cfg)
}
inline ::civ::civloc::CacherConfig* LocatorConfig::release_cacher_cfg() {
  _has_bits_[0] &= ~0x00000002u;
  ::civ::civloc::CacherConfig* temp = cacher_cfg_;
  cacher_cfg_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::civ::civloc::CacherConfig* LocatorConfig::unsafe_arena_release_cacher_cfg() {
  // @@protoc_insertion_point(field_release:civ.civloc.LocatorConfig.cacher_cfg)
  _has_bits_[0] &= ~0x00000002u;
  ::civ::civloc::CacherConfig* temp = cacher_cfg_;
  cacher_cfg_ = nullptr;
  return temp;
}
inline ::civ::civloc::CacherConfig* LocatorConfig::_internal_mutable_cacher_cfg() {
  _has_bits_[0] |= 0x00000002u;
  if (cacher_cfg_ == nullptr) {
    auto* p = CreateMaybeMessage<::civ::civloc::CacherConfig>(GetArena());
    cacher_cfg_ = p;
  }
  return cacher_cfg_;
}
inline ::civ::civloc::CacherConfig* LocatorConfig::mutable_cacher_cfg() {
  // @@protoc_insertion_point(field_mutable:civ.civloc.LocatorConfig.cacher_cfg)
  return _internal_mutable_cacher_cfg();
}
inline void LocatorConfig::set_allocated_cacher_cfg(::civ::civloc::CacherConfig* cacher_cfg) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete cacher_cfg_;
  }
  if (cacher_cfg) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(cacher_cfg);
    if (message_arena != submessage_arena) {
      cacher_cfg = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cacher_cfg, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  cacher_cfg_ = cacher_cfg;
  // @@protoc_insertion_point(field_set_allocated:civ.civloc.LocatorConfig.cacher_cfg)
}

// required .civ.civloc.VisionMapConfig visionmap_cfg = 4;
inline bool LocatorConfig::_internal_has_visionmap_cfg() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || visionmap_cfg_ != nullptr);
  return value;
}
inline bool LocatorConfig::has_visionmap_cfg() const {
  return _internal_has_visionmap_cfg();
}
inline void LocatorConfig::clear_visionmap_cfg() {
  if (visionmap_cfg_ != nullptr) visionmap_cfg_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::civ::civloc::VisionMapConfig& LocatorConfig::_internal_visionmap_cfg() const {
  const ::civ::civloc::VisionMapConfig* p = visionmap_cfg_;
  return p != nullptr ? *p : reinterpret_cast<const ::civ::civloc::VisionMapConfig&>(
      ::civ::civloc::_VisionMapConfig_default_instance_);
}
inline const ::civ::civloc::VisionMapConfig& LocatorConfig::visionmap_cfg() const {
  // @@protoc_insertion_point(field_get:civ.civloc.LocatorConfig.visionmap_cfg)
  return _internal_visionmap_cfg();
}
inline void LocatorConfig::unsafe_arena_set_allocated_visionmap_cfg(
    ::civ::civloc::VisionMapConfig* visionmap_cfg) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(visionmap_cfg_);
  }
  visionmap_cfg_ = visionmap_cfg;
  if (visionmap_cfg) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:civ.civloc.LocatorConfig.visionmap_cfg)
}
inline ::civ::civloc::VisionMapConfig* LocatorConfig::release_visionmap_cfg() {
  _has_bits_[0] &= ~0x00000004u;
  ::civ::civloc::VisionMapConfig* temp = visionmap_cfg_;
  visionmap_cfg_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::civ::civloc::VisionMapConfig* LocatorConfig::unsafe_arena_release_visionmap_cfg() {
  // @@protoc_insertion_point(field_release:civ.civloc.LocatorConfig.visionmap_cfg)
  _has_bits_[0] &= ~0x00000004u;
  ::civ::civloc::VisionMapConfig* temp = visionmap_cfg_;
  visionmap_cfg_ = nullptr;
  return temp;
}
inline ::civ::civloc::VisionMapConfig* LocatorConfig::_internal_mutable_visionmap_cfg() {
  _has_bits_[0] |= 0x00000004u;
  if (visionmap_cfg_ == nullptr) {
    auto* p = CreateMaybeMessage<::civ::civloc::VisionMapConfig>(GetArena());
    visionmap_cfg_ = p;
  }
  return visionmap_cfg_;
}
inline ::civ::civloc::VisionMapConfig* LocatorConfig::mutable_visionmap_cfg() {
  // @@protoc_insertion_point(field_mutable:civ.civloc.LocatorConfig.visionmap_cfg)
  return _internal_mutable_visionmap_cfg();
}
inline void LocatorConfig::set_allocated_visionmap_cfg(::civ::civloc::VisionMapConfig* visionmap_cfg) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete visionmap_cfg_;
  }
  if (visionmap_cfg) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(visionmap_cfg);
    if (message_arena != submessage_arena) {
      visionmap_cfg = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, visionmap_cfg, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  visionmap_cfg_ = visionmap_cfg;
  // @@protoc_insertion_point(field_set_allocated:civ.civloc.LocatorConfig.visionmap_cfg)
}

// optional .civ.civloc.IOConfig io_cfg = 5;
inline bool LocatorConfig::_internal_has_io_cfg() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || io_cfg_ != nullptr);
  return value;
}
inline bool LocatorConfig::has_io_cfg() const {
  return _internal_has_io_cfg();
}
inline void LocatorConfig::clear_io_cfg() {
  if (io_cfg_ != nullptr) io_cfg_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::civ::civloc::IOConfig& LocatorConfig::_internal_io_cfg() const {
  const ::civ::civloc::IOConfig* p = io_cfg_;
  return p != nullptr ? *p : reinterpret_cast<const ::civ::civloc::IOConfig&>(
      ::civ::civloc::_IOConfig_default_instance_);
}
inline const ::civ::civloc::IOConfig& LocatorConfig::io_cfg() const {
  // @@protoc_insertion_point(field_get:civ.civloc.LocatorConfig.io_cfg)
  return _internal_io_cfg();
}
inline void LocatorConfig::unsafe_arena_set_allocated_io_cfg(
    ::civ::civloc::IOConfig* io_cfg) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(io_cfg_);
  }
  io_cfg_ = io_cfg;
  if (io_cfg) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:civ.civloc.LocatorConfig.io_cfg)
}
inline ::civ::civloc::IOConfig* LocatorConfig::release_io_cfg() {
  _has_bits_[0] &= ~0x00000008u;
  ::civ::civloc::IOConfig* temp = io_cfg_;
  io_cfg_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::civ::civloc::IOConfig* LocatorConfig::unsafe_arena_release_io_cfg() {
  // @@protoc_insertion_point(field_release:civ.civloc.LocatorConfig.io_cfg)
  _has_bits_[0] &= ~0x00000008u;
  ::civ::civloc::IOConfig* temp = io_cfg_;
  io_cfg_ = nullptr;
  return temp;
}
inline ::civ::civloc::IOConfig* LocatorConfig::_internal_mutable_io_cfg() {
  _has_bits_[0] |= 0x00000008u;
  if (io_cfg_ == nullptr) {
    auto* p = CreateMaybeMessage<::civ::civloc::IOConfig>(GetArena());
    io_cfg_ = p;
  }
  return io_cfg_;
}
inline ::civ::civloc::IOConfig* LocatorConfig::mutable_io_cfg() {
  // @@protoc_insertion_point(field_mutable:civ.civloc.LocatorConfig.io_cfg)
  return _internal_mutable_io_cfg();
}
inline void LocatorConfig::set_allocated_io_cfg(::civ::civloc::IOConfig* io_cfg) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete io_cfg_;
  }
  if (io_cfg) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(io_cfg);
    if (message_arena != submessage_arena) {
      io_cfg = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, io_cfg, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  io_cfg_ = io_cfg;
  // @@protoc_insertion_point(field_set_allocated:civ.civloc.LocatorConfig.io_cfg)
}

// optional .civ.civloc.PointCloudMapConfig pointcloud_map_cfg = 6;
inline bool LocatorConfig::_internal_has_pointcloud_map_cfg() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || pointcloud_map_cfg_ != nullptr);
  return value;
}
inline bool LocatorConfig::has_pointcloud_map_cfg() const {
  return _internal_has_pointcloud_map_cfg();
}
inline void LocatorConfig::clear_pointcloud_map_cfg() {
  if (pointcloud_map_cfg_ != nullptr) pointcloud_map_cfg_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::civ::civloc::PointCloudMapConfig& LocatorConfig::_internal_pointcloud_map_cfg() const {
  const ::civ::civloc::PointCloudMapConfig* p = pointcloud_map_cfg_;
  return p != nullptr ? *p : reinterpret_cast<const ::civ::civloc::PointCloudMapConfig&>(
      ::civ::civloc::_PointCloudMapConfig_default_instance_);
}
inline const ::civ::civloc::PointCloudMapConfig& LocatorConfig::pointcloud_map_cfg() const {
  // @@protoc_insertion_point(field_get:civ.civloc.LocatorConfig.pointcloud_map_cfg)
  return _internal_pointcloud_map_cfg();
}
inline void LocatorConfig::unsafe_arena_set_allocated_pointcloud_map_cfg(
    ::civ::civloc::PointCloudMapConfig* pointcloud_map_cfg) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pointcloud_map_cfg_);
  }
  pointcloud_map_cfg_ = pointcloud_map_cfg;
  if (pointcloud_map_cfg) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:civ.civloc.LocatorConfig.pointcloud_map_cfg)
}
inline ::civ::civloc::PointCloudMapConfig* LocatorConfig::release_pointcloud_map_cfg() {
  _has_bits_[0] &= ~0x00000010u;
  ::civ::civloc::PointCloudMapConfig* temp = pointcloud_map_cfg_;
  pointcloud_map_cfg_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::civ::civloc::PointCloudMapConfig* LocatorConfig::unsafe_arena_release_pointcloud_map_cfg() {
  // @@protoc_insertion_point(field_release:civ.civloc.LocatorConfig.pointcloud_map_cfg)
  _has_bits_[0] &= ~0x00000010u;
  ::civ::civloc::PointCloudMapConfig* temp = pointcloud_map_cfg_;
  pointcloud_map_cfg_ = nullptr;
  return temp;
}
inline ::civ::civloc::PointCloudMapConfig* LocatorConfig::_internal_mutable_pointcloud_map_cfg() {
  _has_bits_[0] |= 0x00000010u;
  if (pointcloud_map_cfg_ == nullptr) {
    auto* p = CreateMaybeMessage<::civ::civloc::PointCloudMapConfig>(GetArena());
    pointcloud_map_cfg_ = p;
  }
  return pointcloud_map_cfg_;
}
inline ::civ::civloc::PointCloudMapConfig* LocatorConfig::mutable_pointcloud_map_cfg() {
  // @@protoc_insertion_point(field_mutable:civ.civloc.LocatorConfig.pointcloud_map_cfg)
  return _internal_mutable_pointcloud_map_cfg();
}
inline void LocatorConfig::set_allocated_pointcloud_map_cfg(::civ::civloc::PointCloudMapConfig* pointcloud_map_cfg) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete pointcloud_map_cfg_;
  }
  if (pointcloud_map_cfg) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(pointcloud_map_cfg);
    if (message_arena != submessage_arena) {
      pointcloud_map_cfg = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pointcloud_map_cfg, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  pointcloud_map_cfg_ = pointcloud_map_cfg;
  // @@protoc_insertion_point(field_set_allocated:civ.civloc.LocatorConfig.pointcloud_map_cfg)
}

// optional .civ.civloc.FuseConfig fuse_cfg = 11;
inline bool LocatorConfig::_internal_has_fuse_cfg() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || fuse_cfg_ != nullptr);
  return value;
}
inline bool LocatorConfig::has_fuse_cfg() const {
  return _internal_has_fuse_cfg();
}
inline void LocatorConfig::clear_fuse_cfg() {
  if (fuse_cfg_ != nullptr) fuse_cfg_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
inline const ::civ::civloc::FuseConfig& LocatorConfig::_internal_fuse_cfg() const {
  const ::civ::civloc::FuseConfig* p = fuse_cfg_;
  return p != nullptr ? *p : reinterpret_cast<const ::civ::civloc::FuseConfig&>(
      ::civ::civloc::_FuseConfig_default_instance_);
}
inline const ::civ::civloc::FuseConfig& LocatorConfig::fuse_cfg() const {
  // @@protoc_insertion_point(field_get:civ.civloc.LocatorConfig.fuse_cfg)
  return _internal_fuse_cfg();
}
inline void LocatorConfig::unsafe_arena_set_allocated_fuse_cfg(
    ::civ::civloc::FuseConfig* fuse_cfg) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(fuse_cfg_);
  }
  fuse_cfg_ = fuse_cfg;
  if (fuse_cfg) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:civ.civloc.LocatorConfig.fuse_cfg)
}
inline ::civ::civloc::FuseConfig* LocatorConfig::release_fuse_cfg() {
  _has_bits_[0] &= ~0x00000020u;
  ::civ::civloc::FuseConfig* temp = fuse_cfg_;
  fuse_cfg_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::civ::civloc::FuseConfig* LocatorConfig::unsafe_arena_release_fuse_cfg() {
  // @@protoc_insertion_point(field_release:civ.civloc.LocatorConfig.fuse_cfg)
  _has_bits_[0] &= ~0x00000020u;
  ::civ::civloc::FuseConfig* temp = fuse_cfg_;
  fuse_cfg_ = nullptr;
  return temp;
}
inline ::civ::civloc::FuseConfig* LocatorConfig::_internal_mutable_fuse_cfg() {
  _has_bits_[0] |= 0x00000020u;
  if (fuse_cfg_ == nullptr) {
    auto* p = CreateMaybeMessage<::civ::civloc::FuseConfig>(GetArena());
    fuse_cfg_ = p;
  }
  return fuse_cfg_;
}
inline ::civ::civloc::FuseConfig* LocatorConfig::mutable_fuse_cfg() {
  // @@protoc_insertion_point(field_mutable:civ.civloc.LocatorConfig.fuse_cfg)
  return _internal_mutable_fuse_cfg();
}
inline void LocatorConfig::set_allocated_fuse_cfg(::civ::civloc::FuseConfig* fuse_cfg) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete fuse_cfg_;
  }
  if (fuse_cfg) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(fuse_cfg);
    if (message_arena != submessage_arena) {
      fuse_cfg = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fuse_cfg, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  fuse_cfg_ = fuse_cfg;
  // @@protoc_insertion_point(field_set_allocated:civ.civloc.LocatorConfig.fuse_cfg)
}

// optional .civ.civloc.DetectConfig detect_cfg = 12;
inline bool LocatorConfig::_internal_has_detect_cfg() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || detect_cfg_ != nullptr);
  return value;
}
inline bool LocatorConfig::has_detect_cfg() const {
  return _internal_has_detect_cfg();
}
inline void LocatorConfig::clear_detect_cfg() {
  if (detect_cfg_ != nullptr) detect_cfg_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
inline const ::civ::civloc::DetectConfig& LocatorConfig::_internal_detect_cfg() const {
  const ::civ::civloc::DetectConfig* p = detect_cfg_;
  return p != nullptr ? *p : reinterpret_cast<const ::civ::civloc::DetectConfig&>(
      ::civ::civloc::_DetectConfig_default_instance_);
}
inline const ::civ::civloc::DetectConfig& LocatorConfig::detect_cfg() const {
  // @@protoc_insertion_point(field_get:civ.civloc.LocatorConfig.detect_cfg)
  return _internal_detect_cfg();
}
inline void LocatorConfig::unsafe_arena_set_allocated_detect_cfg(
    ::civ::civloc::DetectConfig* detect_cfg) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(detect_cfg_);
  }
  detect_cfg_ = detect_cfg;
  if (detect_cfg) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:civ.civloc.LocatorConfig.detect_cfg)
}
inline ::civ::civloc::DetectConfig* LocatorConfig::release_detect_cfg() {
  _has_bits_[0] &= ~0x00000040u;
  ::civ::civloc::DetectConfig* temp = detect_cfg_;
  detect_cfg_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::civ::civloc::DetectConfig* LocatorConfig::unsafe_arena_release_detect_cfg() {
  // @@protoc_insertion_point(field_release:civ.civloc.LocatorConfig.detect_cfg)
  _has_bits_[0] &= ~0x00000040u;
  ::civ::civloc::DetectConfig* temp = detect_cfg_;
  detect_cfg_ = nullptr;
  return temp;
}
inline ::civ::civloc::DetectConfig* LocatorConfig::_internal_mutable_detect_cfg() {
  _has_bits_[0] |= 0x00000040u;
  if (detect_cfg_ == nullptr) {
    auto* p = CreateMaybeMessage<::civ::civloc::DetectConfig>(GetArena());
    detect_cfg_ = p;
  }
  return detect_cfg_;
}
inline ::civ::civloc::DetectConfig* LocatorConfig::mutable_detect_cfg() {
  // @@protoc_insertion_point(field_mutable:civ.civloc.LocatorConfig.detect_cfg)
  return _internal_mutable_detect_cfg();
}
inline void LocatorConfig::set_allocated_detect_cfg(::civ::civloc::DetectConfig* detect_cfg) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete detect_cfg_;
  }
  if (detect_cfg) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(detect_cfg);
    if (message_arena != submessage_arena) {
      detect_cfg = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, detect_cfg, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  detect_cfg_ = detect_cfg;
  // @@protoc_insertion_point(field_set_allocated:civ.civloc.LocatorConfig.detect_cfg)
}

// optional .civ.civloc.LidarMatchConfig lidar_match_cfg = 13;
inline bool LocatorConfig::_internal_has_lidar_match_cfg() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || lidar_match_cfg_ != nullptr);
  return value;
}
inline bool LocatorConfig::has_lidar_match_cfg() const {
  return _internal_has_lidar_match_cfg();
}
inline void LocatorConfig::clear_lidar_match_cfg() {
  if (lidar_match_cfg_ != nullptr) lidar_match_cfg_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
inline const ::civ::civloc::LidarMatchConfig& LocatorConfig::_internal_lidar_match_cfg() const {
  const ::civ::civloc::LidarMatchConfig* p = lidar_match_cfg_;
  return p != nullptr ? *p : reinterpret_cast<const ::civ::civloc::LidarMatchConfig&>(
      ::civ::civloc::_LidarMatchConfig_default_instance_);
}
inline const ::civ::civloc::LidarMatchConfig& LocatorConfig::lidar_match_cfg() const {
  // @@protoc_insertion_point(field_get:civ.civloc.LocatorConfig.lidar_match_cfg)
  return _internal_lidar_match_cfg();
}
inline void LocatorConfig::unsafe_arena_set_allocated_lidar_match_cfg(
    ::civ::civloc::LidarMatchConfig* lidar_match_cfg) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lidar_match_cfg_);
  }
  lidar_match_cfg_ = lidar_match_cfg;
  if (lidar_match_cfg) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:civ.civloc.LocatorConfig.lidar_match_cfg)
}
inline ::civ::civloc::LidarMatchConfig* LocatorConfig::release_lidar_match_cfg() {
  _has_bits_[0] &= ~0x00000080u;
  ::civ::civloc::LidarMatchConfig* temp = lidar_match_cfg_;
  lidar_match_cfg_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::civ::civloc::LidarMatchConfig* LocatorConfig::unsafe_arena_release_lidar_match_cfg() {
  // @@protoc_insertion_point(field_release:civ.civloc.LocatorConfig.lidar_match_cfg)
  _has_bits_[0] &= ~0x00000080u;
  ::civ::civloc::LidarMatchConfig* temp = lidar_match_cfg_;
  lidar_match_cfg_ = nullptr;
  return temp;
}
inline ::civ::civloc::LidarMatchConfig* LocatorConfig::_internal_mutable_lidar_match_cfg() {
  _has_bits_[0] |= 0x00000080u;
  if (lidar_match_cfg_ == nullptr) {
    auto* p = CreateMaybeMessage<::civ::civloc::LidarMatchConfig>(GetArena());
    lidar_match_cfg_ = p;
  }
  return lidar_match_cfg_;
}
inline ::civ::civloc::LidarMatchConfig* LocatorConfig::mutable_lidar_match_cfg() {
  // @@protoc_insertion_point(field_mutable:civ.civloc.LocatorConfig.lidar_match_cfg)
  return _internal_mutable_lidar_match_cfg();
}
inline void LocatorConfig::set_allocated_lidar_match_cfg(::civ::civloc::LidarMatchConfig* lidar_match_cfg) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete lidar_match_cfg_;
  }
  if (lidar_match_cfg) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(lidar_match_cfg);
    if (message_arena != submessage_arena) {
      lidar_match_cfg = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lidar_match_cfg, submessage_arena);
    }
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  lidar_match_cfg_ = lidar_match_cfg;
  // @@protoc_insertion_point(field_set_allocated:civ.civloc.LocatorConfig.lidar_match_cfg)
}

// optional .civ.civloc.VisionMatchConfig vision_match_cfg = 14;
inline bool LocatorConfig::_internal_has_vision_match_cfg() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || vision_match_cfg_ != nullptr);
  return value;
}
inline bool LocatorConfig::has_vision_match_cfg() const {
  return _internal_has_vision_match_cfg();
}
inline void LocatorConfig::clear_vision_match_cfg() {
  if (vision_match_cfg_ != nullptr) vision_match_cfg_->Clear();
  _has_bits_[0] &= ~0x00000100u;
}
inline const ::civ::civloc::VisionMatchConfig& LocatorConfig::_internal_vision_match_cfg() const {
  const ::civ::civloc::VisionMatchConfig* p = vision_match_cfg_;
  return p != nullptr ? *p : reinterpret_cast<const ::civ::civloc::VisionMatchConfig&>(
      ::civ::civloc::_VisionMatchConfig_default_instance_);
}
inline const ::civ::civloc::VisionMatchConfig& LocatorConfig::vision_match_cfg() const {
  // @@protoc_insertion_point(field_get:civ.civloc.LocatorConfig.vision_match_cfg)
  return _internal_vision_match_cfg();
}
inline void LocatorConfig::unsafe_arena_set_allocated_vision_match_cfg(
    ::civ::civloc::VisionMatchConfig* vision_match_cfg) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vision_match_cfg_);
  }
  vision_match_cfg_ = vision_match_cfg;
  if (vision_match_cfg) {
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:civ.civloc.LocatorConfig.vision_match_cfg)
}
inline ::civ::civloc::VisionMatchConfig* LocatorConfig::release_vision_match_cfg() {
  _has_bits_[0] &= ~0x00000100u;
  ::civ::civloc::VisionMatchConfig* temp = vision_match_cfg_;
  vision_match_cfg_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::civ::civloc::VisionMatchConfig* LocatorConfig::unsafe_arena_release_vision_match_cfg() {
  // @@protoc_insertion_point(field_release:civ.civloc.LocatorConfig.vision_match_cfg)
  _has_bits_[0] &= ~0x00000100u;
  ::civ::civloc::VisionMatchConfig* temp = vision_match_cfg_;
  vision_match_cfg_ = nullptr;
  return temp;
}
inline ::civ::civloc::VisionMatchConfig* LocatorConfig::_internal_mutable_vision_match_cfg() {
  _has_bits_[0] |= 0x00000100u;
  if (vision_match_cfg_ == nullptr) {
    auto* p = CreateMaybeMessage<::civ::civloc::VisionMatchConfig>(GetArena());
    vision_match_cfg_ = p;
  }
  return vision_match_cfg_;
}
inline ::civ::civloc::VisionMatchConfig* LocatorConfig::mutable_vision_match_cfg() {
  // @@protoc_insertion_point(field_mutable:civ.civloc.LocatorConfig.vision_match_cfg)
  return _internal_mutable_vision_match_cfg();
}
inline void LocatorConfig::set_allocated_vision_match_cfg(::civ::civloc::VisionMatchConfig* vision_match_cfg) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete vision_match_cfg_;
  }
  if (vision_match_cfg) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(vision_match_cfg);
    if (message_arena != submessage_arena) {
      vision_match_cfg = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vision_match_cfg, submessage_arena);
    }
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  vision_match_cfg_ = vision_match_cfg;
  // @@protoc_insertion_point(field_set_allocated:civ.civloc.LocatorConfig.vision_match_cfg)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace civloc
}  // namespace civ

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::civ::civloc::FuseConfig_FuseMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::civ::civloc::FuseConfig_FuseMode>() {
  return ::civ::civloc::FuseConfig_FuseMode_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_civloc_2fproto_2flocator_2eproto
