// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message/map/proto/map_parking_space.proto

#include "message/map/proto/map_parking_space.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_message_2fmap_2fproto_2fmap_5fid_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Id_message_2fmap_2fproto_2fmap_5fid_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_message_2fmap_2fproto_2fmap_5fgeometry_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Polygon_message_2fmap_2fproto_2fmap_5fgeometry_2eproto;
namespace civ {
namespace hdmap {
class ParkingSpaceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ParkingSpace> _instance;
} _ParkingSpace_default_instance_;
class ParkingLotDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ParkingLot> _instance;
} _ParkingLot_default_instance_;
}  // namespace hdmap
}  // namespace civ
static void InitDefaultsscc_info_ParkingLot_message_2fmap_2fproto_2fmap_5fparking_5fspace_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::civ::hdmap::_ParkingLot_default_instance_;
    new (ptr) ::civ::hdmap::ParkingLot();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ParkingLot_message_2fmap_2fproto_2fmap_5fparking_5fspace_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ParkingLot_message_2fmap_2fproto_2fmap_5fparking_5fspace_2eproto}, {
      &scc_info_Id_message_2fmap_2fproto_2fmap_5fid_2eproto.base,
      &scc_info_Polygon_message_2fmap_2fproto_2fmap_5fgeometry_2eproto.base,}};

static void InitDefaultsscc_info_ParkingSpace_message_2fmap_2fproto_2fmap_5fparking_5fspace_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::civ::hdmap::_ParkingSpace_default_instance_;
    new (ptr) ::civ::hdmap::ParkingSpace();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ParkingSpace_message_2fmap_2fproto_2fmap_5fparking_5fspace_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ParkingSpace_message_2fmap_2fproto_2fmap_5fparking_5fspace_2eproto}, {
      &scc_info_Id_message_2fmap_2fproto_2fmap_5fid_2eproto.base,
      &scc_info_Polygon_message_2fmap_2fproto_2fmap_5fgeometry_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_message_2fmap_2fproto_2fmap_5fparking_5fspace_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_message_2fmap_2fproto_2fmap_5fparking_5fspace_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_message_2fmap_2fproto_2fmap_5fparking_5fspace_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_message_2fmap_2fproto_2fmap_5fparking_5fspace_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::civ::hdmap::ParkingSpace, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::civ::hdmap::ParkingSpace, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::civ::hdmap::ParkingSpace, id_),
  PROTOBUF_FIELD_OFFSET(::civ::hdmap::ParkingSpace, polygon_),
  PROTOBUF_FIELD_OFFSET(::civ::hdmap::ParkingSpace, overlap_id_),
  PROTOBUF_FIELD_OFFSET(::civ::hdmap::ParkingSpace, heading_),
  0,
  1,
  ~0u,
  2,
  PROTOBUF_FIELD_OFFSET(::civ::hdmap::ParkingLot, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::civ::hdmap::ParkingLot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::civ::hdmap::ParkingLot, id_),
  PROTOBUF_FIELD_OFFSET(::civ::hdmap::ParkingLot, polygon_),
  PROTOBUF_FIELD_OFFSET(::civ::hdmap::ParkingLot, overlap_id_),
  0,
  1,
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, sizeof(::civ::hdmap::ParkingSpace)},
  { 13, 21, sizeof(::civ::hdmap::ParkingLot)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::civ::hdmap::_ParkingSpace_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::civ::hdmap::_ParkingLot_default_instance_),
};

const char descriptor_table_protodef_message_2fmap_2fproto_2fmap_5fparking_5fspace_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n)message/map/proto/map_parking_space.pr"
  "oto\022\tciv.hdmap\032\036message/map/proto/map_id"
  ".proto\032$message/map/proto/map_geometry.p"
  "roto\"\202\001\n\014ParkingSpace\022\031\n\002id\030\001 \001(\0132\r.civ."
  "hdmap.Id\022#\n\007polygon\030\002 \001(\0132\022.civ.hdmap.Po"
  "lygon\022!\n\noverlap_id\030\003 \003(\0132\r.civ.hdmap.Id"
  "\022\017\n\007heading\030\004 \001(\001\"o\n\nParkingLot\022\031\n\002id\030\001 "
  "\001(\0132\r.civ.hdmap.Id\022#\n\007polygon\030\002 \001(\0132\022.ci"
  "v.hdmap.Polygon\022!\n\noverlap_id\030\003 \003(\0132\r.ci"
  "v.hdmap.Id"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_message_2fmap_2fproto_2fmap_5fparking_5fspace_2eproto_deps[2] = {
  &::descriptor_table_message_2fmap_2fproto_2fmap_5fgeometry_2eproto,
  &::descriptor_table_message_2fmap_2fproto_2fmap_5fid_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_message_2fmap_2fproto_2fmap_5fparking_5fspace_2eproto_sccs[2] = {
  &scc_info_ParkingLot_message_2fmap_2fproto_2fmap_5fparking_5fspace_2eproto.base,
  &scc_info_ParkingSpace_message_2fmap_2fproto_2fmap_5fparking_5fspace_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_message_2fmap_2fproto_2fmap_5fparking_5fspace_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_message_2fmap_2fproto_2fmap_5fparking_5fspace_2eproto = {
  false, false, descriptor_table_protodef_message_2fmap_2fproto_2fmap_5fparking_5fspace_2eproto, "message/map/proto/map_parking_space.proto", 370,
  &descriptor_table_message_2fmap_2fproto_2fmap_5fparking_5fspace_2eproto_once, descriptor_table_message_2fmap_2fproto_2fmap_5fparking_5fspace_2eproto_sccs, descriptor_table_message_2fmap_2fproto_2fmap_5fparking_5fspace_2eproto_deps, 2, 2,
  schemas, file_default_instances, TableStruct_message_2fmap_2fproto_2fmap_5fparking_5fspace_2eproto::offsets,
  file_level_metadata_message_2fmap_2fproto_2fmap_5fparking_5fspace_2eproto, 2, file_level_enum_descriptors_message_2fmap_2fproto_2fmap_5fparking_5fspace_2eproto, file_level_service_descriptors_message_2fmap_2fproto_2fmap_5fparking_5fspace_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_message_2fmap_2fproto_2fmap_5fparking_5fspace_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_message_2fmap_2fproto_2fmap_5fparking_5fspace_2eproto)), true);
namespace civ {
namespace hdmap {

// ===================================================================

class ParkingSpace::_Internal {
 public:
  using HasBits = decltype(std::declval<ParkingSpace>()._has_bits_);
  static const ::civ::hdmap::Id& id(const ParkingSpace* msg);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::civ::hdmap::Polygon& polygon(const ParkingSpace* msg);
  static void set_has_polygon(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_heading(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::civ::hdmap::Id&
ParkingSpace::_Internal::id(const ParkingSpace* msg) {
  return *msg->id_;
}
const ::civ::hdmap::Polygon&
ParkingSpace::_Internal::polygon(const ParkingSpace* msg) {
  return *msg->polygon_;
}
void ParkingSpace::clear_id() {
  if (id_ != nullptr) id_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void ParkingSpace::clear_polygon() {
  if (polygon_ != nullptr) polygon_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void ParkingSpace::clear_overlap_id() {
  overlap_id_.Clear();
}
ParkingSpace::ParkingSpace(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  overlap_id_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:civ.hdmap.ParkingSpace)
}
ParkingSpace::ParkingSpace(const ParkingSpace& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      overlap_id_(from.overlap_id_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_id()) {
    id_ = new ::civ::hdmap::Id(*from.id_);
  } else {
    id_ = nullptr;
  }
  if (from._internal_has_polygon()) {
    polygon_ = new ::civ::hdmap::Polygon(*from.polygon_);
  } else {
    polygon_ = nullptr;
  }
  heading_ = from.heading_;
  // @@protoc_insertion_point(copy_constructor:civ.hdmap.ParkingSpace)
}

void ParkingSpace::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ParkingSpace_message_2fmap_2fproto_2fmap_5fparking_5fspace_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&heading_) -
      reinterpret_cast<char*>(&id_)) + sizeof(heading_));
}

ParkingSpace::~ParkingSpace() {
  // @@protoc_insertion_point(destructor:civ.hdmap.ParkingSpace)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ParkingSpace::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete id_;
  if (this != internal_default_instance()) delete polygon_;
}

void ParkingSpace::ArenaDtor(void* object) {
  ParkingSpace* _this = reinterpret_cast< ParkingSpace* >(object);
  (void)_this;
}
void ParkingSpace::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ParkingSpace::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ParkingSpace& ParkingSpace::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ParkingSpace_message_2fmap_2fproto_2fmap_5fparking_5fspace_2eproto.base);
  return *internal_default_instance();
}


void ParkingSpace::Clear() {
// @@protoc_insertion_point(message_clear_start:civ.hdmap.ParkingSpace)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  overlap_id_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(id_ != nullptr);
      id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(polygon_ != nullptr);
      polygon_->Clear();
    }
  }
  heading_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ParkingSpace::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .civ.hdmap.Id id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .civ.hdmap.Polygon polygon = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_polygon(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .civ.hdmap.Id overlap_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_overlap_id(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // optional double heading = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_heading(&has_bits);
          heading_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ParkingSpace::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:civ.hdmap.ParkingSpace)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .civ.hdmap.Id id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::id(this), target, stream);
  }

  // optional .civ.hdmap.Polygon polygon = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::polygon(this), target, stream);
  }

  // repeated .civ.hdmap.Id overlap_id = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_overlap_id_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_overlap_id(i), target, stream);
  }

  // optional double heading = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_heading(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:civ.hdmap.ParkingSpace)
  return target;
}

size_t ParkingSpace::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:civ.hdmap.ParkingSpace)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .civ.hdmap.Id overlap_id = 3;
  total_size += 1UL * this->_internal_overlap_id_size();
  for (const auto& msg : this->overlap_id_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .civ.hdmap.Id id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *id_);
    }

    // optional .civ.hdmap.Polygon polygon = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *polygon_);
    }

    // optional double heading = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ParkingSpace::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:civ.hdmap.ParkingSpace)
  GOOGLE_DCHECK_NE(&from, this);
  const ParkingSpace* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ParkingSpace>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:civ.hdmap.ParkingSpace)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:civ.hdmap.ParkingSpace)
    MergeFrom(*source);
  }
}

void ParkingSpace::MergeFrom(const ParkingSpace& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:civ.hdmap.ParkingSpace)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  overlap_id_.MergeFrom(from.overlap_id_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_id()->::civ::hdmap::Id::MergeFrom(from._internal_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_polygon()->::civ::hdmap::Polygon::MergeFrom(from._internal_polygon());
    }
    if (cached_has_bits & 0x00000004u) {
      heading_ = from.heading_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ParkingSpace::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:civ.hdmap.ParkingSpace)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ParkingSpace::CopyFrom(const ParkingSpace& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:civ.hdmap.ParkingSpace)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ParkingSpace::IsInitialized() const {
  return true;
}

void ParkingSpace::InternalSwap(ParkingSpace* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  overlap_id_.InternalSwap(&other->overlap_id_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ParkingSpace, heading_)
      + sizeof(ParkingSpace::heading_)
      - PROTOBUF_FIELD_OFFSET(ParkingSpace, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ParkingSpace::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ParkingLot::_Internal {
 public:
  using HasBits = decltype(std::declval<ParkingLot>()._has_bits_);
  static const ::civ::hdmap::Id& id(const ParkingLot* msg);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::civ::hdmap::Polygon& polygon(const ParkingLot* msg);
  static void set_has_polygon(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::civ::hdmap::Id&
ParkingLot::_Internal::id(const ParkingLot* msg) {
  return *msg->id_;
}
const ::civ::hdmap::Polygon&
ParkingLot::_Internal::polygon(const ParkingLot* msg) {
  return *msg->polygon_;
}
void ParkingLot::clear_id() {
  if (id_ != nullptr) id_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void ParkingLot::clear_polygon() {
  if (polygon_ != nullptr) polygon_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void ParkingLot::clear_overlap_id() {
  overlap_id_.Clear();
}
ParkingLot::ParkingLot(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  overlap_id_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:civ.hdmap.ParkingLot)
}
ParkingLot::ParkingLot(const ParkingLot& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      overlap_id_(from.overlap_id_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_id()) {
    id_ = new ::civ::hdmap::Id(*from.id_);
  } else {
    id_ = nullptr;
  }
  if (from._internal_has_polygon()) {
    polygon_ = new ::civ::hdmap::Polygon(*from.polygon_);
  } else {
    polygon_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:civ.hdmap.ParkingLot)
}

void ParkingLot::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ParkingLot_message_2fmap_2fproto_2fmap_5fparking_5fspace_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&polygon_) -
      reinterpret_cast<char*>(&id_)) + sizeof(polygon_));
}

ParkingLot::~ParkingLot() {
  // @@protoc_insertion_point(destructor:civ.hdmap.ParkingLot)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ParkingLot::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete id_;
  if (this != internal_default_instance()) delete polygon_;
}

void ParkingLot::ArenaDtor(void* object) {
  ParkingLot* _this = reinterpret_cast< ParkingLot* >(object);
  (void)_this;
}
void ParkingLot::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ParkingLot::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ParkingLot& ParkingLot::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ParkingLot_message_2fmap_2fproto_2fmap_5fparking_5fspace_2eproto.base);
  return *internal_default_instance();
}


void ParkingLot::Clear() {
// @@protoc_insertion_point(message_clear_start:civ.hdmap.ParkingLot)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  overlap_id_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(id_ != nullptr);
      id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(polygon_ != nullptr);
      polygon_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ParkingLot::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .civ.hdmap.Id id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .civ.hdmap.Polygon polygon = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_polygon(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .civ.hdmap.Id overlap_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_overlap_id(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ParkingLot::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:civ.hdmap.ParkingLot)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .civ.hdmap.Id id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::id(this), target, stream);
  }

  // optional .civ.hdmap.Polygon polygon = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::polygon(this), target, stream);
  }

  // repeated .civ.hdmap.Id overlap_id = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_overlap_id_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_overlap_id(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:civ.hdmap.ParkingLot)
  return target;
}

size_t ParkingLot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:civ.hdmap.ParkingLot)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .civ.hdmap.Id overlap_id = 3;
  total_size += 1UL * this->_internal_overlap_id_size();
  for (const auto& msg : this->overlap_id_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .civ.hdmap.Id id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *id_);
    }

    // optional .civ.hdmap.Polygon polygon = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *polygon_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ParkingLot::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:civ.hdmap.ParkingLot)
  GOOGLE_DCHECK_NE(&from, this);
  const ParkingLot* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ParkingLot>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:civ.hdmap.ParkingLot)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:civ.hdmap.ParkingLot)
    MergeFrom(*source);
  }
}

void ParkingLot::MergeFrom(const ParkingLot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:civ.hdmap.ParkingLot)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  overlap_id_.MergeFrom(from.overlap_id_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_id()->::civ::hdmap::Id::MergeFrom(from._internal_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_polygon()->::civ::hdmap::Polygon::MergeFrom(from._internal_polygon());
    }
  }
}

void ParkingLot::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:civ.hdmap.ParkingLot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ParkingLot::CopyFrom(const ParkingLot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:civ.hdmap.ParkingLot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ParkingLot::IsInitialized() const {
  return true;
}

void ParkingLot::InternalSwap(ParkingLot* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  overlap_id_.InternalSwap(&other->overlap_id_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ParkingLot, polygon_)
      + sizeof(ParkingLot::polygon_)
      - PROTOBUF_FIELD_OFFSET(ParkingLot, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ParkingLot::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace hdmap
}  // namespace civ
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::civ::hdmap::ParkingSpace* Arena::CreateMaybeMessage< ::civ::hdmap::ParkingSpace >(Arena* arena) {
  return Arena::CreateMessageInternal< ::civ::hdmap::ParkingSpace >(arena);
}
template<> PROTOBUF_NOINLINE ::civ::hdmap::ParkingLot* Arena::CreateMaybeMessage< ::civ::hdmap::ParkingLot >(Arena* arena) {
  return Arena::CreateMessageInternal< ::civ::hdmap::ParkingLot >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
