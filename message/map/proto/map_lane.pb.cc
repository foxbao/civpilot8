// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message/map/proto/map_lane.proto

#include "message/map/proto/map_lane.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_message_2fmap_2fproto_2fmap_5fgeometry_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Curve_message_2fmap_2fproto_2fmap_5fgeometry_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_message_2fmap_2fproto_2fmap_5fid_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Id_message_2fmap_2fproto_2fmap_5fid_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_message_2fmap_2fproto_2fmap_5flane_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_LaneBoundary_message_2fmap_2fproto_2fmap_5flane_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_message_2fmap_2fproto_2fmap_5flane_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LaneBoundaryType_message_2fmap_2fproto_2fmap_5flane_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_message_2fmap_2fproto_2fmap_5flane_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LaneSampleAssociation_message_2fmap_2fproto_2fmap_5flane_2eproto;
namespace civ {
namespace hdmap {
class LaneBoundaryTypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LaneBoundaryType> _instance;
} _LaneBoundaryType_default_instance_;
class LaneBoundaryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LaneBoundary> _instance;
} _LaneBoundary_default_instance_;
class LaneSampleAssociationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LaneSampleAssociation> _instance;
} _LaneSampleAssociation_default_instance_;
class LaneDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Lane> _instance;
} _Lane_default_instance_;
}  // namespace hdmap
}  // namespace civ
static void InitDefaultsscc_info_Lane_message_2fmap_2fproto_2fmap_5flane_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::civ::hdmap::_Lane_default_instance_;
    new (ptr) ::civ::hdmap::Lane();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_Lane_message_2fmap_2fproto_2fmap_5flane_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_Lane_message_2fmap_2fproto_2fmap_5flane_2eproto}, {
      &scc_info_Id_message_2fmap_2fproto_2fmap_5fid_2eproto.base,
      &scc_info_Curve_message_2fmap_2fproto_2fmap_5fgeometry_2eproto.base,
      &scc_info_LaneBoundary_message_2fmap_2fproto_2fmap_5flane_2eproto.base,
      &scc_info_LaneSampleAssociation_message_2fmap_2fproto_2fmap_5flane_2eproto.base,}};

static void InitDefaultsscc_info_LaneBoundary_message_2fmap_2fproto_2fmap_5flane_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::civ::hdmap::_LaneBoundary_default_instance_;
    new (ptr) ::civ::hdmap::LaneBoundary();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_LaneBoundary_message_2fmap_2fproto_2fmap_5flane_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_LaneBoundary_message_2fmap_2fproto_2fmap_5flane_2eproto}, {
      &scc_info_Curve_message_2fmap_2fproto_2fmap_5fgeometry_2eproto.base,
      &scc_info_LaneBoundaryType_message_2fmap_2fproto_2fmap_5flane_2eproto.base,
      &scc_info_Id_message_2fmap_2fproto_2fmap_5fid_2eproto.base,}};

static void InitDefaultsscc_info_LaneBoundaryType_message_2fmap_2fproto_2fmap_5flane_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::civ::hdmap::_LaneBoundaryType_default_instance_;
    new (ptr) ::civ::hdmap::LaneBoundaryType();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LaneBoundaryType_message_2fmap_2fproto_2fmap_5flane_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LaneBoundaryType_message_2fmap_2fproto_2fmap_5flane_2eproto}, {}};

static void InitDefaultsscc_info_LaneSampleAssociation_message_2fmap_2fproto_2fmap_5flane_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::civ::hdmap::_LaneSampleAssociation_default_instance_;
    new (ptr) ::civ::hdmap::LaneSampleAssociation();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LaneSampleAssociation_message_2fmap_2fproto_2fmap_5flane_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LaneSampleAssociation_message_2fmap_2fproto_2fmap_5flane_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_message_2fmap_2fproto_2fmap_5flane_2eproto[4];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_message_2fmap_2fproto_2fmap_5flane_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_message_2fmap_2fproto_2fmap_5flane_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_message_2fmap_2fproto_2fmap_5flane_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::civ::hdmap::LaneBoundaryType, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::civ::hdmap::LaneBoundaryType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::civ::hdmap::LaneBoundaryType, s_),
  PROTOBUF_FIELD_OFFSET(::civ::hdmap::LaneBoundaryType, types_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::civ::hdmap::LaneBoundary, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::civ::hdmap::LaneBoundary, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::civ::hdmap::LaneBoundary, curve_),
  PROTOBUF_FIELD_OFFSET(::civ::hdmap::LaneBoundary, length_),
  PROTOBUF_FIELD_OFFSET(::civ::hdmap::LaneBoundary, virtual__),
  PROTOBUF_FIELD_OFFSET(::civ::hdmap::LaneBoundary, boundary_type_),
  PROTOBUF_FIELD_OFFSET(::civ::hdmap::LaneBoundary, id_),
  0,
  2,
  3,
  ~0u,
  1,
  PROTOBUF_FIELD_OFFSET(::civ::hdmap::LaneSampleAssociation, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::civ::hdmap::LaneSampleAssociation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::civ::hdmap::LaneSampleAssociation, s_),
  PROTOBUF_FIELD_OFFSET(::civ::hdmap::LaneSampleAssociation, width_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::civ::hdmap::Lane, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::civ::hdmap::Lane, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::civ::hdmap::Lane, id_),
  PROTOBUF_FIELD_OFFSET(::civ::hdmap::Lane, central_curve_),
  PROTOBUF_FIELD_OFFSET(::civ::hdmap::Lane, left_boundary_),
  PROTOBUF_FIELD_OFFSET(::civ::hdmap::Lane, right_boundary_),
  PROTOBUF_FIELD_OFFSET(::civ::hdmap::Lane, length_),
  PROTOBUF_FIELD_OFFSET(::civ::hdmap::Lane, speed_limit_),
  PROTOBUF_FIELD_OFFSET(::civ::hdmap::Lane, overlap_id_),
  PROTOBUF_FIELD_OFFSET(::civ::hdmap::Lane, predecessor_id_),
  PROTOBUF_FIELD_OFFSET(::civ::hdmap::Lane, successor_id_),
  PROTOBUF_FIELD_OFFSET(::civ::hdmap::Lane, left_neighbor_forward_lane_id_),
  PROTOBUF_FIELD_OFFSET(::civ::hdmap::Lane, right_neighbor_forward_lane_id_),
  PROTOBUF_FIELD_OFFSET(::civ::hdmap::Lane, type_),
  PROTOBUF_FIELD_OFFSET(::civ::hdmap::Lane, turn_),
  PROTOBUF_FIELD_OFFSET(::civ::hdmap::Lane, left_neighbor_reverse_lane_id_),
  PROTOBUF_FIELD_OFFSET(::civ::hdmap::Lane, right_neighbor_reverse_lane_id_),
  PROTOBUF_FIELD_OFFSET(::civ::hdmap::Lane, junction_id_),
  PROTOBUF_FIELD_OFFSET(::civ::hdmap::Lane, left_sample_),
  PROTOBUF_FIELD_OFFSET(::civ::hdmap::Lane, right_sample_),
  PROTOBUF_FIELD_OFFSET(::civ::hdmap::Lane, direction_),
  PROTOBUF_FIELD_OFFSET(::civ::hdmap::Lane, left_road_sample_),
  PROTOBUF_FIELD_OFFSET(::civ::hdmap::Lane, right_road_sample_),
  PROTOBUF_FIELD_OFFSET(::civ::hdmap::Lane, self_reverse_lane_id_),
  PROTOBUF_FIELD_OFFSET(::civ::hdmap::Lane, min_speed_limit_),
  PROTOBUF_FIELD_OFFSET(::civ::hdmap::Lane, is_illegal_lane_),
  PROTOBUF_FIELD_OFFSET(::civ::hdmap::Lane, is_side_road_),
  PROTOBUF_FIELD_OFFSET(::civ::hdmap::Lane, is_connecting_lane_),
  PROTOBUF_FIELD_OFFSET(::civ::hdmap::Lane, is_passable_lane_),
  PROTOBUF_FIELD_OFFSET(::civ::hdmap::Lane, section_id_),
  PROTOBUF_FIELD_OFFSET(::civ::hdmap::Lane, is_vehicle_on_),
  0,
  1,
  2,
  3,
  6,
  7,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  15,
  16,
  ~0u,
  ~0u,
  4,
  ~0u,
  ~0u,
  14,
  ~0u,
  ~0u,
  ~0u,
  8,
  9,
  10,
  11,
  12,
  5,
  13,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::civ::hdmap::LaneBoundaryType)},
  { 9, 19, sizeof(::civ::hdmap::LaneBoundary)},
  { 24, 31, sizeof(::civ::hdmap::LaneSampleAssociation)},
  { 33, 67, sizeof(::civ::hdmap::Lane)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::civ::hdmap::_LaneBoundaryType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::civ::hdmap::_LaneBoundary_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::civ::hdmap::_LaneSampleAssociation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::civ::hdmap::_Lane_default_instance_),
};

const char descriptor_table_protodef_message_2fmap_2fproto_2fmap_5flane_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n message/map/proto/map_lane.proto\022\tciv."
  "hdmap\032\036message/map/proto/map_id.proto\032$m"
  "essage/map/proto/map_geometry.proto\"\310\001\n\020"
  "LaneBoundaryType\022\t\n\001s\030\001 \001(\001\022/\n\005types\030\002 \003"
  "(\0162 .civ.hdmap.LaneBoundaryType.Type\"x\n\004"
  "Type\022\013\n\007UNKNOWN\020\000\022\021\n\rDOTTED_YELLOW\020\001\022\020\n\014"
  "DOTTED_WHITE\020\002\022\020\n\014SOLID_YELLOW\020\003\022\017\n\013SOLI"
  "D_WHITE\020\004\022\021\n\rDOUBLE_YELLOW\020\005\022\010\n\004CURB\020\006\"\237"
  "\001\n\014LaneBoundary\022\037\n\005curve\030\001 \001(\0132\020.civ.hdm"
  "ap.Curve\022\016\n\006length\030\002 \001(\001\022\017\n\007virtual\030\003 \001("
  "\010\0222\n\rboundary_type\030\004 \003(\0132\033.civ.hdmap.Lan"
  "eBoundaryType\022\031\n\002id\030\005 \001(\0132\r.civ.hdmap.Id"
  "\"1\n\025LaneSampleAssociation\022\t\n\001s\030\001 \001(\001\022\r\n\005"
  "width\030\002 \001(\001\"\235\013\n\004Lane\022\031\n\002id\030\001 \001(\0132\r.civ.h"
  "dmap.Id\022\'\n\rcentral_curve\030\002 \001(\0132\020.civ.hdm"
  "ap.Curve\022.\n\rleft_boundary\030\003 \001(\0132\027.civ.hd"
  "map.LaneBoundary\022/\n\016right_boundary\030\004 \001(\013"
  "2\027.civ.hdmap.LaneBoundary\022\016\n\006length\030\005 \001("
  "\001\022\023\n\013speed_limit\030\006 \001(\001\022!\n\noverlap_id\030\007 \003"
  "(\0132\r.civ.hdmap.Id\022%\n\016predecessor_id\030\010 \003("
  "\0132\r.civ.hdmap.Id\022#\n\014successor_id\030\t \003(\0132\r"
  ".civ.hdmap.Id\0224\n\035left_neighbor_forward_l"
  "ane_id\030\n \003(\0132\r.civ.hdmap.Id\0225\n\036right_nei"
  "ghbor_forward_lane_id\030\013 \003(\0132\r.civ.hdmap."
  "Id\022&\n\004type\030\014 \001(\0162\030.civ.hdmap.Lane.LaneTy"
  "pe\022&\n\004turn\030\r \001(\0162\030.civ.hdmap.Lane.LaneTu"
  "rn\0224\n\035left_neighbor_reverse_lane_id\030\016 \003("
  "\0132\r.civ.hdmap.Id\0225\n\036right_neighbor_rever"
  "se_lane_id\030\017 \003(\0132\r.civ.hdmap.Id\022\"\n\013junct"
  "ion_id\030\020 \001(\0132\r.civ.hdmap.Id\0225\n\013left_samp"
  "le\030\021 \003(\0132 .civ.hdmap.LaneSampleAssociati"
  "on\0226\n\014right_sample\030\022 \003(\0132 .civ.hdmap.Lan"
  "eSampleAssociation\0220\n\tdirection\030\023 \001(\0162\035."
  "civ.hdmap.Lane.LaneDirection\022:\n\020left_roa"
  "d_sample\030\024 \003(\0132 .civ.hdmap.LaneSampleAss"
  "ociation\022;\n\021right_road_sample\030\025 \003(\0132 .ci"
  "v.hdmap.LaneSampleAssociation\022+\n\024self_re"
  "verse_lane_id\030\026 \003(\0132\r.civ.hdmap.Id\022\027\n\017mi"
  "n_speed_limit\030\027 \001(\001\022\027\n\017is_illegal_lane\030\030"
  " \001(\010\022\024\n\014is_side_road\030\031 \001(\010\022\032\n\022is_connect"
  "ing_lane\030\032 \001(\010\022\030\n\020is_passable_lane\030\033 \001(\010"
  "\022!\n\nsection_id\030\034 \001(\0132\r.civ.hdmap.Id\022\025\n\ri"
  "s_vehicle_on\030\035 \001(\010\"\215\001\n\010LaneType\022\010\n\004NONE\020"
  "\001\022\020\n\014CITY_DRIVING\020\002\022\n\n\006BIKING\020\003\022\014\n\010SIDEW"
  "ALK\020\004\022\013\n\007PARKING\020\005\022\014\n\010SHOULDER\020\006\022\017\n\013BUS_"
  "DRIVING\020\007\022\020\n\014RAMP_DRIVING\020\010\022\r\n\tEMERGENCY"
  "\020\t\"B\n\010LaneTurn\022\013\n\007NO_TURN\020\001\022\r\n\tLEFT_TURN"
  "\020\002\022\016\n\nRIGHT_TURN\020\003\022\n\n\006U_TURN\020\004\";\n\rLaneDi"
  "rection\022\013\n\007FORWARD\020\001\022\014\n\010BACKWARD\020\002\022\017\n\013BI"
  "DIRECTION\020\003"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_message_2fmap_2fproto_2fmap_5flane_2eproto_deps[2] = {
  &::descriptor_table_message_2fmap_2fproto_2fmap_5fgeometry_2eproto,
  &::descriptor_table_message_2fmap_2fproto_2fmap_5fid_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_message_2fmap_2fproto_2fmap_5flane_2eproto_sccs[4] = {
  &scc_info_Lane_message_2fmap_2fproto_2fmap_5flane_2eproto.base,
  &scc_info_LaneBoundary_message_2fmap_2fproto_2fmap_5flane_2eproto.base,
  &scc_info_LaneBoundaryType_message_2fmap_2fproto_2fmap_5flane_2eproto.base,
  &scc_info_LaneSampleAssociation_message_2fmap_2fproto_2fmap_5flane_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_message_2fmap_2fproto_2fmap_5flane_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_message_2fmap_2fproto_2fmap_5flane_2eproto = {
  false, false, descriptor_table_protodef_message_2fmap_2fproto_2fmap_5flane_2eproto, "message/map/proto/map_lane.proto", 1971,
  &descriptor_table_message_2fmap_2fproto_2fmap_5flane_2eproto_once, descriptor_table_message_2fmap_2fproto_2fmap_5flane_2eproto_sccs, descriptor_table_message_2fmap_2fproto_2fmap_5flane_2eproto_deps, 4, 2,
  schemas, file_default_instances, TableStruct_message_2fmap_2fproto_2fmap_5flane_2eproto::offsets,
  file_level_metadata_message_2fmap_2fproto_2fmap_5flane_2eproto, 4, file_level_enum_descriptors_message_2fmap_2fproto_2fmap_5flane_2eproto, file_level_service_descriptors_message_2fmap_2fproto_2fmap_5flane_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_message_2fmap_2fproto_2fmap_5flane_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_message_2fmap_2fproto_2fmap_5flane_2eproto)), true);
namespace civ {
namespace hdmap {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LaneBoundaryType_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_message_2fmap_2fproto_2fmap_5flane_2eproto);
  return file_level_enum_descriptors_message_2fmap_2fproto_2fmap_5flane_2eproto[0];
}
bool LaneBoundaryType_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr LaneBoundaryType_Type LaneBoundaryType::UNKNOWN;
constexpr LaneBoundaryType_Type LaneBoundaryType::DOTTED_YELLOW;
constexpr LaneBoundaryType_Type LaneBoundaryType::DOTTED_WHITE;
constexpr LaneBoundaryType_Type LaneBoundaryType::SOLID_YELLOW;
constexpr LaneBoundaryType_Type LaneBoundaryType::SOLID_WHITE;
constexpr LaneBoundaryType_Type LaneBoundaryType::DOUBLE_YELLOW;
constexpr LaneBoundaryType_Type LaneBoundaryType::CURB;
constexpr LaneBoundaryType_Type LaneBoundaryType::Type_MIN;
constexpr LaneBoundaryType_Type LaneBoundaryType::Type_MAX;
constexpr int LaneBoundaryType::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Lane_LaneType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_message_2fmap_2fproto_2fmap_5flane_2eproto);
  return file_level_enum_descriptors_message_2fmap_2fproto_2fmap_5flane_2eproto[1];
}
bool Lane_LaneType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Lane_LaneType Lane::NONE;
constexpr Lane_LaneType Lane::CITY_DRIVING;
constexpr Lane_LaneType Lane::BIKING;
constexpr Lane_LaneType Lane::SIDEWALK;
constexpr Lane_LaneType Lane::PARKING;
constexpr Lane_LaneType Lane::SHOULDER;
constexpr Lane_LaneType Lane::BUS_DRIVING;
constexpr Lane_LaneType Lane::RAMP_DRIVING;
constexpr Lane_LaneType Lane::EMERGENCY;
constexpr Lane_LaneType Lane::LaneType_MIN;
constexpr Lane_LaneType Lane::LaneType_MAX;
constexpr int Lane::LaneType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Lane_LaneTurn_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_message_2fmap_2fproto_2fmap_5flane_2eproto);
  return file_level_enum_descriptors_message_2fmap_2fproto_2fmap_5flane_2eproto[2];
}
bool Lane_LaneTurn_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Lane_LaneTurn Lane::NO_TURN;
constexpr Lane_LaneTurn Lane::LEFT_TURN;
constexpr Lane_LaneTurn Lane::RIGHT_TURN;
constexpr Lane_LaneTurn Lane::U_TURN;
constexpr Lane_LaneTurn Lane::LaneTurn_MIN;
constexpr Lane_LaneTurn Lane::LaneTurn_MAX;
constexpr int Lane::LaneTurn_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Lane_LaneDirection_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_message_2fmap_2fproto_2fmap_5flane_2eproto);
  return file_level_enum_descriptors_message_2fmap_2fproto_2fmap_5flane_2eproto[3];
}
bool Lane_LaneDirection_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Lane_LaneDirection Lane::FORWARD;
constexpr Lane_LaneDirection Lane::BACKWARD;
constexpr Lane_LaneDirection Lane::BIDIRECTION;
constexpr Lane_LaneDirection Lane::LaneDirection_MIN;
constexpr Lane_LaneDirection Lane::LaneDirection_MAX;
constexpr int Lane::LaneDirection_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

class LaneBoundaryType::_Internal {
 public:
  using HasBits = decltype(std::declval<LaneBoundaryType>()._has_bits_);
  static void set_has_s(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

LaneBoundaryType::LaneBoundaryType(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  types_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:civ.hdmap.LaneBoundaryType)
}
LaneBoundaryType::LaneBoundaryType(const LaneBoundaryType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      types_(from.types_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  s_ = from.s_;
  // @@protoc_insertion_point(copy_constructor:civ.hdmap.LaneBoundaryType)
}

void LaneBoundaryType::SharedCtor() {
  s_ = 0;
}

LaneBoundaryType::~LaneBoundaryType() {
  // @@protoc_insertion_point(destructor:civ.hdmap.LaneBoundaryType)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LaneBoundaryType::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void LaneBoundaryType::ArenaDtor(void* object) {
  LaneBoundaryType* _this = reinterpret_cast< LaneBoundaryType* >(object);
  (void)_this;
}
void LaneBoundaryType::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LaneBoundaryType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LaneBoundaryType& LaneBoundaryType::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LaneBoundaryType_message_2fmap_2fproto_2fmap_5flane_2eproto.base);
  return *internal_default_instance();
}


void LaneBoundaryType::Clear() {
// @@protoc_insertion_point(message_clear_start:civ.hdmap.LaneBoundaryType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  types_.Clear();
  s_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LaneBoundaryType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional double s = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_s(&has_bits);
          s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated .civ.hdmap.LaneBoundaryType.Type types = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::civ::hdmap::LaneBoundaryType_Type_IsValid(val))) {
              _internal_add_types(static_cast<::civ::hdmap::LaneBoundaryType_Type>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(_internal_mutable_types(), ptr, ctx, ::civ::hdmap::LaneBoundaryType_Type_IsValid, &_internal_metadata_, 2);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LaneBoundaryType::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:civ.hdmap.LaneBoundaryType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double s = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_s(), target);
  }

  // repeated .civ.hdmap.LaneBoundaryType.Type types = 2;
  for (int i = 0, n = this->_internal_types_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
        2, this->_internal_types(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:civ.hdmap.LaneBoundaryType)
  return target;
}

size_t LaneBoundaryType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:civ.hdmap.LaneBoundaryType)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .civ.hdmap.LaneBoundaryType.Type types = 2;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_types_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_types(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  // optional double s = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LaneBoundaryType::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:civ.hdmap.LaneBoundaryType)
  GOOGLE_DCHECK_NE(&from, this);
  const LaneBoundaryType* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LaneBoundaryType>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:civ.hdmap.LaneBoundaryType)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:civ.hdmap.LaneBoundaryType)
    MergeFrom(*source);
  }
}

void LaneBoundaryType::MergeFrom(const LaneBoundaryType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:civ.hdmap.LaneBoundaryType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  types_.MergeFrom(from.types_);
  if (from._internal_has_s()) {
    _internal_set_s(from._internal_s());
  }
}

void LaneBoundaryType::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:civ.hdmap.LaneBoundaryType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LaneBoundaryType::CopyFrom(const LaneBoundaryType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:civ.hdmap.LaneBoundaryType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaneBoundaryType::IsInitialized() const {
  return true;
}

void LaneBoundaryType::InternalSwap(LaneBoundaryType* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  types_.InternalSwap(&other->types_);
  swap(s_, other->s_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LaneBoundaryType::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class LaneBoundary::_Internal {
 public:
  using HasBits = decltype(std::declval<LaneBoundary>()._has_bits_);
  static const ::civ::hdmap::Curve& curve(const LaneBoundary* msg);
  static void set_has_curve(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_length(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_virtual_(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::civ::hdmap::Id& id(const LaneBoundary* msg);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::civ::hdmap::Curve&
LaneBoundary::_Internal::curve(const LaneBoundary* msg) {
  return *msg->curve_;
}
const ::civ::hdmap::Id&
LaneBoundary::_Internal::id(const LaneBoundary* msg) {
  return *msg->id_;
}
void LaneBoundary::clear_curve() {
  if (curve_ != nullptr) curve_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void LaneBoundary::clear_id() {
  if (id_ != nullptr) id_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
LaneBoundary::LaneBoundary(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  boundary_type_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:civ.hdmap.LaneBoundary)
}
LaneBoundary::LaneBoundary(const LaneBoundary& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      boundary_type_(from.boundary_type_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_curve()) {
    curve_ = new ::civ::hdmap::Curve(*from.curve_);
  } else {
    curve_ = nullptr;
  }
  if (from._internal_has_id()) {
    id_ = new ::civ::hdmap::Id(*from.id_);
  } else {
    id_ = nullptr;
  }
  ::memcpy(&length_, &from.length_,
    static_cast<size_t>(reinterpret_cast<char*>(&virtual__) -
    reinterpret_cast<char*>(&length_)) + sizeof(virtual__));
  // @@protoc_insertion_point(copy_constructor:civ.hdmap.LaneBoundary)
}

void LaneBoundary::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LaneBoundary_message_2fmap_2fproto_2fmap_5flane_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&curve_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&virtual__) -
      reinterpret_cast<char*>(&curve_)) + sizeof(virtual__));
}

LaneBoundary::~LaneBoundary() {
  // @@protoc_insertion_point(destructor:civ.hdmap.LaneBoundary)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LaneBoundary::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete curve_;
  if (this != internal_default_instance()) delete id_;
}

void LaneBoundary::ArenaDtor(void* object) {
  LaneBoundary* _this = reinterpret_cast< LaneBoundary* >(object);
  (void)_this;
}
void LaneBoundary::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LaneBoundary::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LaneBoundary& LaneBoundary::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LaneBoundary_message_2fmap_2fproto_2fmap_5flane_2eproto.base);
  return *internal_default_instance();
}


void LaneBoundary::Clear() {
// @@protoc_insertion_point(message_clear_start:civ.hdmap.LaneBoundary)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  boundary_type_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(curve_ != nullptr);
      curve_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(id_ != nullptr);
      id_->Clear();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&length_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&virtual__) -
        reinterpret_cast<char*>(&length_)) + sizeof(virtual__));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LaneBoundary::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .civ.hdmap.Curve curve = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_curve(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double length = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_length(&has_bits);
          length_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional bool virtual = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_virtual_(&has_bits);
          virtual__ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .civ.hdmap.LaneBoundaryType boundary_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_boundary_type(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .civ.hdmap.Id id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LaneBoundary::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:civ.hdmap.LaneBoundary)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .civ.hdmap.Curve curve = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::curve(this), target, stream);
  }

  // optional double length = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_length(), target);
  }

  // optional bool virtual = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_virtual_(), target);
  }

  // repeated .civ.hdmap.LaneBoundaryType boundary_type = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_boundary_type_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_boundary_type(i), target, stream);
  }

  // optional .civ.hdmap.Id id = 5;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::id(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:civ.hdmap.LaneBoundary)
  return target;
}

size_t LaneBoundary::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:civ.hdmap.LaneBoundary)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .civ.hdmap.LaneBoundaryType boundary_type = 4;
  total_size += 1UL * this->_internal_boundary_type_size();
  for (const auto& msg : this->boundary_type_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .civ.hdmap.Curve curve = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *curve_);
    }

    // optional .civ.hdmap.Id id = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *id_);
    }

    // optional double length = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional bool virtual = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LaneBoundary::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:civ.hdmap.LaneBoundary)
  GOOGLE_DCHECK_NE(&from, this);
  const LaneBoundary* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LaneBoundary>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:civ.hdmap.LaneBoundary)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:civ.hdmap.LaneBoundary)
    MergeFrom(*source);
  }
}

void LaneBoundary::MergeFrom(const LaneBoundary& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:civ.hdmap.LaneBoundary)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  boundary_type_.MergeFrom(from.boundary_type_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_curve()->::civ::hdmap::Curve::MergeFrom(from._internal_curve());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_id()->::civ::hdmap::Id::MergeFrom(from._internal_id());
    }
    if (cached_has_bits & 0x00000004u) {
      length_ = from.length_;
    }
    if (cached_has_bits & 0x00000008u) {
      virtual__ = from.virtual__;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LaneBoundary::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:civ.hdmap.LaneBoundary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LaneBoundary::CopyFrom(const LaneBoundary& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:civ.hdmap.LaneBoundary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaneBoundary::IsInitialized() const {
  return true;
}

void LaneBoundary::InternalSwap(LaneBoundary* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  boundary_type_.InternalSwap(&other->boundary_type_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LaneBoundary, virtual__)
      + sizeof(LaneBoundary::virtual__)
      - PROTOBUF_FIELD_OFFSET(LaneBoundary, curve_)>(
          reinterpret_cast<char*>(&curve_),
          reinterpret_cast<char*>(&other->curve_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LaneBoundary::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class LaneSampleAssociation::_Internal {
 public:
  using HasBits = decltype(std::declval<LaneSampleAssociation>()._has_bits_);
  static void set_has_s(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_width(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

LaneSampleAssociation::LaneSampleAssociation(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:civ.hdmap.LaneSampleAssociation)
}
LaneSampleAssociation::LaneSampleAssociation(const LaneSampleAssociation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&s_, &from.s_,
    static_cast<size_t>(reinterpret_cast<char*>(&width_) -
    reinterpret_cast<char*>(&s_)) + sizeof(width_));
  // @@protoc_insertion_point(copy_constructor:civ.hdmap.LaneSampleAssociation)
}

void LaneSampleAssociation::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&s_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&width_) -
      reinterpret_cast<char*>(&s_)) + sizeof(width_));
}

LaneSampleAssociation::~LaneSampleAssociation() {
  // @@protoc_insertion_point(destructor:civ.hdmap.LaneSampleAssociation)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LaneSampleAssociation::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void LaneSampleAssociation::ArenaDtor(void* object) {
  LaneSampleAssociation* _this = reinterpret_cast< LaneSampleAssociation* >(object);
  (void)_this;
}
void LaneSampleAssociation::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LaneSampleAssociation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LaneSampleAssociation& LaneSampleAssociation::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LaneSampleAssociation_message_2fmap_2fproto_2fmap_5flane_2eproto.base);
  return *internal_default_instance();
}


void LaneSampleAssociation::Clear() {
// @@protoc_insertion_point(message_clear_start:civ.hdmap.LaneSampleAssociation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&s_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&width_) -
        reinterpret_cast<char*>(&s_)) + sizeof(width_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LaneSampleAssociation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional double s = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_s(&has_bits);
          s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double width = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_width(&has_bits);
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LaneSampleAssociation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:civ.hdmap.LaneSampleAssociation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double s = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_s(), target);
  }

  // optional double width = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_width(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:civ.hdmap.LaneSampleAssociation)
  return target;
}

size_t LaneSampleAssociation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:civ.hdmap.LaneSampleAssociation)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional double s = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double width = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LaneSampleAssociation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:civ.hdmap.LaneSampleAssociation)
  GOOGLE_DCHECK_NE(&from, this);
  const LaneSampleAssociation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LaneSampleAssociation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:civ.hdmap.LaneSampleAssociation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:civ.hdmap.LaneSampleAssociation)
    MergeFrom(*source);
  }
}

void LaneSampleAssociation::MergeFrom(const LaneSampleAssociation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:civ.hdmap.LaneSampleAssociation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      s_ = from.s_;
    }
    if (cached_has_bits & 0x00000002u) {
      width_ = from.width_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LaneSampleAssociation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:civ.hdmap.LaneSampleAssociation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LaneSampleAssociation::CopyFrom(const LaneSampleAssociation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:civ.hdmap.LaneSampleAssociation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaneSampleAssociation::IsInitialized() const {
  return true;
}

void LaneSampleAssociation::InternalSwap(LaneSampleAssociation* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LaneSampleAssociation, width_)
      + sizeof(LaneSampleAssociation::width_)
      - PROTOBUF_FIELD_OFFSET(LaneSampleAssociation, s_)>(
          reinterpret_cast<char*>(&s_),
          reinterpret_cast<char*>(&other->s_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LaneSampleAssociation::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Lane::_Internal {
 public:
  using HasBits = decltype(std::declval<Lane>()._has_bits_);
  static const ::civ::hdmap::Id& id(const Lane* msg);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::civ::hdmap::Curve& central_curve(const Lane* msg);
  static void set_has_central_curve(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::civ::hdmap::LaneBoundary& left_boundary(const Lane* msg);
  static void set_has_left_boundary(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::civ::hdmap::LaneBoundary& right_boundary(const Lane* msg);
  static void set_has_right_boundary(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_length(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_speed_limit(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_turn(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static const ::civ::hdmap::Id& junction_id(const Lane* msg);
  static void set_has_junction_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_direction(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_min_speed_limit(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_is_illegal_lane(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_is_side_road(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_is_connecting_lane(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_is_passable_lane(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static const ::civ::hdmap::Id& section_id(const Lane* msg);
  static void set_has_section_id(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_is_vehicle_on(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
};

const ::civ::hdmap::Id&
Lane::_Internal::id(const Lane* msg) {
  return *msg->id_;
}
const ::civ::hdmap::Curve&
Lane::_Internal::central_curve(const Lane* msg) {
  return *msg->central_curve_;
}
const ::civ::hdmap::LaneBoundary&
Lane::_Internal::left_boundary(const Lane* msg) {
  return *msg->left_boundary_;
}
const ::civ::hdmap::LaneBoundary&
Lane::_Internal::right_boundary(const Lane* msg) {
  return *msg->right_boundary_;
}
const ::civ::hdmap::Id&
Lane::_Internal::junction_id(const Lane* msg) {
  return *msg->junction_id_;
}
const ::civ::hdmap::Id&
Lane::_Internal::section_id(const Lane* msg) {
  return *msg->section_id_;
}
void Lane::clear_id() {
  if (id_ != nullptr) id_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void Lane::clear_central_curve() {
  if (central_curve_ != nullptr) central_curve_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void Lane::clear_overlap_id() {
  overlap_id_.Clear();
}
void Lane::clear_predecessor_id() {
  predecessor_id_.Clear();
}
void Lane::clear_successor_id() {
  successor_id_.Clear();
}
void Lane::clear_left_neighbor_forward_lane_id() {
  left_neighbor_forward_lane_id_.Clear();
}
void Lane::clear_right_neighbor_forward_lane_id() {
  right_neighbor_forward_lane_id_.Clear();
}
void Lane::clear_left_neighbor_reverse_lane_id() {
  left_neighbor_reverse_lane_id_.Clear();
}
void Lane::clear_right_neighbor_reverse_lane_id() {
  right_neighbor_reverse_lane_id_.Clear();
}
void Lane::clear_junction_id() {
  if (junction_id_ != nullptr) junction_id_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
void Lane::clear_self_reverse_lane_id() {
  self_reverse_lane_id_.Clear();
}
void Lane::clear_section_id() {
  if (section_id_ != nullptr) section_id_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
Lane::Lane(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  overlap_id_(arena),
  predecessor_id_(arena),
  successor_id_(arena),
  left_neighbor_forward_lane_id_(arena),
  right_neighbor_forward_lane_id_(arena),
  left_neighbor_reverse_lane_id_(arena),
  right_neighbor_reverse_lane_id_(arena),
  left_sample_(arena),
  right_sample_(arena),
  left_road_sample_(arena),
  right_road_sample_(arena),
  self_reverse_lane_id_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:civ.hdmap.Lane)
}
Lane::Lane(const Lane& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      overlap_id_(from.overlap_id_),
      predecessor_id_(from.predecessor_id_),
      successor_id_(from.successor_id_),
      left_neighbor_forward_lane_id_(from.left_neighbor_forward_lane_id_),
      right_neighbor_forward_lane_id_(from.right_neighbor_forward_lane_id_),
      left_neighbor_reverse_lane_id_(from.left_neighbor_reverse_lane_id_),
      right_neighbor_reverse_lane_id_(from.right_neighbor_reverse_lane_id_),
      left_sample_(from.left_sample_),
      right_sample_(from.right_sample_),
      left_road_sample_(from.left_road_sample_),
      right_road_sample_(from.right_road_sample_),
      self_reverse_lane_id_(from.self_reverse_lane_id_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_id()) {
    id_ = new ::civ::hdmap::Id(*from.id_);
  } else {
    id_ = nullptr;
  }
  if (from._internal_has_central_curve()) {
    central_curve_ = new ::civ::hdmap::Curve(*from.central_curve_);
  } else {
    central_curve_ = nullptr;
  }
  if (from._internal_has_left_boundary()) {
    left_boundary_ = new ::civ::hdmap::LaneBoundary(*from.left_boundary_);
  } else {
    left_boundary_ = nullptr;
  }
  if (from._internal_has_right_boundary()) {
    right_boundary_ = new ::civ::hdmap::LaneBoundary(*from.right_boundary_);
  } else {
    right_boundary_ = nullptr;
  }
  if (from._internal_has_junction_id()) {
    junction_id_ = new ::civ::hdmap::Id(*from.junction_id_);
  } else {
    junction_id_ = nullptr;
  }
  if (from._internal_has_section_id()) {
    section_id_ = new ::civ::hdmap::Id(*from.section_id_);
  } else {
    section_id_ = nullptr;
  }
  ::memcpy(&length_, &from.length_,
    static_cast<size_t>(reinterpret_cast<char*>(&turn_) -
    reinterpret_cast<char*>(&length_)) + sizeof(turn_));
  // @@protoc_insertion_point(copy_constructor:civ.hdmap.Lane)
}

void Lane::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Lane_message_2fmap_2fproto_2fmap_5flane_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&is_vehicle_on_) -
      reinterpret_cast<char*>(&id_)) + sizeof(is_vehicle_on_));
  direction_ = 1;
  type_ = 1;
  turn_ = 1;
}

Lane::~Lane() {
  // @@protoc_insertion_point(destructor:civ.hdmap.Lane)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Lane::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete id_;
  if (this != internal_default_instance()) delete central_curve_;
  if (this != internal_default_instance()) delete left_boundary_;
  if (this != internal_default_instance()) delete right_boundary_;
  if (this != internal_default_instance()) delete junction_id_;
  if (this != internal_default_instance()) delete section_id_;
}

void Lane::ArenaDtor(void* object) {
  Lane* _this = reinterpret_cast< Lane* >(object);
  (void)_this;
}
void Lane::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Lane::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Lane& Lane::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Lane_message_2fmap_2fproto_2fmap_5flane_2eproto.base);
  return *internal_default_instance();
}


void Lane::Clear() {
// @@protoc_insertion_point(message_clear_start:civ.hdmap.Lane)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  overlap_id_.Clear();
  predecessor_id_.Clear();
  successor_id_.Clear();
  left_neighbor_forward_lane_id_.Clear();
  right_neighbor_forward_lane_id_.Clear();
  left_neighbor_reverse_lane_id_.Clear();
  right_neighbor_reverse_lane_id_.Clear();
  left_sample_.Clear();
  right_sample_.Clear();
  left_road_sample_.Clear();
  right_road_sample_.Clear();
  self_reverse_lane_id_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(id_ != nullptr);
      id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(central_curve_ != nullptr);
      central_curve_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(left_boundary_ != nullptr);
      left_boundary_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(right_boundary_ != nullptr);
      right_boundary_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(junction_id_ != nullptr);
      junction_id_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(section_id_ != nullptr);
      section_id_->Clear();
    }
  }
  if (cached_has_bits & 0x000000c0u) {
    ::memset(&length_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&speed_limit_) -
        reinterpret_cast<char*>(&length_)) + sizeof(speed_limit_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&min_speed_limit_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_vehicle_on_) -
        reinterpret_cast<char*>(&min_speed_limit_)) + sizeof(is_vehicle_on_));
    direction_ = 1;
    type_ = 1;
  }
  turn_ = 1;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Lane::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .civ.hdmap.Id id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .civ.hdmap.Curve central_curve = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_central_curve(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .civ.hdmap.LaneBoundary left_boundary = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_left_boundary(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .civ.hdmap.LaneBoundary right_boundary = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_right_boundary(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double length = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_length(&has_bits);
          length_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double speed_limit = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _Internal::set_has_speed_limit(&has_bits);
          speed_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated .civ.hdmap.Id overlap_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_overlap_id(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .civ.hdmap.Id predecessor_id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_predecessor_id(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .civ.hdmap.Id successor_id = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_successor_id(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .civ.hdmap.Id left_neighbor_forward_lane_id = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_left_neighbor_forward_lane_id(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .civ.hdmap.Id right_neighbor_forward_lane_id = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_right_neighbor_forward_lane_id(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .civ.hdmap.Lane.LaneType type = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::civ::hdmap::Lane_LaneType_IsValid(val))) {
            _internal_set_type(static_cast<::civ::hdmap::Lane_LaneType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(12, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .civ.hdmap.Lane.LaneTurn turn = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::civ::hdmap::Lane_LaneTurn_IsValid(val))) {
            _internal_set_turn(static_cast<::civ::hdmap::Lane_LaneTurn>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(13, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // repeated .civ.hdmap.Id left_neighbor_reverse_lane_id = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_left_neighbor_reverse_lane_id(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<114>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .civ.hdmap.Id right_neighbor_reverse_lane_id = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_right_neighbor_reverse_lane_id(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<122>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .civ.hdmap.Id junction_id = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_junction_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .civ.hdmap.LaneSampleAssociation left_sample = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_left_sample(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<138>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .civ.hdmap.LaneSampleAssociation right_sample = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_right_sample(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<146>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .civ.hdmap.Lane.LaneDirection direction = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::civ::hdmap::Lane_LaneDirection_IsValid(val))) {
            _internal_set_direction(static_cast<::civ::hdmap::Lane_LaneDirection>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(19, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // repeated .civ.hdmap.LaneSampleAssociation left_road_sample = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_left_road_sample(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<162>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .civ.hdmap.LaneSampleAssociation right_road_sample = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_right_road_sample(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<170>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .civ.hdmap.Id self_reverse_lane_id = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_self_reverse_lane_id(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<178>(ptr));
        } else goto handle_unusual;
        continue;
      // optional double min_speed_limit = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 185)) {
          _Internal::set_has_min_speed_limit(&has_bits);
          min_speed_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional bool is_illegal_lane = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          _Internal::set_has_is_illegal_lane(&has_bits);
          is_illegal_lane_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_side_road = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          _Internal::set_has_is_side_road(&has_bits);
          is_side_road_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_connecting_lane = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          _Internal::set_has_is_connecting_lane(&has_bits);
          is_connecting_lane_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_passable_lane = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          _Internal::set_has_is_passable_lane(&has_bits);
          is_passable_lane_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .civ.hdmap.Id section_id = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          ptr = ctx->ParseMessage(_internal_mutable_section_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_vehicle_on = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 232)) {
          _Internal::set_has_is_vehicle_on(&has_bits);
          is_vehicle_on_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Lane::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:civ.hdmap.Lane)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .civ.hdmap.Id id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::id(this), target, stream);
  }

  // optional .civ.hdmap.Curve central_curve = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::central_curve(this), target, stream);
  }

  // optional .civ.hdmap.LaneBoundary left_boundary = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::left_boundary(this), target, stream);
  }

  // optional .civ.hdmap.LaneBoundary right_boundary = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::right_boundary(this), target, stream);
  }

  // optional double length = 5;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_length(), target);
  }

  // optional double speed_limit = 6;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_speed_limit(), target);
  }

  // repeated .civ.hdmap.Id overlap_id = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_overlap_id_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_overlap_id(i), target, stream);
  }

  // repeated .civ.hdmap.Id predecessor_id = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_predecessor_id_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_predecessor_id(i), target, stream);
  }

  // repeated .civ.hdmap.Id successor_id = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_successor_id_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, this->_internal_successor_id(i), target, stream);
  }

  // repeated .civ.hdmap.Id left_neighbor_forward_lane_id = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_left_neighbor_forward_lane_id_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, this->_internal_left_neighbor_forward_lane_id(i), target, stream);
  }

  // repeated .civ.hdmap.Id right_neighbor_forward_lane_id = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_right_neighbor_forward_lane_id_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, this->_internal_right_neighbor_forward_lane_id(i), target, stream);
  }

  // optional .civ.hdmap.Lane.LaneType type = 12;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      12, this->_internal_type(), target);
  }

  // optional .civ.hdmap.Lane.LaneTurn turn = 13;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      13, this->_internal_turn(), target);
  }

  // repeated .civ.hdmap.Id left_neighbor_reverse_lane_id = 14;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_left_neighbor_reverse_lane_id_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, this->_internal_left_neighbor_reverse_lane_id(i), target, stream);
  }

  // repeated .civ.hdmap.Id right_neighbor_reverse_lane_id = 15;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_right_neighbor_reverse_lane_id_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, this->_internal_right_neighbor_reverse_lane_id(i), target, stream);
  }

  // optional .civ.hdmap.Id junction_id = 16;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        16, _Internal::junction_id(this), target, stream);
  }

  // repeated .civ.hdmap.LaneSampleAssociation left_sample = 17;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_left_sample_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(17, this->_internal_left_sample(i), target, stream);
  }

  // repeated .civ.hdmap.LaneSampleAssociation right_sample = 18;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_right_sample_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(18, this->_internal_right_sample(i), target, stream);
  }

  // optional .civ.hdmap.Lane.LaneDirection direction = 19;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      19, this->_internal_direction(), target);
  }

  // repeated .civ.hdmap.LaneSampleAssociation left_road_sample = 20;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_left_road_sample_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(20, this->_internal_left_road_sample(i), target, stream);
  }

  // repeated .civ.hdmap.LaneSampleAssociation right_road_sample = 21;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_right_road_sample_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(21, this->_internal_right_road_sample(i), target, stream);
  }

  // repeated .civ.hdmap.Id self_reverse_lane_id = 22;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_self_reverse_lane_id_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(22, this->_internal_self_reverse_lane_id(i), target, stream);
  }

  // optional double min_speed_limit = 23;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(23, this->_internal_min_speed_limit(), target);
  }

  // optional bool is_illegal_lane = 24;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(24, this->_internal_is_illegal_lane(), target);
  }

  // optional bool is_side_road = 25;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(25, this->_internal_is_side_road(), target);
  }

  // optional bool is_connecting_lane = 26;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(26, this->_internal_is_connecting_lane(), target);
  }

  // optional bool is_passable_lane = 27;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(27, this->_internal_is_passable_lane(), target);
  }

  // optional .civ.hdmap.Id section_id = 28;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        28, _Internal::section_id(this), target, stream);
  }

  // optional bool is_vehicle_on = 29;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(29, this->_internal_is_vehicle_on(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:civ.hdmap.Lane)
  return target;
}

size_t Lane::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:civ.hdmap.Lane)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .civ.hdmap.Id overlap_id = 7;
  total_size += 1UL * this->_internal_overlap_id_size();
  for (const auto& msg : this->overlap_id_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .civ.hdmap.Id predecessor_id = 8;
  total_size += 1UL * this->_internal_predecessor_id_size();
  for (const auto& msg : this->predecessor_id_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .civ.hdmap.Id successor_id = 9;
  total_size += 1UL * this->_internal_successor_id_size();
  for (const auto& msg : this->successor_id_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .civ.hdmap.Id left_neighbor_forward_lane_id = 10;
  total_size += 1UL * this->_internal_left_neighbor_forward_lane_id_size();
  for (const auto& msg : this->left_neighbor_forward_lane_id_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .civ.hdmap.Id right_neighbor_forward_lane_id = 11;
  total_size += 1UL * this->_internal_right_neighbor_forward_lane_id_size();
  for (const auto& msg : this->right_neighbor_forward_lane_id_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .civ.hdmap.Id left_neighbor_reverse_lane_id = 14;
  total_size += 1UL * this->_internal_left_neighbor_reverse_lane_id_size();
  for (const auto& msg : this->left_neighbor_reverse_lane_id_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .civ.hdmap.Id right_neighbor_reverse_lane_id = 15;
  total_size += 1UL * this->_internal_right_neighbor_reverse_lane_id_size();
  for (const auto& msg : this->right_neighbor_reverse_lane_id_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .civ.hdmap.LaneSampleAssociation left_sample = 17;
  total_size += 2UL * this->_internal_left_sample_size();
  for (const auto& msg : this->left_sample_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .civ.hdmap.LaneSampleAssociation right_sample = 18;
  total_size += 2UL * this->_internal_right_sample_size();
  for (const auto& msg : this->right_sample_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .civ.hdmap.LaneSampleAssociation left_road_sample = 20;
  total_size += 2UL * this->_internal_left_road_sample_size();
  for (const auto& msg : this->left_road_sample_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .civ.hdmap.LaneSampleAssociation right_road_sample = 21;
  total_size += 2UL * this->_internal_right_road_sample_size();
  for (const auto& msg : this->right_road_sample_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .civ.hdmap.Id self_reverse_lane_id = 22;
  total_size += 2UL * this->_internal_self_reverse_lane_id_size();
  for (const auto& msg : this->self_reverse_lane_id_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .civ.hdmap.Id id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *id_);
    }

    // optional .civ.hdmap.Curve central_curve = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *central_curve_);
    }

    // optional .civ.hdmap.LaneBoundary left_boundary = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *left_boundary_);
    }

    // optional .civ.hdmap.LaneBoundary right_boundary = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *right_boundary_);
    }

    // optional .civ.hdmap.Id junction_id = 16;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *junction_id_);
    }

    // optional .civ.hdmap.Id section_id = 28;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *section_id_);
    }

    // optional double length = 5;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

    // optional double speed_limit = 6;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 8;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional double min_speed_limit = 23;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 + 8;
    }

    // optional bool is_illegal_lane = 24;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 + 1;
    }

    // optional bool is_side_road = 25;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 + 1;
    }

    // optional bool is_connecting_lane = 26;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 + 1;
    }

    // optional bool is_passable_lane = 27;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 + 1;
    }

    // optional bool is_vehicle_on = 29;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 + 1;
    }

    // optional .civ.hdmap.Lane.LaneDirection direction = 19;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_direction());
    }

    // optional .civ.hdmap.Lane.LaneType type = 12;
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
    }

  }
  // optional .civ.hdmap.Lane.LaneTurn turn = 13;
  if (cached_has_bits & 0x00010000u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_turn());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Lane::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:civ.hdmap.Lane)
  GOOGLE_DCHECK_NE(&from, this);
  const Lane* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Lane>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:civ.hdmap.Lane)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:civ.hdmap.Lane)
    MergeFrom(*source);
  }
}

void Lane::MergeFrom(const Lane& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:civ.hdmap.Lane)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  overlap_id_.MergeFrom(from.overlap_id_);
  predecessor_id_.MergeFrom(from.predecessor_id_);
  successor_id_.MergeFrom(from.successor_id_);
  left_neighbor_forward_lane_id_.MergeFrom(from.left_neighbor_forward_lane_id_);
  right_neighbor_forward_lane_id_.MergeFrom(from.right_neighbor_forward_lane_id_);
  left_neighbor_reverse_lane_id_.MergeFrom(from.left_neighbor_reverse_lane_id_);
  right_neighbor_reverse_lane_id_.MergeFrom(from.right_neighbor_reverse_lane_id_);
  left_sample_.MergeFrom(from.left_sample_);
  right_sample_.MergeFrom(from.right_sample_);
  left_road_sample_.MergeFrom(from.left_road_sample_);
  right_road_sample_.MergeFrom(from.right_road_sample_);
  self_reverse_lane_id_.MergeFrom(from.self_reverse_lane_id_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_id()->::civ::hdmap::Id::MergeFrom(from._internal_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_central_curve()->::civ::hdmap::Curve::MergeFrom(from._internal_central_curve());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_left_boundary()->::civ::hdmap::LaneBoundary::MergeFrom(from._internal_left_boundary());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_right_boundary()->::civ::hdmap::LaneBoundary::MergeFrom(from._internal_right_boundary());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_junction_id()->::civ::hdmap::Id::MergeFrom(from._internal_junction_id());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_section_id()->::civ::hdmap::Id::MergeFrom(from._internal_section_id());
    }
    if (cached_has_bits & 0x00000040u) {
      length_ = from.length_;
    }
    if (cached_has_bits & 0x00000080u) {
      speed_limit_ = from.speed_limit_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      min_speed_limit_ = from.min_speed_limit_;
    }
    if (cached_has_bits & 0x00000200u) {
      is_illegal_lane_ = from.is_illegal_lane_;
    }
    if (cached_has_bits & 0x00000400u) {
      is_side_road_ = from.is_side_road_;
    }
    if (cached_has_bits & 0x00000800u) {
      is_connecting_lane_ = from.is_connecting_lane_;
    }
    if (cached_has_bits & 0x00001000u) {
      is_passable_lane_ = from.is_passable_lane_;
    }
    if (cached_has_bits & 0x00002000u) {
      is_vehicle_on_ = from.is_vehicle_on_;
    }
    if (cached_has_bits & 0x00004000u) {
      direction_ = from.direction_;
    }
    if (cached_has_bits & 0x00008000u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00010000u) {
    _internal_set_turn(from._internal_turn());
  }
}

void Lane::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:civ.hdmap.Lane)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Lane::CopyFrom(const Lane& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:civ.hdmap.Lane)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Lane::IsInitialized() const {
  return true;
}

void Lane::InternalSwap(Lane* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  overlap_id_.InternalSwap(&other->overlap_id_);
  predecessor_id_.InternalSwap(&other->predecessor_id_);
  successor_id_.InternalSwap(&other->successor_id_);
  left_neighbor_forward_lane_id_.InternalSwap(&other->left_neighbor_forward_lane_id_);
  right_neighbor_forward_lane_id_.InternalSwap(&other->right_neighbor_forward_lane_id_);
  left_neighbor_reverse_lane_id_.InternalSwap(&other->left_neighbor_reverse_lane_id_);
  right_neighbor_reverse_lane_id_.InternalSwap(&other->right_neighbor_reverse_lane_id_);
  left_sample_.InternalSwap(&other->left_sample_);
  right_sample_.InternalSwap(&other->right_sample_);
  left_road_sample_.InternalSwap(&other->left_road_sample_);
  right_road_sample_.InternalSwap(&other->right_road_sample_);
  self_reverse_lane_id_.InternalSwap(&other->self_reverse_lane_id_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Lane, is_vehicle_on_)
      + sizeof(Lane::is_vehicle_on_)
      - PROTOBUF_FIELD_OFFSET(Lane, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
  swap(direction_, other->direction_);
  swap(type_, other->type_);
  swap(turn_, other->turn_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Lane::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace hdmap
}  // namespace civ
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::civ::hdmap::LaneBoundaryType* Arena::CreateMaybeMessage< ::civ::hdmap::LaneBoundaryType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::civ::hdmap::LaneBoundaryType >(arena);
}
template<> PROTOBUF_NOINLINE ::civ::hdmap::LaneBoundary* Arena::CreateMaybeMessage< ::civ::hdmap::LaneBoundary >(Arena* arena) {
  return Arena::CreateMessageInternal< ::civ::hdmap::LaneBoundary >(arena);
}
template<> PROTOBUF_NOINLINE ::civ::hdmap::LaneSampleAssociation* Arena::CreateMaybeMessage< ::civ::hdmap::LaneSampleAssociation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::civ::hdmap::LaneSampleAssociation >(arena);
}
template<> PROTOBUF_NOINLINE ::civ::hdmap::Lane* Arena::CreateMaybeMessage< ::civ::hdmap::Lane >(Arena* arena) {
  return Arena::CreateMessageInternal< ::civ::hdmap::Lane >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
