// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message/map/proto/map_speed_control.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_message_2fmap_2fproto_2fmap_5fspeed_5fcontrol_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_message_2fmap_2fproto_2fmap_5fspeed_5fcontrol_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "message/map/proto/map_geometry.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_message_2fmap_2fproto_2fmap_5fspeed_5fcontrol_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_message_2fmap_2fproto_2fmap_5fspeed_5fcontrol_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_message_2fmap_2fproto_2fmap_5fspeed_5fcontrol_2eproto;
namespace civ {
namespace hdmap {
class SpeedControl;
class SpeedControlDefaultTypeInternal;
extern SpeedControlDefaultTypeInternal _SpeedControl_default_instance_;
class SpeedControls;
class SpeedControlsDefaultTypeInternal;
extern SpeedControlsDefaultTypeInternal _SpeedControls_default_instance_;
}  // namespace hdmap
}  // namespace civ
PROTOBUF_NAMESPACE_OPEN
template<> ::civ::hdmap::SpeedControl* Arena::CreateMaybeMessage<::civ::hdmap::SpeedControl>(Arena*);
template<> ::civ::hdmap::SpeedControls* Arena::CreateMaybeMessage<::civ::hdmap::SpeedControls>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace civ {
namespace hdmap {

// ===================================================================

class SpeedControl PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:civ.hdmap.SpeedControl) */ {
 public:
  inline SpeedControl() : SpeedControl(nullptr) {}
  virtual ~SpeedControl();

  SpeedControl(const SpeedControl& from);
  SpeedControl(SpeedControl&& from) noexcept
    : SpeedControl() {
    *this = ::std::move(from);
  }

  inline SpeedControl& operator=(const SpeedControl& from) {
    CopyFrom(from);
    return *this;
  }
  inline SpeedControl& operator=(SpeedControl&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SpeedControl& default_instance();

  static inline const SpeedControl* internal_default_instance() {
    return reinterpret_cast<const SpeedControl*>(
               &_SpeedControl_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SpeedControl& a, SpeedControl& b) {
    a.Swap(&b);
  }
  inline void Swap(SpeedControl* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SpeedControl* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SpeedControl* New() const final {
    return CreateMaybeMessage<SpeedControl>(nullptr);
  }

  SpeedControl* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SpeedControl>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SpeedControl& from);
  void MergeFrom(const SpeedControl& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SpeedControl* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "civ.hdmap.SpeedControl";
  }
  protected:
  explicit SpeedControl(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_message_2fmap_2fproto_2fmap_5fspeed_5fcontrol_2eproto);
    return ::descriptor_table_message_2fmap_2fproto_2fmap_5fspeed_5fcontrol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kPolygonFieldNumber = 2,
    kSpeedLimitFieldNumber = 3,
  };
  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional .civ.hdmap.Polygon polygon = 2;
  bool has_polygon() const;
  private:
  bool _internal_has_polygon() const;
  public:
  void clear_polygon();
  const ::civ::hdmap::Polygon& polygon() const;
  ::civ::hdmap::Polygon* release_polygon();
  ::civ::hdmap::Polygon* mutable_polygon();
  void set_allocated_polygon(::civ::hdmap::Polygon* polygon);
  private:
  const ::civ::hdmap::Polygon& _internal_polygon() const;
  ::civ::hdmap::Polygon* _internal_mutable_polygon();
  public:
  void unsafe_arena_set_allocated_polygon(
      ::civ::hdmap::Polygon* polygon);
  ::civ::hdmap::Polygon* unsafe_arena_release_polygon();

  // optional double speed_limit = 3;
  bool has_speed_limit() const;
  private:
  bool _internal_has_speed_limit() const;
  public:
  void clear_speed_limit();
  double speed_limit() const;
  void set_speed_limit(double value);
  private:
  double _internal_speed_limit() const;
  void _internal_set_speed_limit(double value);
  public:

  // @@protoc_insertion_point(class_scope:civ.hdmap.SpeedControl)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::civ::hdmap::Polygon* polygon_;
  double speed_limit_;
  friend struct ::TableStruct_message_2fmap_2fproto_2fmap_5fspeed_5fcontrol_2eproto;
};
// -------------------------------------------------------------------

class SpeedControls PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:civ.hdmap.SpeedControls) */ {
 public:
  inline SpeedControls() : SpeedControls(nullptr) {}
  virtual ~SpeedControls();

  SpeedControls(const SpeedControls& from);
  SpeedControls(SpeedControls&& from) noexcept
    : SpeedControls() {
    *this = ::std::move(from);
  }

  inline SpeedControls& operator=(const SpeedControls& from) {
    CopyFrom(from);
    return *this;
  }
  inline SpeedControls& operator=(SpeedControls&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SpeedControls& default_instance();

  static inline const SpeedControls* internal_default_instance() {
    return reinterpret_cast<const SpeedControls*>(
               &_SpeedControls_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SpeedControls& a, SpeedControls& b) {
    a.Swap(&b);
  }
  inline void Swap(SpeedControls* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SpeedControls* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SpeedControls* New() const final {
    return CreateMaybeMessage<SpeedControls>(nullptr);
  }

  SpeedControls* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SpeedControls>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SpeedControls& from);
  void MergeFrom(const SpeedControls& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SpeedControls* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "civ.hdmap.SpeedControls";
  }
  protected:
  explicit SpeedControls(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_message_2fmap_2fproto_2fmap_5fspeed_5fcontrol_2eproto);
    return ::descriptor_table_message_2fmap_2fproto_2fmap_5fspeed_5fcontrol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSpeedControlFieldNumber = 1,
  };
  // repeated .civ.hdmap.SpeedControl speed_control = 1;
  int speed_control_size() const;
  private:
  int _internal_speed_control_size() const;
  public:
  void clear_speed_control();
  ::civ::hdmap::SpeedControl* mutable_speed_control(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::civ::hdmap::SpeedControl >*
      mutable_speed_control();
  private:
  const ::civ::hdmap::SpeedControl& _internal_speed_control(int index) const;
  ::civ::hdmap::SpeedControl* _internal_add_speed_control();
  public:
  const ::civ::hdmap::SpeedControl& speed_control(int index) const;
  ::civ::hdmap::SpeedControl* add_speed_control();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::civ::hdmap::SpeedControl >&
      speed_control() const;

  // @@protoc_insertion_point(class_scope:civ.hdmap.SpeedControls)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::civ::hdmap::SpeedControl > speed_control_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2fmap_2fproto_2fmap_5fspeed_5fcontrol_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SpeedControl

// optional string name = 1;
inline bool SpeedControl::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SpeedControl::has_name() const {
  return _internal_has_name();
}
inline void SpeedControl::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SpeedControl::name() const {
  // @@protoc_insertion_point(field_get:civ.hdmap.SpeedControl.name)
  return _internal_name();
}
inline void SpeedControl::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:civ.hdmap.SpeedControl.name)
}
inline std::string* SpeedControl::mutable_name() {
  // @@protoc_insertion_point(field_mutable:civ.hdmap.SpeedControl.name)
  return _internal_mutable_name();
}
inline const std::string& SpeedControl::_internal_name() const {
  return name_.Get();
}
inline void SpeedControl::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SpeedControl::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:civ.hdmap.SpeedControl.name)
}
inline void SpeedControl::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:civ.hdmap.SpeedControl.name)
}
inline void SpeedControl::set_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:civ.hdmap.SpeedControl.name)
}
inline std::string* SpeedControl::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SpeedControl::release_name() {
  // @@protoc_insertion_point(field_release:civ.hdmap.SpeedControl.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SpeedControl::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:civ.hdmap.SpeedControl.name)
}

// optional .civ.hdmap.Polygon polygon = 2;
inline bool SpeedControl::_internal_has_polygon() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || polygon_ != nullptr);
  return value;
}
inline bool SpeedControl::has_polygon() const {
  return _internal_has_polygon();
}
inline const ::civ::hdmap::Polygon& SpeedControl::_internal_polygon() const {
  const ::civ::hdmap::Polygon* p = polygon_;
  return p != nullptr ? *p : reinterpret_cast<const ::civ::hdmap::Polygon&>(
      ::civ::hdmap::_Polygon_default_instance_);
}
inline const ::civ::hdmap::Polygon& SpeedControl::polygon() const {
  // @@protoc_insertion_point(field_get:civ.hdmap.SpeedControl.polygon)
  return _internal_polygon();
}
inline void SpeedControl::unsafe_arena_set_allocated_polygon(
    ::civ::hdmap::Polygon* polygon) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(polygon_);
  }
  polygon_ = polygon;
  if (polygon) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:civ.hdmap.SpeedControl.polygon)
}
inline ::civ::hdmap::Polygon* SpeedControl::release_polygon() {
  _has_bits_[0] &= ~0x00000002u;
  ::civ::hdmap::Polygon* temp = polygon_;
  polygon_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::civ::hdmap::Polygon* SpeedControl::unsafe_arena_release_polygon() {
  // @@protoc_insertion_point(field_release:civ.hdmap.SpeedControl.polygon)
  _has_bits_[0] &= ~0x00000002u;
  ::civ::hdmap::Polygon* temp = polygon_;
  polygon_ = nullptr;
  return temp;
}
inline ::civ::hdmap::Polygon* SpeedControl::_internal_mutable_polygon() {
  _has_bits_[0] |= 0x00000002u;
  if (polygon_ == nullptr) {
    auto* p = CreateMaybeMessage<::civ::hdmap::Polygon>(GetArena());
    polygon_ = p;
  }
  return polygon_;
}
inline ::civ::hdmap::Polygon* SpeedControl::mutable_polygon() {
  // @@protoc_insertion_point(field_mutable:civ.hdmap.SpeedControl.polygon)
  return _internal_mutable_polygon();
}
inline void SpeedControl::set_allocated_polygon(::civ::hdmap::Polygon* polygon) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(polygon_);
  }
  if (polygon) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(polygon)->GetArena();
    if (message_arena != submessage_arena) {
      polygon = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, polygon, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  polygon_ = polygon;
  // @@protoc_insertion_point(field_set_allocated:civ.hdmap.SpeedControl.polygon)
}

// optional double speed_limit = 3;
inline bool SpeedControl::_internal_has_speed_limit() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SpeedControl::has_speed_limit() const {
  return _internal_has_speed_limit();
}
inline void SpeedControl::clear_speed_limit() {
  speed_limit_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double SpeedControl::_internal_speed_limit() const {
  return speed_limit_;
}
inline double SpeedControl::speed_limit() const {
  // @@protoc_insertion_point(field_get:civ.hdmap.SpeedControl.speed_limit)
  return _internal_speed_limit();
}
inline void SpeedControl::_internal_set_speed_limit(double value) {
  _has_bits_[0] |= 0x00000004u;
  speed_limit_ = value;
}
inline void SpeedControl::set_speed_limit(double value) {
  _internal_set_speed_limit(value);
  // @@protoc_insertion_point(field_set:civ.hdmap.SpeedControl.speed_limit)
}

// -------------------------------------------------------------------

// SpeedControls

// repeated .civ.hdmap.SpeedControl speed_control = 1;
inline int SpeedControls::_internal_speed_control_size() const {
  return speed_control_.size();
}
inline int SpeedControls::speed_control_size() const {
  return _internal_speed_control_size();
}
inline void SpeedControls::clear_speed_control() {
  speed_control_.Clear();
}
inline ::civ::hdmap::SpeedControl* SpeedControls::mutable_speed_control(int index) {
  // @@protoc_insertion_point(field_mutable:civ.hdmap.SpeedControls.speed_control)
  return speed_control_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::civ::hdmap::SpeedControl >*
SpeedControls::mutable_speed_control() {
  // @@protoc_insertion_point(field_mutable_list:civ.hdmap.SpeedControls.speed_control)
  return &speed_control_;
}
inline const ::civ::hdmap::SpeedControl& SpeedControls::_internal_speed_control(int index) const {
  return speed_control_.Get(index);
}
inline const ::civ::hdmap::SpeedControl& SpeedControls::speed_control(int index) const {
  // @@protoc_insertion_point(field_get:civ.hdmap.SpeedControls.speed_control)
  return _internal_speed_control(index);
}
inline ::civ::hdmap::SpeedControl* SpeedControls::_internal_add_speed_control() {
  return speed_control_.Add();
}
inline ::civ::hdmap::SpeedControl* SpeedControls::add_speed_control() {
  // @@protoc_insertion_point(field_add:civ.hdmap.SpeedControls.speed_control)
  return _internal_add_speed_control();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::civ::hdmap::SpeedControl >&
SpeedControls::speed_control() const {
  // @@protoc_insertion_point(field_list:civ.hdmap.SpeedControls.speed_control)
  return speed_control_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace hdmap
}  // namespace civ

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_message_2fmap_2fproto_2fmap_5fspeed_5fcontrol_2eproto
