// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message/map/proto/map_speed_control.proto

#include "message/map/proto/map_speed_control.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_message_2fmap_2fproto_2fmap_5fgeometry_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Polygon_message_2fmap_2fproto_2fmap_5fgeometry_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_message_2fmap_2fproto_2fmap_5fspeed_5fcontrol_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SpeedControl_message_2fmap_2fproto_2fmap_5fspeed_5fcontrol_2eproto;
namespace civ {
namespace hdmap {
class SpeedControlDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SpeedControl> _instance;
} _SpeedControl_default_instance_;
class SpeedControlsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SpeedControls> _instance;
} _SpeedControls_default_instance_;
}  // namespace hdmap
}  // namespace civ
static void InitDefaultsscc_info_SpeedControl_message_2fmap_2fproto_2fmap_5fspeed_5fcontrol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::civ::hdmap::_SpeedControl_default_instance_;
    new (ptr) ::civ::hdmap::SpeedControl();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SpeedControl_message_2fmap_2fproto_2fmap_5fspeed_5fcontrol_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SpeedControl_message_2fmap_2fproto_2fmap_5fspeed_5fcontrol_2eproto}, {
      &scc_info_Polygon_message_2fmap_2fproto_2fmap_5fgeometry_2eproto.base,}};

static void InitDefaultsscc_info_SpeedControls_message_2fmap_2fproto_2fmap_5fspeed_5fcontrol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::civ::hdmap::_SpeedControls_default_instance_;
    new (ptr) ::civ::hdmap::SpeedControls();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SpeedControls_message_2fmap_2fproto_2fmap_5fspeed_5fcontrol_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SpeedControls_message_2fmap_2fproto_2fmap_5fspeed_5fcontrol_2eproto}, {
      &scc_info_SpeedControl_message_2fmap_2fproto_2fmap_5fspeed_5fcontrol_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_message_2fmap_2fproto_2fmap_5fspeed_5fcontrol_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_message_2fmap_2fproto_2fmap_5fspeed_5fcontrol_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_message_2fmap_2fproto_2fmap_5fspeed_5fcontrol_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_message_2fmap_2fproto_2fmap_5fspeed_5fcontrol_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::civ::hdmap::SpeedControl, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::civ::hdmap::SpeedControl, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::civ::hdmap::SpeedControl, name_),
  PROTOBUF_FIELD_OFFSET(::civ::hdmap::SpeedControl, polygon_),
  PROTOBUF_FIELD_OFFSET(::civ::hdmap::SpeedControl, speed_limit_),
  0,
  1,
  2,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::civ::hdmap::SpeedControls, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::civ::hdmap::SpeedControls, speed_control_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(::civ::hdmap::SpeedControl)},
  { 11, -1, sizeof(::civ::hdmap::SpeedControls)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::civ::hdmap::_SpeedControl_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::civ::hdmap::_SpeedControls_default_instance_),
};

const char descriptor_table_protodef_message_2fmap_2fproto_2fmap_5fspeed_5fcontrol_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n)message/map/proto/map_speed_control.pr"
  "oto\022\tciv.hdmap\032$message/map/proto/map_ge"
  "ometry.proto\"V\n\014SpeedControl\022\014\n\004name\030\001 \001"
  "(\t\022#\n\007polygon\030\002 \001(\0132\022.civ.hdmap.Polygon\022"
  "\023\n\013speed_limit\030\003 \001(\001\"\?\n\rSpeedControls\022.\n"
  "\rspeed_control\030\001 \003(\0132\027.civ.hdmap.SpeedCo"
  "ntrol"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_message_2fmap_2fproto_2fmap_5fspeed_5fcontrol_2eproto_deps[1] = {
  &::descriptor_table_message_2fmap_2fproto_2fmap_5fgeometry_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_message_2fmap_2fproto_2fmap_5fspeed_5fcontrol_2eproto_sccs[2] = {
  &scc_info_SpeedControl_message_2fmap_2fproto_2fmap_5fspeed_5fcontrol_2eproto.base,
  &scc_info_SpeedControls_message_2fmap_2fproto_2fmap_5fspeed_5fcontrol_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_message_2fmap_2fproto_2fmap_5fspeed_5fcontrol_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_message_2fmap_2fproto_2fmap_5fspeed_5fcontrol_2eproto = {
  false, false, descriptor_table_protodef_message_2fmap_2fproto_2fmap_5fspeed_5fcontrol_2eproto, "message/map/proto/map_speed_control.proto", 245,
  &descriptor_table_message_2fmap_2fproto_2fmap_5fspeed_5fcontrol_2eproto_once, descriptor_table_message_2fmap_2fproto_2fmap_5fspeed_5fcontrol_2eproto_sccs, descriptor_table_message_2fmap_2fproto_2fmap_5fspeed_5fcontrol_2eproto_deps, 2, 1,
  schemas, file_default_instances, TableStruct_message_2fmap_2fproto_2fmap_5fspeed_5fcontrol_2eproto::offsets,
  file_level_metadata_message_2fmap_2fproto_2fmap_5fspeed_5fcontrol_2eproto, 2, file_level_enum_descriptors_message_2fmap_2fproto_2fmap_5fspeed_5fcontrol_2eproto, file_level_service_descriptors_message_2fmap_2fproto_2fmap_5fspeed_5fcontrol_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_message_2fmap_2fproto_2fmap_5fspeed_5fcontrol_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_message_2fmap_2fproto_2fmap_5fspeed_5fcontrol_2eproto)), true);
namespace civ {
namespace hdmap {

// ===================================================================

class SpeedControl::_Internal {
 public:
  using HasBits = decltype(std::declval<SpeedControl>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::civ::hdmap::Polygon& polygon(const SpeedControl* msg);
  static void set_has_polygon(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_speed_limit(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::civ::hdmap::Polygon&
SpeedControl::_Internal::polygon(const SpeedControl* msg) {
  return *msg->polygon_;
}
void SpeedControl::clear_polygon() {
  if (polygon_ != nullptr) polygon_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
SpeedControl::SpeedControl(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:civ.hdmap.SpeedControl)
}
SpeedControl::SpeedControl(const SpeedControl& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  if (from._internal_has_polygon()) {
    polygon_ = new ::civ::hdmap::Polygon(*from.polygon_);
  } else {
    polygon_ = nullptr;
  }
  speed_limit_ = from.speed_limit_;
  // @@protoc_insertion_point(copy_constructor:civ.hdmap.SpeedControl)
}

void SpeedControl::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SpeedControl_message_2fmap_2fproto_2fmap_5fspeed_5fcontrol_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&polygon_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&speed_limit_) -
      reinterpret_cast<char*>(&polygon_)) + sizeof(speed_limit_));
}

SpeedControl::~SpeedControl() {
  // @@protoc_insertion_point(destructor:civ.hdmap.SpeedControl)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SpeedControl::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete polygon_;
}

void SpeedControl::ArenaDtor(void* object) {
  SpeedControl* _this = reinterpret_cast< SpeedControl* >(object);
  (void)_this;
}
void SpeedControl::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SpeedControl::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SpeedControl& SpeedControl::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SpeedControl_message_2fmap_2fproto_2fmap_5fspeed_5fcontrol_2eproto.base);
  return *internal_default_instance();
}


void SpeedControl::Clear() {
// @@protoc_insertion_point(message_clear_start:civ.hdmap.SpeedControl)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(polygon_ != nullptr);
      polygon_->Clear();
    }
  }
  speed_limit_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SpeedControl::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "civ.hdmap.SpeedControl.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .civ.hdmap.Polygon polygon = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_polygon(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double speed_limit = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_speed_limit(&has_bits);
          speed_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SpeedControl::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:civ.hdmap.SpeedControl)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "civ.hdmap.SpeedControl.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional .civ.hdmap.Polygon polygon = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::polygon(this), target, stream);
  }

  // optional double speed_limit = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_speed_limit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:civ.hdmap.SpeedControl)
  return target;
}

size_t SpeedControl::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:civ.hdmap.SpeedControl)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional .civ.hdmap.Polygon polygon = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *polygon_);
    }

    // optional double speed_limit = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SpeedControl::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:civ.hdmap.SpeedControl)
  GOOGLE_DCHECK_NE(&from, this);
  const SpeedControl* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SpeedControl>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:civ.hdmap.SpeedControl)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:civ.hdmap.SpeedControl)
    MergeFrom(*source);
  }
}

void SpeedControl::MergeFrom(const SpeedControl& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:civ.hdmap.SpeedControl)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_polygon()->::civ::hdmap::Polygon::MergeFrom(from._internal_polygon());
    }
    if (cached_has_bits & 0x00000004u) {
      speed_limit_ = from.speed_limit_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SpeedControl::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:civ.hdmap.SpeedControl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpeedControl::CopyFrom(const SpeedControl& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:civ.hdmap.SpeedControl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpeedControl::IsInitialized() const {
  return true;
}

void SpeedControl::InternalSwap(SpeedControl* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SpeedControl, speed_limit_)
      + sizeof(SpeedControl::speed_limit_)
      - PROTOBUF_FIELD_OFFSET(SpeedControl, polygon_)>(
          reinterpret_cast<char*>(&polygon_),
          reinterpret_cast<char*>(&other->polygon_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SpeedControl::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SpeedControls::_Internal {
 public:
};

SpeedControls::SpeedControls(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  speed_control_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:civ.hdmap.SpeedControls)
}
SpeedControls::SpeedControls(const SpeedControls& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      speed_control_(from.speed_control_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:civ.hdmap.SpeedControls)
}

void SpeedControls::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SpeedControls_message_2fmap_2fproto_2fmap_5fspeed_5fcontrol_2eproto.base);
}

SpeedControls::~SpeedControls() {
  // @@protoc_insertion_point(destructor:civ.hdmap.SpeedControls)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SpeedControls::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SpeedControls::ArenaDtor(void* object) {
  SpeedControls* _this = reinterpret_cast< SpeedControls* >(object);
  (void)_this;
}
void SpeedControls::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SpeedControls::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SpeedControls& SpeedControls::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SpeedControls_message_2fmap_2fproto_2fmap_5fspeed_5fcontrol_2eproto.base);
  return *internal_default_instance();
}


void SpeedControls::Clear() {
// @@protoc_insertion_point(message_clear_start:civ.hdmap.SpeedControls)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  speed_control_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SpeedControls::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .civ.hdmap.SpeedControl speed_control = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_speed_control(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SpeedControls::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:civ.hdmap.SpeedControls)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .civ.hdmap.SpeedControl speed_control = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_speed_control_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_speed_control(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:civ.hdmap.SpeedControls)
  return target;
}

size_t SpeedControls::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:civ.hdmap.SpeedControls)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .civ.hdmap.SpeedControl speed_control = 1;
  total_size += 1UL * this->_internal_speed_control_size();
  for (const auto& msg : this->speed_control_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SpeedControls::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:civ.hdmap.SpeedControls)
  GOOGLE_DCHECK_NE(&from, this);
  const SpeedControls* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SpeedControls>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:civ.hdmap.SpeedControls)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:civ.hdmap.SpeedControls)
    MergeFrom(*source);
  }
}

void SpeedControls::MergeFrom(const SpeedControls& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:civ.hdmap.SpeedControls)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  speed_control_.MergeFrom(from.speed_control_);
}

void SpeedControls::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:civ.hdmap.SpeedControls)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpeedControls::CopyFrom(const SpeedControls& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:civ.hdmap.SpeedControls)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpeedControls::IsInitialized() const {
  return true;
}

void SpeedControls::InternalSwap(SpeedControls* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  speed_control_.InternalSwap(&other->speed_control_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SpeedControls::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace hdmap
}  // namespace civ
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::civ::hdmap::SpeedControl* Arena::CreateMaybeMessage< ::civ::hdmap::SpeedControl >(Arena* arena) {
  return Arena::CreateMessageInternal< ::civ::hdmap::SpeedControl >(arena);
}
template<> PROTOBUF_NOINLINE ::civ::hdmap::SpeedControls* Arena::CreateMaybeMessage< ::civ::hdmap::SpeedControls >(Arena* arena) {
  return Arena::CreateMessageInternal< ::civ::hdmap::SpeedControls >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
