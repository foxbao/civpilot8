// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message/map/proto/map_signal.proto

#include "message/map/proto/map_signal.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_message_2fcommon_2fproto_2fgeometry_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PointENU_message_2fcommon_2fproto_2fgeometry_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_message_2fmap_2fproto_2fmap_5fgeometry_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Curve_message_2fmap_2fproto_2fmap_5fgeometry_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_message_2fmap_2fproto_2fmap_5fid_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Id_message_2fmap_2fproto_2fmap_5fid_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_message_2fmap_2fproto_2fmap_5fgeometry_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Polygon_message_2fmap_2fproto_2fmap_5fgeometry_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_message_2fmap_2fproto_2fmap_5fsignal_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SignInfo_message_2fmap_2fproto_2fmap_5fsignal_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_message_2fmap_2fproto_2fmap_5fsignal_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Subsignal_message_2fmap_2fproto_2fmap_5fsignal_2eproto;
namespace civ {
namespace hdmap {
class SubsignalDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Subsignal> _instance;
} _Subsignal_default_instance_;
class SignInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SignInfo> _instance;
} _SignInfo_default_instance_;
class SignalDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Signal> _instance;
} _Signal_default_instance_;
}  // namespace hdmap
}  // namespace civ
static void InitDefaultsscc_info_SignInfo_message_2fmap_2fproto_2fmap_5fsignal_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::civ::hdmap::_SignInfo_default_instance_;
    new (ptr) ::civ::hdmap::SignInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SignInfo_message_2fmap_2fproto_2fmap_5fsignal_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SignInfo_message_2fmap_2fproto_2fmap_5fsignal_2eproto}, {}};

static void InitDefaultsscc_info_Signal_message_2fmap_2fproto_2fmap_5fsignal_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::civ::hdmap::_Signal_default_instance_;
    new (ptr) ::civ::hdmap::Signal();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_Signal_message_2fmap_2fproto_2fmap_5fsignal_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 5, 0, InitDefaultsscc_info_Signal_message_2fmap_2fproto_2fmap_5fsignal_2eproto}, {
      &scc_info_Id_message_2fmap_2fproto_2fmap_5fid_2eproto.base,
      &scc_info_Polygon_message_2fmap_2fproto_2fmap_5fgeometry_2eproto.base,
      &scc_info_Subsignal_message_2fmap_2fproto_2fmap_5fsignal_2eproto.base,
      &scc_info_Curve_message_2fmap_2fproto_2fmap_5fgeometry_2eproto.base,
      &scc_info_SignInfo_message_2fmap_2fproto_2fmap_5fsignal_2eproto.base,}};

static void InitDefaultsscc_info_Subsignal_message_2fmap_2fproto_2fmap_5fsignal_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::civ::hdmap::_Subsignal_default_instance_;
    new (ptr) ::civ::hdmap::Subsignal();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Subsignal_message_2fmap_2fproto_2fmap_5fsignal_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Subsignal_message_2fmap_2fproto_2fmap_5fsignal_2eproto}, {
      &scc_info_Id_message_2fmap_2fproto_2fmap_5fid_2eproto.base,
      &scc_info_PointENU_message_2fcommon_2fproto_2fgeometry_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_message_2fmap_2fproto_2fmap_5fsignal_2eproto[3];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_message_2fmap_2fproto_2fmap_5fsignal_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_message_2fmap_2fproto_2fmap_5fsignal_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_message_2fmap_2fproto_2fmap_5fsignal_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::civ::hdmap::Subsignal, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::civ::hdmap::Subsignal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::civ::hdmap::Subsignal, id_),
  PROTOBUF_FIELD_OFFSET(::civ::hdmap::Subsignal, type_),
  PROTOBUF_FIELD_OFFSET(::civ::hdmap::Subsignal, location_),
  0,
  2,
  1,
  PROTOBUF_FIELD_OFFSET(::civ::hdmap::SignInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::civ::hdmap::SignInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::civ::hdmap::SignInfo, type_),
  0,
  PROTOBUF_FIELD_OFFSET(::civ::hdmap::Signal, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::civ::hdmap::Signal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::civ::hdmap::Signal, id_),
  PROTOBUF_FIELD_OFFSET(::civ::hdmap::Signal, boundary_),
  PROTOBUF_FIELD_OFFSET(::civ::hdmap::Signal, subsignal_),
  PROTOBUF_FIELD_OFFSET(::civ::hdmap::Signal, overlap_id_),
  PROTOBUF_FIELD_OFFSET(::civ::hdmap::Signal, type_),
  PROTOBUF_FIELD_OFFSET(::civ::hdmap::Signal, stop_line_),
  PROTOBUF_FIELD_OFFSET(::civ::hdmap::Signal, sign_info_),
  0,
  1,
  ~0u,
  ~0u,
  2,
  ~0u,
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(::civ::hdmap::Subsignal)},
  { 11, 17, sizeof(::civ::hdmap::SignInfo)},
  { 18, 30, sizeof(::civ::hdmap::Signal)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::civ::hdmap::_Subsignal_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::civ::hdmap::_SignInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::civ::hdmap::_Signal_default_instance_),
};

const char descriptor_table_protodef_message_2fmap_2fproto_2fmap_5fsignal_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\"message/map/proto/map_signal.proto\022\tci"
  "v.hdmap\032#message/common/proto/geometry.p"
  "roto\032\036message/map/proto/map_id.proto\032$me"
  "ssage/map/proto/map_geometry.proto\"\230\002\n\tS"
  "ubsignal\022\031\n\002id\030\001 \001(\0132\r.civ.hdmap.Id\022\'\n\004t"
  "ype\030\002 \001(\0162\031.civ.hdmap.Subsignal.Type\022&\n\010"
  "location\030\003 \001(\0132\024.civ.common.PointENU\"\236\001\n"
  "\004Type\022\013\n\007UNKNOWN\020\001\022\n\n\006CIRCLE\020\002\022\016\n\nARROW_"
  "LEFT\020\003\022\021\n\rARROW_FORWARD\020\004\022\017\n\013ARROW_RIGHT"
  "\020\005\022\032\n\026ARROW_LEFT_AND_FORWARD\020\006\022\033\n\027ARROW_"
  "RIGHT_AND_FORWARD\020\007\022\020\n\014ARROW_U_TURN\020\010\"^\n"
  "\010SignInfo\022&\n\004type\030\001 \001(\0162\030.civ.hdmap.Sign"
  "Info.Type\"*\n\004Type\022\010\n\004None\020\000\022\030\n\024NO_RIGHT_"
  "TURN_ON_RED\020\001\"\375\002\n\006Signal\022\031\n\002id\030\001 \001(\0132\r.c"
  "iv.hdmap.Id\022$\n\010boundary\030\002 \001(\0132\022.civ.hdma"
  "p.Polygon\022\'\n\tsubsignal\030\003 \003(\0132\024.civ.hdmap"
  ".Subsignal\022!\n\noverlap_id\030\004 \003(\0132\r.civ.hdm"
  "ap.Id\022$\n\004type\030\005 \001(\0162\026.civ.hdmap.Signal.T"
  "ype\022#\n\tstop_line\030\006 \003(\0132\020.civ.hdmap.Curve"
  "\022&\n\tsign_info\030\007 \003(\0132\023.civ.hdmap.SignInfo"
  "\"s\n\004Type\022\013\n\007UNKNOWN\020\001\022\024\n\020MIX_2_HORIZONTA"
  "L\020\002\022\022\n\016MIX_2_VERTICAL\020\003\022\024\n\020MIX_3_HORIZON"
  "TAL\020\004\022\022\n\016MIX_3_VERTICAL\020\005\022\n\n\006SINGLE\020\006"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_message_2fmap_2fproto_2fmap_5fsignal_2eproto_deps[3] = {
  &::descriptor_table_message_2fcommon_2fproto_2fgeometry_2eproto,
  &::descriptor_table_message_2fmap_2fproto_2fmap_5fgeometry_2eproto,
  &::descriptor_table_message_2fmap_2fproto_2fmap_5fid_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_message_2fmap_2fproto_2fmap_5fsignal_2eproto_sccs[3] = {
  &scc_info_SignInfo_message_2fmap_2fproto_2fmap_5fsignal_2eproto.base,
  &scc_info_Signal_message_2fmap_2fproto_2fmap_5fsignal_2eproto.base,
  &scc_info_Subsignal_message_2fmap_2fproto_2fmap_5fsignal_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_message_2fmap_2fproto_2fmap_5fsignal_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_message_2fmap_2fproto_2fmap_5fsignal_2eproto = {
  false, false, descriptor_table_protodef_message_2fmap_2fproto_2fmap_5fsignal_2eproto, "message/map/proto/map_signal.proto", 917,
  &descriptor_table_message_2fmap_2fproto_2fmap_5fsignal_2eproto_once, descriptor_table_message_2fmap_2fproto_2fmap_5fsignal_2eproto_sccs, descriptor_table_message_2fmap_2fproto_2fmap_5fsignal_2eproto_deps, 3, 3,
  schemas, file_default_instances, TableStruct_message_2fmap_2fproto_2fmap_5fsignal_2eproto::offsets,
  file_level_metadata_message_2fmap_2fproto_2fmap_5fsignal_2eproto, 3, file_level_enum_descriptors_message_2fmap_2fproto_2fmap_5fsignal_2eproto, file_level_service_descriptors_message_2fmap_2fproto_2fmap_5fsignal_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_message_2fmap_2fproto_2fmap_5fsignal_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_message_2fmap_2fproto_2fmap_5fsignal_2eproto)), true);
namespace civ {
namespace hdmap {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Subsignal_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_message_2fmap_2fproto_2fmap_5fsignal_2eproto);
  return file_level_enum_descriptors_message_2fmap_2fproto_2fmap_5fsignal_2eproto[0];
}
bool Subsignal_Type_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Subsignal_Type Subsignal::UNKNOWN;
constexpr Subsignal_Type Subsignal::CIRCLE;
constexpr Subsignal_Type Subsignal::ARROW_LEFT;
constexpr Subsignal_Type Subsignal::ARROW_FORWARD;
constexpr Subsignal_Type Subsignal::ARROW_RIGHT;
constexpr Subsignal_Type Subsignal::ARROW_LEFT_AND_FORWARD;
constexpr Subsignal_Type Subsignal::ARROW_RIGHT_AND_FORWARD;
constexpr Subsignal_Type Subsignal::ARROW_U_TURN;
constexpr Subsignal_Type Subsignal::Type_MIN;
constexpr Subsignal_Type Subsignal::Type_MAX;
constexpr int Subsignal::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SignInfo_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_message_2fmap_2fproto_2fmap_5fsignal_2eproto);
  return file_level_enum_descriptors_message_2fmap_2fproto_2fmap_5fsignal_2eproto[1];
}
bool SignInfo_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr SignInfo_Type SignInfo::None;
constexpr SignInfo_Type SignInfo::NO_RIGHT_TURN_ON_RED;
constexpr SignInfo_Type SignInfo::Type_MIN;
constexpr SignInfo_Type SignInfo::Type_MAX;
constexpr int SignInfo::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Signal_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_message_2fmap_2fproto_2fmap_5fsignal_2eproto);
  return file_level_enum_descriptors_message_2fmap_2fproto_2fmap_5fsignal_2eproto[2];
}
bool Signal_Type_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Signal_Type Signal::UNKNOWN;
constexpr Signal_Type Signal::MIX_2_HORIZONTAL;
constexpr Signal_Type Signal::MIX_2_VERTICAL;
constexpr Signal_Type Signal::MIX_3_HORIZONTAL;
constexpr Signal_Type Signal::MIX_3_VERTICAL;
constexpr Signal_Type Signal::SINGLE;
constexpr Signal_Type Signal::Type_MIN;
constexpr Signal_Type Signal::Type_MAX;
constexpr int Signal::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

class Subsignal::_Internal {
 public:
  using HasBits = decltype(std::declval<Subsignal>()._has_bits_);
  static const ::civ::hdmap::Id& id(const Subsignal* msg);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::civ::common::PointENU& location(const Subsignal* msg);
  static void set_has_location(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::civ::hdmap::Id&
Subsignal::_Internal::id(const Subsignal* msg) {
  return *msg->id_;
}
const ::civ::common::PointENU&
Subsignal::_Internal::location(const Subsignal* msg) {
  return *msg->location_;
}
void Subsignal::clear_id() {
  if (id_ != nullptr) id_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void Subsignal::clear_location() {
  if (location_ != nullptr) location_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
Subsignal::Subsignal(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:civ.hdmap.Subsignal)
}
Subsignal::Subsignal(const Subsignal& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_id()) {
    id_ = new ::civ::hdmap::Id(*from.id_);
  } else {
    id_ = nullptr;
  }
  if (from._internal_has_location()) {
    location_ = new ::civ::common::PointENU(*from.location_);
  } else {
    location_ = nullptr;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:civ.hdmap.Subsignal)
}

void Subsignal::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Subsignal_message_2fmap_2fproto_2fmap_5fsignal_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&location_) -
      reinterpret_cast<char*>(&id_)) + sizeof(location_));
  type_ = 1;
}

Subsignal::~Subsignal() {
  // @@protoc_insertion_point(destructor:civ.hdmap.Subsignal)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Subsignal::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete id_;
  if (this != internal_default_instance()) delete location_;
}

void Subsignal::ArenaDtor(void* object) {
  Subsignal* _this = reinterpret_cast< Subsignal* >(object);
  (void)_this;
}
void Subsignal::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Subsignal::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Subsignal& Subsignal::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Subsignal_message_2fmap_2fproto_2fmap_5fsignal_2eproto.base);
  return *internal_default_instance();
}


void Subsignal::Clear() {
// @@protoc_insertion_point(message_clear_start:civ.hdmap.Subsignal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(id_ != nullptr);
      id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(location_ != nullptr);
      location_->Clear();
    }
    type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Subsignal::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .civ.hdmap.Id id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .civ.hdmap.Subsignal.Type type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::civ::hdmap::Subsignal_Type_IsValid(val))) {
            _internal_set_type(static_cast<::civ::hdmap::Subsignal_Type>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .civ.common.PointENU location = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_location(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Subsignal::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:civ.hdmap.Subsignal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .civ.hdmap.Id id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::id(this), target, stream);
  }

  // optional .civ.hdmap.Subsignal.Type type = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  // optional .civ.common.PointENU location = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::location(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:civ.hdmap.Subsignal)
  return target;
}

size_t Subsignal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:civ.hdmap.Subsignal)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .civ.hdmap.Id id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *id_);
    }

    // optional .civ.common.PointENU location = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *location_);
    }

    // optional .civ.hdmap.Subsignal.Type type = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Subsignal::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:civ.hdmap.Subsignal)
  GOOGLE_DCHECK_NE(&from, this);
  const Subsignal* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Subsignal>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:civ.hdmap.Subsignal)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:civ.hdmap.Subsignal)
    MergeFrom(*source);
  }
}

void Subsignal::MergeFrom(const Subsignal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:civ.hdmap.Subsignal)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_id()->::civ::hdmap::Id::MergeFrom(from._internal_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_location()->::civ::common::PointENU::MergeFrom(from._internal_location());
    }
    if (cached_has_bits & 0x00000004u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Subsignal::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:civ.hdmap.Subsignal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Subsignal::CopyFrom(const Subsignal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:civ.hdmap.Subsignal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Subsignal::IsInitialized() const {
  return true;
}

void Subsignal::InternalSwap(Subsignal* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Subsignal, location_)
      + sizeof(Subsignal::location_)
      - PROTOBUF_FIELD_OFFSET(Subsignal, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Subsignal::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SignInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<SignInfo>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SignInfo::SignInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:civ.hdmap.SignInfo)
}
SignInfo::SignInfo(const SignInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:civ.hdmap.SignInfo)
}

void SignInfo::SharedCtor() {
  type_ = 0;
}

SignInfo::~SignInfo() {
  // @@protoc_insertion_point(destructor:civ.hdmap.SignInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SignInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SignInfo::ArenaDtor(void* object) {
  SignInfo* _this = reinterpret_cast< SignInfo* >(object);
  (void)_this;
}
void SignInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SignInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SignInfo& SignInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SignInfo_message_2fmap_2fproto_2fmap_5fsignal_2eproto.base);
  return *internal_default_instance();
}


void SignInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:civ.hdmap.SignInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SignInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .civ.hdmap.SignInfo.Type type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::civ::hdmap::SignInfo_Type_IsValid(val))) {
            _internal_set_type(static_cast<::civ::hdmap::SignInfo_Type>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SignInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:civ.hdmap.SignInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .civ.hdmap.SignInfo.Type type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:civ.hdmap.SignInfo)
  return target;
}

size_t SignInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:civ.hdmap.SignInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .civ.hdmap.SignInfo.Type type = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SignInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:civ.hdmap.SignInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SignInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SignInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:civ.hdmap.SignInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:civ.hdmap.SignInfo)
    MergeFrom(*source);
  }
}

void SignInfo::MergeFrom(const SignInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:civ.hdmap.SignInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_type()) {
    _internal_set_type(from._internal_type());
  }
}

void SignInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:civ.hdmap.SignInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SignInfo::CopyFrom(const SignInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:civ.hdmap.SignInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignInfo::IsInitialized() const {
  return true;
}

void SignInfo::InternalSwap(SignInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SignInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Signal::_Internal {
 public:
  using HasBits = decltype(std::declval<Signal>()._has_bits_);
  static const ::civ::hdmap::Id& id(const Signal* msg);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::civ::hdmap::Polygon& boundary(const Signal* msg);
  static void set_has_boundary(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::civ::hdmap::Id&
Signal::_Internal::id(const Signal* msg) {
  return *msg->id_;
}
const ::civ::hdmap::Polygon&
Signal::_Internal::boundary(const Signal* msg) {
  return *msg->boundary_;
}
void Signal::clear_id() {
  if (id_ != nullptr) id_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void Signal::clear_boundary() {
  if (boundary_ != nullptr) boundary_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void Signal::clear_overlap_id() {
  overlap_id_.Clear();
}
void Signal::clear_stop_line() {
  stop_line_.Clear();
}
Signal::Signal(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  subsignal_(arena),
  overlap_id_(arena),
  stop_line_(arena),
  sign_info_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:civ.hdmap.Signal)
}
Signal::Signal(const Signal& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      subsignal_(from.subsignal_),
      overlap_id_(from.overlap_id_),
      stop_line_(from.stop_line_),
      sign_info_(from.sign_info_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_id()) {
    id_ = new ::civ::hdmap::Id(*from.id_);
  } else {
    id_ = nullptr;
  }
  if (from._internal_has_boundary()) {
    boundary_ = new ::civ::hdmap::Polygon(*from.boundary_);
  } else {
    boundary_ = nullptr;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:civ.hdmap.Signal)
}

void Signal::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Signal_message_2fmap_2fproto_2fmap_5fsignal_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&boundary_) -
      reinterpret_cast<char*>(&id_)) + sizeof(boundary_));
  type_ = 1;
}

Signal::~Signal() {
  // @@protoc_insertion_point(destructor:civ.hdmap.Signal)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Signal::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete id_;
  if (this != internal_default_instance()) delete boundary_;
}

void Signal::ArenaDtor(void* object) {
  Signal* _this = reinterpret_cast< Signal* >(object);
  (void)_this;
}
void Signal::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Signal::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Signal& Signal::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Signal_message_2fmap_2fproto_2fmap_5fsignal_2eproto.base);
  return *internal_default_instance();
}


void Signal::Clear() {
// @@protoc_insertion_point(message_clear_start:civ.hdmap.Signal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  subsignal_.Clear();
  overlap_id_.Clear();
  stop_line_.Clear();
  sign_info_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(id_ != nullptr);
      id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(boundary_ != nullptr);
      boundary_->Clear();
    }
    type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Signal::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .civ.hdmap.Id id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .civ.hdmap.Polygon boundary = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_boundary(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .civ.hdmap.Subsignal subsignal = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_subsignal(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .civ.hdmap.Id overlap_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_overlap_id(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .civ.hdmap.Signal.Type type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::civ::hdmap::Signal_Type_IsValid(val))) {
            _internal_set_type(static_cast<::civ::hdmap::Signal_Type>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // repeated .civ.hdmap.Curve stop_line = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_stop_line(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .civ.hdmap.SignInfo sign_info = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_sign_info(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Signal::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:civ.hdmap.Signal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .civ.hdmap.Id id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::id(this), target, stream);
  }

  // optional .civ.hdmap.Polygon boundary = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::boundary(this), target, stream);
  }

  // repeated .civ.hdmap.Subsignal subsignal = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_subsignal_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_subsignal(i), target, stream);
  }

  // repeated .civ.hdmap.Id overlap_id = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_overlap_id_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_overlap_id(i), target, stream);
  }

  // optional .civ.hdmap.Signal.Type type = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_type(), target);
  }

  // repeated .civ.hdmap.Curve stop_line = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_stop_line_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_stop_line(i), target, stream);
  }

  // repeated .civ.hdmap.SignInfo sign_info = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_sign_info_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_sign_info(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:civ.hdmap.Signal)
  return target;
}

size_t Signal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:civ.hdmap.Signal)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .civ.hdmap.Subsignal subsignal = 3;
  total_size += 1UL * this->_internal_subsignal_size();
  for (const auto& msg : this->subsignal_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .civ.hdmap.Id overlap_id = 4;
  total_size += 1UL * this->_internal_overlap_id_size();
  for (const auto& msg : this->overlap_id_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .civ.hdmap.Curve stop_line = 6;
  total_size += 1UL * this->_internal_stop_line_size();
  for (const auto& msg : this->stop_line_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .civ.hdmap.SignInfo sign_info = 7;
  total_size += 1UL * this->_internal_sign_info_size();
  for (const auto& msg : this->sign_info_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .civ.hdmap.Id id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *id_);
    }

    // optional .civ.hdmap.Polygon boundary = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *boundary_);
    }

    // optional .civ.hdmap.Signal.Type type = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Signal::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:civ.hdmap.Signal)
  GOOGLE_DCHECK_NE(&from, this);
  const Signal* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Signal>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:civ.hdmap.Signal)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:civ.hdmap.Signal)
    MergeFrom(*source);
  }
}

void Signal::MergeFrom(const Signal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:civ.hdmap.Signal)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  subsignal_.MergeFrom(from.subsignal_);
  overlap_id_.MergeFrom(from.overlap_id_);
  stop_line_.MergeFrom(from.stop_line_);
  sign_info_.MergeFrom(from.sign_info_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_id()->::civ::hdmap::Id::MergeFrom(from._internal_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_boundary()->::civ::hdmap::Polygon::MergeFrom(from._internal_boundary());
    }
    if (cached_has_bits & 0x00000004u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Signal::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:civ.hdmap.Signal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Signal::CopyFrom(const Signal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:civ.hdmap.Signal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Signal::IsInitialized() const {
  return true;
}

void Signal::InternalSwap(Signal* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  subsignal_.InternalSwap(&other->subsignal_);
  overlap_id_.InternalSwap(&other->overlap_id_);
  stop_line_.InternalSwap(&other->stop_line_);
  sign_info_.InternalSwap(&other->sign_info_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Signal, boundary_)
      + sizeof(Signal::boundary_)
      - PROTOBUF_FIELD_OFFSET(Signal, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Signal::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace hdmap
}  // namespace civ
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::civ::hdmap::Subsignal* Arena::CreateMaybeMessage< ::civ::hdmap::Subsignal >(Arena* arena) {
  return Arena::CreateMessageInternal< ::civ::hdmap::Subsignal >(arena);
}
template<> PROTOBUF_NOINLINE ::civ::hdmap::SignInfo* Arena::CreateMaybeMessage< ::civ::hdmap::SignInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::civ::hdmap::SignInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::civ::hdmap::Signal* Arena::CreateMaybeMessage< ::civ::hdmap::Signal >(Arena* arena) {
  return Arena::CreateMessageInternal< ::civ::hdmap::Signal >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
