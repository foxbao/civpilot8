// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message/map/relative_map/proto/navigation.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_message_2fmap_2frelative_5fmap_2fproto_2fnavigation_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_message_2fmap_2frelative_5fmap_2fproto_2fnavigation_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
#include "message/common/proto/header.pb.h"
#include "message/common/proto/pnc_point.pb.h"
#include "message/map/proto/map.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_message_2fmap_2frelative_5fmap_2fproto_2fnavigation_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_message_2fmap_2frelative_5fmap_2fproto_2fnavigation_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_message_2fmap_2frelative_5fmap_2fproto_2fnavigation_2eproto;
namespace civ {
namespace relative_map {
class MapMsg;
class MapMsgDefaultTypeInternal;
extern MapMsgDefaultTypeInternal _MapMsg_default_instance_;
class MapMsg_NavigationPathEntry_DoNotUse;
class MapMsg_NavigationPathEntry_DoNotUseDefaultTypeInternal;
extern MapMsg_NavigationPathEntry_DoNotUseDefaultTypeInternal _MapMsg_NavigationPathEntry_DoNotUse_default_instance_;
class NavigationInfo;
class NavigationInfoDefaultTypeInternal;
extern NavigationInfoDefaultTypeInternal _NavigationInfo_default_instance_;
class NavigationPath;
class NavigationPathDefaultTypeInternal;
extern NavigationPathDefaultTypeInternal _NavigationPath_default_instance_;
}  // namespace relative_map
}  // namespace civ
PROTOBUF_NAMESPACE_OPEN
template<> ::civ::relative_map::MapMsg* Arena::CreateMaybeMessage<::civ::relative_map::MapMsg>(Arena*);
template<> ::civ::relative_map::MapMsg_NavigationPathEntry_DoNotUse* Arena::CreateMaybeMessage<::civ::relative_map::MapMsg_NavigationPathEntry_DoNotUse>(Arena*);
template<> ::civ::relative_map::NavigationInfo* Arena::CreateMaybeMessage<::civ::relative_map::NavigationInfo>(Arena*);
template<> ::civ::relative_map::NavigationPath* Arena::CreateMaybeMessage<::civ::relative_map::NavigationPath>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace civ {
namespace relative_map {

// ===================================================================

class NavigationPath PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:civ.relative_map.NavigationPath) */ {
 public:
  inline NavigationPath() : NavigationPath(nullptr) {}
  virtual ~NavigationPath();

  NavigationPath(const NavigationPath& from);
  NavigationPath(NavigationPath&& from) noexcept
    : NavigationPath() {
    *this = ::std::move(from);
  }

  inline NavigationPath& operator=(const NavigationPath& from) {
    CopyFrom(from);
    return *this;
  }
  inline NavigationPath& operator=(NavigationPath&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NavigationPath& default_instance();

  static inline const NavigationPath* internal_default_instance() {
    return reinterpret_cast<const NavigationPath*>(
               &_NavigationPath_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(NavigationPath& a, NavigationPath& b) {
    a.Swap(&b);
  }
  inline void Swap(NavigationPath* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NavigationPath* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NavigationPath* New() const final {
    return CreateMaybeMessage<NavigationPath>(nullptr);
  }

  NavigationPath* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NavigationPath>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NavigationPath& from);
  void MergeFrom(const NavigationPath& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NavigationPath* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "civ.relative_map.NavigationPath";
  }
  protected:
  explicit NavigationPath(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_message_2fmap_2frelative_5fmap_2fproto_2fnavigation_2eproto);
    return ::descriptor_table_message_2fmap_2frelative_5fmap_2fproto_2fnavigation_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathFieldNumber = 1,
    kPathPriorityFieldNumber = 2,
  };
  // optional .civ.common.Path path = 1;
  bool has_path() const;
  private:
  bool _internal_has_path() const;
  public:
  void clear_path();
  const ::civ::common::Path& path() const;
  ::civ::common::Path* release_path();
  ::civ::common::Path* mutable_path();
  void set_allocated_path(::civ::common::Path* path);
  private:
  const ::civ::common::Path& _internal_path() const;
  ::civ::common::Path* _internal_mutable_path();
  public:
  void unsafe_arena_set_allocated_path(
      ::civ::common::Path* path);
  ::civ::common::Path* unsafe_arena_release_path();

  // optional uint32 path_priority = 2;
  bool has_path_priority() const;
  private:
  bool _internal_has_path_priority() const;
  public:
  void clear_path_priority();
  ::PROTOBUF_NAMESPACE_ID::uint32 path_priority() const;
  void set_path_priority(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_path_priority() const;
  void _internal_set_path_priority(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:civ.relative_map.NavigationPath)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::civ::common::Path* path_;
  ::PROTOBUF_NAMESPACE_ID::uint32 path_priority_;
  friend struct ::TableStruct_message_2fmap_2frelative_5fmap_2fproto_2fnavigation_2eproto;
};
// -------------------------------------------------------------------

class NavigationInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:civ.relative_map.NavigationInfo) */ {
 public:
  inline NavigationInfo() : NavigationInfo(nullptr) {}
  virtual ~NavigationInfo();

  NavigationInfo(const NavigationInfo& from);
  NavigationInfo(NavigationInfo&& from) noexcept
    : NavigationInfo() {
    *this = ::std::move(from);
  }

  inline NavigationInfo& operator=(const NavigationInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline NavigationInfo& operator=(NavigationInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NavigationInfo& default_instance();

  static inline const NavigationInfo* internal_default_instance() {
    return reinterpret_cast<const NavigationInfo*>(
               &_NavigationInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(NavigationInfo& a, NavigationInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(NavigationInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NavigationInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NavigationInfo* New() const final {
    return CreateMaybeMessage<NavigationInfo>(nullptr);
  }

  NavigationInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NavigationInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NavigationInfo& from);
  void MergeFrom(const NavigationInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NavigationInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "civ.relative_map.NavigationInfo";
  }
  protected:
  explicit NavigationInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_message_2fmap_2frelative_5fmap_2fproto_2fnavigation_2eproto);
    return ::descriptor_table_message_2fmap_2frelative_5fmap_2fproto_2fnavigation_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNavigationPathFieldNumber = 2,
    kHeaderFieldNumber = 1,
  };
  // repeated .civ.relative_map.NavigationPath navigation_path = 2;
  int navigation_path_size() const;
  private:
  int _internal_navigation_path_size() const;
  public:
  void clear_navigation_path();
  ::civ::relative_map::NavigationPath* mutable_navigation_path(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::civ::relative_map::NavigationPath >*
      mutable_navigation_path();
  private:
  const ::civ::relative_map::NavigationPath& _internal_navigation_path(int index) const;
  ::civ::relative_map::NavigationPath* _internal_add_navigation_path();
  public:
  const ::civ::relative_map::NavigationPath& navigation_path(int index) const;
  ::civ::relative_map::NavigationPath* add_navigation_path();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::civ::relative_map::NavigationPath >&
      navigation_path() const;

  // optional .civ.common.Header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::civ::common::Header& header() const;
  ::civ::common::Header* release_header();
  ::civ::common::Header* mutable_header();
  void set_allocated_header(::civ::common::Header* header);
  private:
  const ::civ::common::Header& _internal_header() const;
  ::civ::common::Header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::civ::common::Header* header);
  ::civ::common::Header* unsafe_arena_release_header();

  // @@protoc_insertion_point(class_scope:civ.relative_map.NavigationInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::civ::relative_map::NavigationPath > navigation_path_;
  ::civ::common::Header* header_;
  friend struct ::TableStruct_message_2fmap_2frelative_5fmap_2fproto_2fnavigation_2eproto;
};
// -------------------------------------------------------------------

class MapMsg_NavigationPathEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<MapMsg_NavigationPathEntry_DoNotUse, 
    std::string, ::civ::relative_map::NavigationPath,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<MapMsg_NavigationPathEntry_DoNotUse, 
    std::string, ::civ::relative_map::NavigationPath,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  MapMsg_NavigationPathEntry_DoNotUse();
  explicit MapMsg_NavigationPathEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const MapMsg_NavigationPathEntry_DoNotUse& other);
  static const MapMsg_NavigationPathEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const MapMsg_NavigationPathEntry_DoNotUse*>(&_MapMsg_NavigationPathEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
#ifndef NDEBUG
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
       s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "civ.relative_map.MapMsg.NavigationPathEntry.key");
#else
    (void) s;
#endif
    return true;
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_message_2fmap_2frelative_5fmap_2fproto_2fnavigation_2eproto);
    return ::descriptor_table_message_2fmap_2frelative_5fmap_2fproto_2fnavigation_2eproto.file_level_metadata[2];
  }

  public:
};

// -------------------------------------------------------------------

class MapMsg PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:civ.relative_map.MapMsg) */ {
 public:
  inline MapMsg() : MapMsg(nullptr) {}
  virtual ~MapMsg();

  MapMsg(const MapMsg& from);
  MapMsg(MapMsg&& from) noexcept
    : MapMsg() {
    *this = ::std::move(from);
  }

  inline MapMsg& operator=(const MapMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline MapMsg& operator=(MapMsg&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MapMsg& default_instance();

  static inline const MapMsg* internal_default_instance() {
    return reinterpret_cast<const MapMsg*>(
               &_MapMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(MapMsg& a, MapMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(MapMsg* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MapMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MapMsg* New() const final {
    return CreateMaybeMessage<MapMsg>(nullptr);
  }

  MapMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MapMsg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MapMsg& from);
  void MergeFrom(const MapMsg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MapMsg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "civ.relative_map.MapMsg";
  }
  protected:
  explicit MapMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_message_2fmap_2frelative_5fmap_2fproto_2fnavigation_2eproto);
    return ::descriptor_table_message_2fmap_2frelative_5fmap_2fproto_2fnavigation_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kNavigationPathFieldNumber = 3,
    kHeaderFieldNumber = 1,
    kHdmapFieldNumber = 2,
  };
  // map<string, .civ.relative_map.NavigationPath> navigation_path = 3;
  int navigation_path_size() const;
  private:
  int _internal_navigation_path_size() const;
  public:
  void clear_navigation_path();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::civ::relative_map::NavigationPath >&
      _internal_navigation_path() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::civ::relative_map::NavigationPath >*
      _internal_mutable_navigation_path();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::civ::relative_map::NavigationPath >&
      navigation_path() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::civ::relative_map::NavigationPath >*
      mutable_navigation_path();

  // optional .civ.common.Header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::civ::common::Header& header() const;
  ::civ::common::Header* release_header();
  ::civ::common::Header* mutable_header();
  void set_allocated_header(::civ::common::Header* header);
  private:
  const ::civ::common::Header& _internal_header() const;
  ::civ::common::Header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::civ::common::Header* header);
  ::civ::common::Header* unsafe_arena_release_header();

  // optional .civ.hdmap.Map hdmap = 2;
  bool has_hdmap() const;
  private:
  bool _internal_has_hdmap() const;
  public:
  void clear_hdmap();
  const ::civ::hdmap::Map& hdmap() const;
  ::civ::hdmap::Map* release_hdmap();
  ::civ::hdmap::Map* mutable_hdmap();
  void set_allocated_hdmap(::civ::hdmap::Map* hdmap);
  private:
  const ::civ::hdmap::Map& _internal_hdmap() const;
  ::civ::hdmap::Map* _internal_mutable_hdmap();
  public:
  void unsafe_arena_set_allocated_hdmap(
      ::civ::hdmap::Map* hdmap);
  ::civ::hdmap::Map* unsafe_arena_release_hdmap();

  // @@protoc_insertion_point(class_scope:civ.relative_map.MapMsg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      MapMsg_NavigationPathEntry_DoNotUse,
      std::string, ::civ::relative_map::NavigationPath,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> navigation_path_;
  ::civ::common::Header* header_;
  ::civ::hdmap::Map* hdmap_;
  friend struct ::TableStruct_message_2fmap_2frelative_5fmap_2fproto_2fnavigation_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// NavigationPath

// optional .civ.common.Path path = 1;
inline bool NavigationPath::_internal_has_path() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || path_ != nullptr);
  return value;
}
inline bool NavigationPath::has_path() const {
  return _internal_has_path();
}
inline const ::civ::common::Path& NavigationPath::_internal_path() const {
  const ::civ::common::Path* p = path_;
  return p != nullptr ? *p : reinterpret_cast<const ::civ::common::Path&>(
      ::civ::common::_Path_default_instance_);
}
inline const ::civ::common::Path& NavigationPath::path() const {
  // @@protoc_insertion_point(field_get:civ.relative_map.NavigationPath.path)
  return _internal_path();
}
inline void NavigationPath::unsafe_arena_set_allocated_path(
    ::civ::common::Path* path) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(path_);
  }
  path_ = path;
  if (path) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:civ.relative_map.NavigationPath.path)
}
inline ::civ::common::Path* NavigationPath::release_path() {
  _has_bits_[0] &= ~0x00000001u;
  ::civ::common::Path* temp = path_;
  path_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::civ::common::Path* NavigationPath::unsafe_arena_release_path() {
  // @@protoc_insertion_point(field_release:civ.relative_map.NavigationPath.path)
  _has_bits_[0] &= ~0x00000001u;
  ::civ::common::Path* temp = path_;
  path_ = nullptr;
  return temp;
}
inline ::civ::common::Path* NavigationPath::_internal_mutable_path() {
  _has_bits_[0] |= 0x00000001u;
  if (path_ == nullptr) {
    auto* p = CreateMaybeMessage<::civ::common::Path>(GetArena());
    path_ = p;
  }
  return path_;
}
inline ::civ::common::Path* NavigationPath::mutable_path() {
  // @@protoc_insertion_point(field_mutable:civ.relative_map.NavigationPath.path)
  return _internal_mutable_path();
}
inline void NavigationPath::set_allocated_path(::civ::common::Path* path) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(path_);
  }
  if (path) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(path)->GetArena();
    if (message_arena != submessage_arena) {
      path = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, path, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  path_ = path;
  // @@protoc_insertion_point(field_set_allocated:civ.relative_map.NavigationPath.path)
}

// optional uint32 path_priority = 2;
inline bool NavigationPath::_internal_has_path_priority() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool NavigationPath::has_path_priority() const {
  return _internal_has_path_priority();
}
inline void NavigationPath::clear_path_priority() {
  path_priority_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NavigationPath::_internal_path_priority() const {
  return path_priority_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NavigationPath::path_priority() const {
  // @@protoc_insertion_point(field_get:civ.relative_map.NavigationPath.path_priority)
  return _internal_path_priority();
}
inline void NavigationPath::_internal_set_path_priority(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  path_priority_ = value;
}
inline void NavigationPath::set_path_priority(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_path_priority(value);
  // @@protoc_insertion_point(field_set:civ.relative_map.NavigationPath.path_priority)
}

// -------------------------------------------------------------------

// NavigationInfo

// optional .civ.common.Header header = 1;
inline bool NavigationInfo::_internal_has_header() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || header_ != nullptr);
  return value;
}
inline bool NavigationInfo::has_header() const {
  return _internal_has_header();
}
inline const ::civ::common::Header& NavigationInfo::_internal_header() const {
  const ::civ::common::Header* p = header_;
  return p != nullptr ? *p : reinterpret_cast<const ::civ::common::Header&>(
      ::civ::common::_Header_default_instance_);
}
inline const ::civ::common::Header& NavigationInfo::header() const {
  // @@protoc_insertion_point(field_get:civ.relative_map.NavigationInfo.header)
  return _internal_header();
}
inline void NavigationInfo::unsafe_arena_set_allocated_header(
    ::civ::common::Header* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:civ.relative_map.NavigationInfo.header)
}
inline ::civ::common::Header* NavigationInfo::release_header() {
  _has_bits_[0] &= ~0x00000001u;
  ::civ::common::Header* temp = header_;
  header_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::civ::common::Header* NavigationInfo::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:civ.relative_map.NavigationInfo.header)
  _has_bits_[0] &= ~0x00000001u;
  ::civ::common::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::civ::common::Header* NavigationInfo::_internal_mutable_header() {
  _has_bits_[0] |= 0x00000001u;
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::civ::common::Header>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::civ::common::Header* NavigationInfo::mutable_header() {
  // @@protoc_insertion_point(field_mutable:civ.relative_map.NavigationInfo.header)
  return _internal_mutable_header();
}
inline void NavigationInfo::set_allocated_header(::civ::common::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header)->GetArena();
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:civ.relative_map.NavigationInfo.header)
}

// repeated .civ.relative_map.NavigationPath navigation_path = 2;
inline int NavigationInfo::_internal_navigation_path_size() const {
  return navigation_path_.size();
}
inline int NavigationInfo::navigation_path_size() const {
  return _internal_navigation_path_size();
}
inline void NavigationInfo::clear_navigation_path() {
  navigation_path_.Clear();
}
inline ::civ::relative_map::NavigationPath* NavigationInfo::mutable_navigation_path(int index) {
  // @@protoc_insertion_point(field_mutable:civ.relative_map.NavigationInfo.navigation_path)
  return navigation_path_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::civ::relative_map::NavigationPath >*
NavigationInfo::mutable_navigation_path() {
  // @@protoc_insertion_point(field_mutable_list:civ.relative_map.NavigationInfo.navigation_path)
  return &navigation_path_;
}
inline const ::civ::relative_map::NavigationPath& NavigationInfo::_internal_navigation_path(int index) const {
  return navigation_path_.Get(index);
}
inline const ::civ::relative_map::NavigationPath& NavigationInfo::navigation_path(int index) const {
  // @@protoc_insertion_point(field_get:civ.relative_map.NavigationInfo.navigation_path)
  return _internal_navigation_path(index);
}
inline ::civ::relative_map::NavigationPath* NavigationInfo::_internal_add_navigation_path() {
  return navigation_path_.Add();
}
inline ::civ::relative_map::NavigationPath* NavigationInfo::add_navigation_path() {
  // @@protoc_insertion_point(field_add:civ.relative_map.NavigationInfo.navigation_path)
  return _internal_add_navigation_path();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::civ::relative_map::NavigationPath >&
NavigationInfo::navigation_path() const {
  // @@protoc_insertion_point(field_list:civ.relative_map.NavigationInfo.navigation_path)
  return navigation_path_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// MapMsg

// optional .civ.common.Header header = 1;
inline bool MapMsg::_internal_has_header() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || header_ != nullptr);
  return value;
}
inline bool MapMsg::has_header() const {
  return _internal_has_header();
}
inline const ::civ::common::Header& MapMsg::_internal_header() const {
  const ::civ::common::Header* p = header_;
  return p != nullptr ? *p : reinterpret_cast<const ::civ::common::Header&>(
      ::civ::common::_Header_default_instance_);
}
inline const ::civ::common::Header& MapMsg::header() const {
  // @@protoc_insertion_point(field_get:civ.relative_map.MapMsg.header)
  return _internal_header();
}
inline void MapMsg::unsafe_arena_set_allocated_header(
    ::civ::common::Header* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:civ.relative_map.MapMsg.header)
}
inline ::civ::common::Header* MapMsg::release_header() {
  _has_bits_[0] &= ~0x00000001u;
  ::civ::common::Header* temp = header_;
  header_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::civ::common::Header* MapMsg::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:civ.relative_map.MapMsg.header)
  _has_bits_[0] &= ~0x00000001u;
  ::civ::common::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::civ::common::Header* MapMsg::_internal_mutable_header() {
  _has_bits_[0] |= 0x00000001u;
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::civ::common::Header>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::civ::common::Header* MapMsg::mutable_header() {
  // @@protoc_insertion_point(field_mutable:civ.relative_map.MapMsg.header)
  return _internal_mutable_header();
}
inline void MapMsg::set_allocated_header(::civ::common::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header)->GetArena();
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:civ.relative_map.MapMsg.header)
}

// optional .civ.hdmap.Map hdmap = 2;
inline bool MapMsg::_internal_has_hdmap() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || hdmap_ != nullptr);
  return value;
}
inline bool MapMsg::has_hdmap() const {
  return _internal_has_hdmap();
}
inline const ::civ::hdmap::Map& MapMsg::_internal_hdmap() const {
  const ::civ::hdmap::Map* p = hdmap_;
  return p != nullptr ? *p : reinterpret_cast<const ::civ::hdmap::Map&>(
      ::civ::hdmap::_Map_default_instance_);
}
inline const ::civ::hdmap::Map& MapMsg::hdmap() const {
  // @@protoc_insertion_point(field_get:civ.relative_map.MapMsg.hdmap)
  return _internal_hdmap();
}
inline void MapMsg::unsafe_arena_set_allocated_hdmap(
    ::civ::hdmap::Map* hdmap) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(hdmap_);
  }
  hdmap_ = hdmap;
  if (hdmap) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:civ.relative_map.MapMsg.hdmap)
}
inline ::civ::hdmap::Map* MapMsg::release_hdmap() {
  _has_bits_[0] &= ~0x00000002u;
  ::civ::hdmap::Map* temp = hdmap_;
  hdmap_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::civ::hdmap::Map* MapMsg::unsafe_arena_release_hdmap() {
  // @@protoc_insertion_point(field_release:civ.relative_map.MapMsg.hdmap)
  _has_bits_[0] &= ~0x00000002u;
  ::civ::hdmap::Map* temp = hdmap_;
  hdmap_ = nullptr;
  return temp;
}
inline ::civ::hdmap::Map* MapMsg::_internal_mutable_hdmap() {
  _has_bits_[0] |= 0x00000002u;
  if (hdmap_ == nullptr) {
    auto* p = CreateMaybeMessage<::civ::hdmap::Map>(GetArena());
    hdmap_ = p;
  }
  return hdmap_;
}
inline ::civ::hdmap::Map* MapMsg::mutable_hdmap() {
  // @@protoc_insertion_point(field_mutable:civ.relative_map.MapMsg.hdmap)
  return _internal_mutable_hdmap();
}
inline void MapMsg::set_allocated_hdmap(::civ::hdmap::Map* hdmap) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(hdmap_);
  }
  if (hdmap) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(hdmap)->GetArena();
    if (message_arena != submessage_arena) {
      hdmap = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, hdmap, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  hdmap_ = hdmap;
  // @@protoc_insertion_point(field_set_allocated:civ.relative_map.MapMsg.hdmap)
}

// map<string, .civ.relative_map.NavigationPath> navigation_path = 3;
inline int MapMsg::_internal_navigation_path_size() const {
  return navigation_path_.size();
}
inline int MapMsg::navigation_path_size() const {
  return _internal_navigation_path_size();
}
inline void MapMsg::clear_navigation_path() {
  navigation_path_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::civ::relative_map::NavigationPath >&
MapMsg::_internal_navigation_path() const {
  return navigation_path_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::civ::relative_map::NavigationPath >&
MapMsg::navigation_path() const {
  // @@protoc_insertion_point(field_map:civ.relative_map.MapMsg.navigation_path)
  return _internal_navigation_path();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::civ::relative_map::NavigationPath >*
MapMsg::_internal_mutable_navigation_path() {
  return navigation_path_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::civ::relative_map::NavigationPath >*
MapMsg::mutable_navigation_path() {
  // @@protoc_insertion_point(field_mutable_map:civ.relative_map.MapMsg.navigation_path)
  return _internal_mutable_navigation_path();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace relative_map
}  // namespace civ

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_message_2fmap_2frelative_5fmap_2fproto_2fnavigation_2eproto
