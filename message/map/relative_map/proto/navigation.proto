syntax = "proto2";

package civ.relative_map;

import "message/common/proto/header.proto";
import "message/common/proto/pnc_point.proto";
// import "message/localization/proto/localization.proto";
import "message/map/proto/map.proto";
// import "message/perception/proto/perception_obstacle.proto";

message NavigationPath {
  optional civ.common.Path path = 1;
  // highest = 0 which can directly reach destination; change lane indicator
  optional uint32 path_priority = 2;
}

message NavigationInfo {
  optional civ.common.Header header = 1;
  repeated NavigationPath navigation_path = 2;
}

// The map message in transmission format.
message MapMsg {
  optional civ.common.Header header = 1;

  // Coordination: FLU
  // x: Forward
  // y: Left
  // z: Up
  optional civ.hdmap.Map hdmap = 2;

  // key: type string; the lane id in Map
  // value: Navigation path; the reference line of the lane
  map<string, NavigationPath> navigation_path = 3;

  // lane marker info from perception
  // optional civ.perception.LaneMarkers lane_marker = 4;

  // localization
  // optional civ.localization.LocalizationEstimate localization = 5;
}
