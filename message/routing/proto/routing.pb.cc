// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message/routing/proto/routing.proto

#include "message/routing/proto/routing.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_message_2fcommon_2fproto_2fheader_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Header_message_2fcommon_2fproto_2fheader_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_message_2fcommon_2fproto_2fgeometry_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PointENU_message_2fcommon_2fproto_2fgeometry_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_message_2fcommon_2fproto_2ferror_5fcode_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StatusPb_message_2fcommon_2fproto_2ferror_5fcode_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_message_2fmap_2fproto_2fmap_5fparking_5fspace_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ParkingSpace_message_2fmap_2fproto_2fmap_5fparking_5fspace_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_message_2fmap_2fproto_2fmap_5fgeometry_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Polygon_message_2fmap_2fproto_2fmap_5fgeometry_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_message_2frouting_2fproto_2frouting_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DeadEndInfo_message_2frouting_2fproto_2frouting_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_message_2frouting_2fproto_2frouting_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LaneSegment_message_2frouting_2fproto_2frouting_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_message_2frouting_2fproto_2frouting_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LaneWaypoint_message_2frouting_2fproto_2frouting_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_message_2frouting_2fproto_2frouting_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Measurement_message_2frouting_2fproto_2frouting_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_message_2frouting_2fproto_2frouting_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ParkingInfo_message_2frouting_2fproto_2frouting_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_message_2frouting_2fproto_2frouting_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Passage_message_2frouting_2fproto_2frouting_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_message_2frouting_2fproto_2frouting_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RoadSegment_message_2frouting_2fproto_2frouting_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_message_2frouting_2fproto_2frouting_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_RoutingRequest_message_2frouting_2fproto_2frouting_2eproto;
namespace civ {
namespace routing {
class LaneWaypointDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LaneWaypoint> _instance;
} _LaneWaypoint_default_instance_;
class LaneSegmentDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LaneSegment> _instance;
} _LaneSegment_default_instance_;
class ParkingInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ParkingInfo> _instance;
} _ParkingInfo_default_instance_;
class DeadEndInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeadEndInfo> _instance;
} _DeadEndInfo_default_instance_;
class RoutingRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RoutingRequest> _instance;
} _RoutingRequest_default_instance_;
class MeasurementDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Measurement> _instance;
} _Measurement_default_instance_;
class PassageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Passage> _instance;
} _Passage_default_instance_;
class RoadSegmentDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RoadSegment> _instance;
} _RoadSegment_default_instance_;
class RoutingResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RoutingResponse> _instance;
} _RoutingResponse_default_instance_;
}  // namespace routing
}  // namespace civ
static void InitDefaultsscc_info_DeadEndInfo_message_2frouting_2fproto_2frouting_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::civ::routing::_DeadEndInfo_default_instance_;
    new (ptr) ::civ::routing::DeadEndInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DeadEndInfo_message_2frouting_2fproto_2frouting_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DeadEndInfo_message_2frouting_2fproto_2frouting_2eproto}, {
      &scc_info_PointENU_message_2fcommon_2fproto_2fgeometry_2eproto.base,}};

static void InitDefaultsscc_info_LaneSegment_message_2frouting_2fproto_2frouting_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::civ::routing::_LaneSegment_default_instance_;
    new (ptr) ::civ::routing::LaneSegment();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LaneSegment_message_2frouting_2fproto_2frouting_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LaneSegment_message_2frouting_2fproto_2frouting_2eproto}, {}};

static void InitDefaultsscc_info_LaneWaypoint_message_2frouting_2fproto_2frouting_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::civ::routing::_LaneWaypoint_default_instance_;
    new (ptr) ::civ::routing::LaneWaypoint();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LaneWaypoint_message_2frouting_2fproto_2frouting_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_LaneWaypoint_message_2frouting_2fproto_2frouting_2eproto}, {
      &scc_info_PointENU_message_2fcommon_2fproto_2fgeometry_2eproto.base,}};

static void InitDefaultsscc_info_Measurement_message_2frouting_2fproto_2frouting_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::civ::routing::_Measurement_default_instance_;
    new (ptr) ::civ::routing::Measurement();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Measurement_message_2frouting_2fproto_2frouting_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Measurement_message_2frouting_2fproto_2frouting_2eproto}, {}};

static void InitDefaultsscc_info_ParkingInfo_message_2frouting_2fproto_2frouting_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::civ::routing::_ParkingInfo_default_instance_;
    new (ptr) ::civ::routing::ParkingInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ParkingInfo_message_2frouting_2fproto_2frouting_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ParkingInfo_message_2frouting_2fproto_2frouting_2eproto}, {
      &scc_info_PointENU_message_2fcommon_2fproto_2fgeometry_2eproto.base,
      &scc_info_Polygon_message_2fmap_2fproto_2fmap_5fgeometry_2eproto.base,}};

static void InitDefaultsscc_info_Passage_message_2frouting_2fproto_2frouting_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::civ::routing::_Passage_default_instance_;
    new (ptr) ::civ::routing::Passage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Passage_message_2frouting_2fproto_2frouting_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Passage_message_2frouting_2fproto_2frouting_2eproto}, {
      &scc_info_LaneSegment_message_2frouting_2fproto_2frouting_2eproto.base,}};

static void InitDefaultsscc_info_RoadSegment_message_2frouting_2fproto_2frouting_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::civ::routing::_RoadSegment_default_instance_;
    new (ptr) ::civ::routing::RoadSegment();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RoadSegment_message_2frouting_2fproto_2frouting_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_RoadSegment_message_2frouting_2fproto_2frouting_2eproto}, {
      &scc_info_Passage_message_2frouting_2fproto_2frouting_2eproto.base,}};

static void InitDefaultsscc_info_RoutingRequest_message_2frouting_2fproto_2frouting_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::civ::routing::_RoutingRequest_default_instance_;
    new (ptr) ::civ::routing::RoutingRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_RoutingRequest_message_2frouting_2fproto_2frouting_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 6, 0, InitDefaultsscc_info_RoutingRequest_message_2frouting_2fproto_2frouting_2eproto}, {
      &scc_info_Header_message_2fcommon_2fproto_2fheader_2eproto.base,
      &scc_info_LaneWaypoint_message_2frouting_2fproto_2frouting_2eproto.base,
      &scc_info_LaneSegment_message_2frouting_2fproto_2frouting_2eproto.base,
      &scc_info_ParkingSpace_message_2fmap_2fproto_2fmap_5fparking_5fspace_2eproto.base,
      &scc_info_ParkingInfo_message_2frouting_2fproto_2frouting_2eproto.base,
      &scc_info_DeadEndInfo_message_2frouting_2fproto_2frouting_2eproto.base,}};

static void InitDefaultsscc_info_RoutingResponse_message_2frouting_2fproto_2frouting_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::civ::routing::_RoutingResponse_default_instance_;
    new (ptr) ::civ::routing::RoutingResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_RoutingResponse_message_2frouting_2fproto_2frouting_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 5, 0, InitDefaultsscc_info_RoutingResponse_message_2frouting_2fproto_2frouting_2eproto}, {
      &scc_info_Header_message_2fcommon_2fproto_2fheader_2eproto.base,
      &scc_info_RoadSegment_message_2frouting_2fproto_2frouting_2eproto.base,
      &scc_info_Measurement_message_2frouting_2fproto_2frouting_2eproto.base,
      &scc_info_RoutingRequest_message_2frouting_2fproto_2frouting_2eproto.base,
      &scc_info_StatusPb_message_2fcommon_2fproto_2ferror_5fcode_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_message_2frouting_2fproto_2frouting_2eproto[9];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_message_2frouting_2fproto_2frouting_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_message_2frouting_2fproto_2frouting_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_message_2frouting_2fproto_2frouting_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::civ::routing::LaneWaypoint, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::civ::routing::LaneWaypoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::civ::routing::LaneWaypoint, id_),
  PROTOBUF_FIELD_OFFSET(::civ::routing::LaneWaypoint, s_),
  PROTOBUF_FIELD_OFFSET(::civ::routing::LaneWaypoint, pose_),
  PROTOBUF_FIELD_OFFSET(::civ::routing::LaneWaypoint, heading_),
  0,
  2,
  1,
  3,
  PROTOBUF_FIELD_OFFSET(::civ::routing::LaneSegment, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::civ::routing::LaneSegment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::civ::routing::LaneSegment, id_),
  PROTOBUF_FIELD_OFFSET(::civ::routing::LaneSegment, start_s_),
  PROTOBUF_FIELD_OFFSET(::civ::routing::LaneSegment, end_s_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::civ::routing::ParkingInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::civ::routing::ParkingInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::civ::routing::ParkingInfo, parking_space_id_),
  PROTOBUF_FIELD_OFFSET(::civ::routing::ParkingInfo, parking_point_),
  PROTOBUF_FIELD_OFFSET(::civ::routing::ParkingInfo, parking_space_type_),
  PROTOBUF_FIELD_OFFSET(::civ::routing::ParkingInfo, corner_point_),
  0,
  1,
  3,
  2,
  PROTOBUF_FIELD_OFFSET(::civ::routing::DeadEndInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::civ::routing::DeadEndInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::civ::routing::DeadEndInfo, dead_end_routing_type_),
  PROTOBUF_FIELD_OFFSET(::civ::routing::DeadEndInfo, target_point_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::civ::routing::RoutingRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::civ::routing::RoutingRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::civ::routing::RoutingRequest, header_),
  PROTOBUF_FIELD_OFFSET(::civ::routing::RoutingRequest, waypoint_),
  PROTOBUF_FIELD_OFFSET(::civ::routing::RoutingRequest, blacklisted_lane_),
  PROTOBUF_FIELD_OFFSET(::civ::routing::RoutingRequest, blacklisted_road_),
  PROTOBUF_FIELD_OFFSET(::civ::routing::RoutingRequest, broadcast_),
  PROTOBUF_FIELD_OFFSET(::civ::routing::RoutingRequest, parking_space_),
  PROTOBUF_FIELD_OFFSET(::civ::routing::RoutingRequest, parking_info_),
  PROTOBUF_FIELD_OFFSET(::civ::routing::RoutingRequest, dead_end_info_),
  0,
  ~0u,
  ~0u,
  ~0u,
  4,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::civ::routing::Measurement, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::civ::routing::Measurement, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::civ::routing::Measurement, distance_),
  0,
  PROTOBUF_FIELD_OFFSET(::civ::routing::Passage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::civ::routing::Passage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::civ::routing::Passage, segment_),
  PROTOBUF_FIELD_OFFSET(::civ::routing::Passage, can_exit_),
  PROTOBUF_FIELD_OFFSET(::civ::routing::Passage, change_lane_type_),
  ~0u,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::civ::routing::RoadSegment, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::civ::routing::RoadSegment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::civ::routing::RoadSegment, id_),
  PROTOBUF_FIELD_OFFSET(::civ::routing::RoadSegment, passage_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::civ::routing::RoutingResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::civ::routing::RoutingResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::civ::routing::RoutingResponse, header_),
  PROTOBUF_FIELD_OFFSET(::civ::routing::RoutingResponse, road_),
  PROTOBUF_FIELD_OFFSET(::civ::routing::RoutingResponse, measurement_),
  PROTOBUF_FIELD_OFFSET(::civ::routing::RoutingResponse, routing_request_),
  PROTOBUF_FIELD_OFFSET(::civ::routing::RoutingResponse, map_version_),
  PROTOBUF_FIELD_OFFSET(::civ::routing::RoutingResponse, status_),
  PROTOBUF_FIELD_OFFSET(::civ::routing::RoutingResponse, haha_),
  1,
  ~0u,
  2,
  3,
  0,
  4,
  5,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, sizeof(::civ::routing::LaneWaypoint)},
  { 13, 21, sizeof(::civ::routing::LaneSegment)},
  { 24, 33, sizeof(::civ::routing::ParkingInfo)},
  { 37, 44, sizeof(::civ::routing::DeadEndInfo)},
  { 46, 59, sizeof(::civ::routing::RoutingRequest)},
  { 67, 73, sizeof(::civ::routing::Measurement)},
  { 74, 82, sizeof(::civ::routing::Passage)},
  { 85, 92, sizeof(::civ::routing::RoadSegment)},
  { 94, 106, sizeof(::civ::routing::RoutingResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::civ::routing::_LaneWaypoint_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::civ::routing::_LaneSegment_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::civ::routing::_ParkingInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::civ::routing::_DeadEndInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::civ::routing::_RoutingRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::civ::routing::_Measurement_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::civ::routing::_Passage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::civ::routing::_RoadSegment_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::civ::routing::_RoutingResponse_default_instance_),
};

const char descriptor_table_protodef_message_2frouting_2fproto_2frouting_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n#message/routing/proto/routing.proto\022\013c"
  "iv.routing\032!message/common/proto/header."
  "proto\032#message/common/proto/geometry.pro"
  "to\032%message/common/proto/error_code.prot"
  "o\032)message/map/proto/map_parking_space.p"
  "roto\032$message/map/proto/map_geometry.pro"
  "to\"Z\n\014LaneWaypoint\022\n\n\002id\030\001 \001(\t\022\t\n\001s\030\002 \001("
  "\001\022\"\n\004pose\030\003 \001(\0132\024.civ.common.PointENU\022\017\n"
  "\007heading\030\004 \001(\001\"9\n\013LaneSegment\022\n\n\002id\030\001 \001("
  "\t\022\017\n\007start_s\030\002 \001(\001\022\r\n\005end_s\030\003 \001(\001\"\271\001\n\013Pa"
  "rkingInfo\022\030\n\020parking_space_id\030\001 \001(\t\022+\n\rp"
  "arking_point\030\002 \001(\0132\024.civ.common.PointENU"
  "\0229\n\022parking_space_type\030\003 \001(\0162\035.civ.routi"
  "ng.ParkingSpaceType\022(\n\014corner_point\030\004 \001("
  "\0132\022.civ.hdmap.Polygon\"y\n\013DeadEndInfo\022>\n\025"
  "dead_end_routing_type\030\001 \001(\0162\037.civ.routin"
  "g.DeadEndRoutingType\022*\n\014target_point\030\002 \001"
  "(\0132\024.civ.common.PointENU\"\335\002\n\016RoutingRequ"
  "est\022\"\n\006header\030\001 \001(\0132\022.civ.common.Header\022"
  "+\n\010waypoint\030\002 \003(\0132\031.civ.routing.LaneWayp"
  "oint\0222\n\020blacklisted_lane\030\003 \003(\0132\030.civ.rou"
  "ting.LaneSegment\022\030\n\020blacklisted_road\030\004 \003"
  "(\t\022\027\n\tbroadcast\030\005 \001(\010:\004true\0222\n\rparking_s"
  "pace\030\006 \001(\0132\027.civ.hdmap.ParkingSpaceB\002\030\001\022"
  ".\n\014parking_info\030\007 \001(\0132\030.civ.routing.Park"
  "ingInfo\022/\n\rdead_end_info\030\010 \001(\0132\030.civ.rou"
  "ting.DeadEndInfo\"\037\n\013Measurement\022\020\n\010dista"
  "nce\030\001 \001(\001\"\206\001\n\007Passage\022)\n\007segment\030\001 \003(\0132\030"
  ".civ.routing.LaneSegment\022\020\n\010can_exit\030\002 \001"
  "(\010\022>\n\020change_lane_type\030\003 \001(\0162\033.civ.routi"
  "ng.ChangeLaneType:\007FORWARD\"@\n\013RoadSegmen"
  "t\022\n\n\002id\030\001 \001(\t\022%\n\007passage\030\002 \003(\0132\024.civ.rou"
  "ting.Passage\"\213\002\n\017RoutingResponse\022\"\n\006head"
  "er\030\001 \001(\0132\022.civ.common.Header\022&\n\004road\030\002 \003"
  "(\0132\030.civ.routing.RoadSegment\022-\n\013measurem"
  "ent\030\003 \001(\0132\030.civ.routing.Measurement\0224\n\017r"
  "outing_request\030\004 \001(\0132\033.civ.routing.Routi"
  "ngRequest\022\023\n\013map_version\030\005 \001(\014\022$\n\006status"
  "\030\006 \001(\0132\024.civ.common.StatusPb\022\014\n\004haha\030\007 \001"
  "(\001*;\n\020ParkingSpaceType\022\021\n\rVERTICAL_PLOT\020"
  "\000\022\024\n\020PARALLEL_PARKING\020\001*H\n\022DeadEndRoutin"
  "gType\022\021\n\rROUTING_OTHER\020\000\022\016\n\nROUTING_IN\020\001"
  "\022\017\n\013ROUTING_OUT\020\002*2\n\016ChangeLaneType\022\013\n\007F"
  "ORWARD\020\000\022\010\n\004LEFT\020\001\022\t\n\005RIGHT\020\002"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_message_2frouting_2fproto_2frouting_2eproto_deps[5] = {
  &::descriptor_table_message_2fcommon_2fproto_2ferror_5fcode_2eproto,
  &::descriptor_table_message_2fcommon_2fproto_2fgeometry_2eproto,
  &::descriptor_table_message_2fcommon_2fproto_2fheader_2eproto,
  &::descriptor_table_message_2fmap_2fproto_2fmap_5fgeometry_2eproto,
  &::descriptor_table_message_2fmap_2fproto_2fmap_5fparking_5fspace_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_message_2frouting_2fproto_2frouting_2eproto_sccs[9] = {
  &scc_info_DeadEndInfo_message_2frouting_2fproto_2frouting_2eproto.base,
  &scc_info_LaneSegment_message_2frouting_2fproto_2frouting_2eproto.base,
  &scc_info_LaneWaypoint_message_2frouting_2fproto_2frouting_2eproto.base,
  &scc_info_Measurement_message_2frouting_2fproto_2frouting_2eproto.base,
  &scc_info_ParkingInfo_message_2frouting_2fproto_2frouting_2eproto.base,
  &scc_info_Passage_message_2frouting_2fproto_2frouting_2eproto.base,
  &scc_info_RoadSegment_message_2frouting_2fproto_2frouting_2eproto.base,
  &scc_info_RoutingRequest_message_2frouting_2fproto_2frouting_2eproto.base,
  &scc_info_RoutingResponse_message_2frouting_2fproto_2frouting_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_message_2frouting_2fproto_2frouting_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_message_2frouting_2fproto_2frouting_2eproto = {
  false, false, descriptor_table_protodef_message_2frouting_2fproto_2frouting_2eproto, "message/routing/proto/routing.proto", 1749,
  &descriptor_table_message_2frouting_2fproto_2frouting_2eproto_once, descriptor_table_message_2frouting_2fproto_2frouting_2eproto_sccs, descriptor_table_message_2frouting_2fproto_2frouting_2eproto_deps, 9, 5,
  schemas, file_default_instances, TableStruct_message_2frouting_2fproto_2frouting_2eproto::offsets,
  file_level_metadata_message_2frouting_2fproto_2frouting_2eproto, 9, file_level_enum_descriptors_message_2frouting_2fproto_2frouting_2eproto, file_level_service_descriptors_message_2frouting_2fproto_2frouting_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_message_2frouting_2fproto_2frouting_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_message_2frouting_2fproto_2frouting_2eproto)), true);
namespace civ {
namespace routing {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ParkingSpaceType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_message_2frouting_2fproto_2frouting_2eproto);
  return file_level_enum_descriptors_message_2frouting_2fproto_2frouting_2eproto[0];
}
bool ParkingSpaceType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DeadEndRoutingType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_message_2frouting_2fproto_2frouting_2eproto);
  return file_level_enum_descriptors_message_2frouting_2fproto_2frouting_2eproto[1];
}
bool DeadEndRoutingType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ChangeLaneType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_message_2frouting_2fproto_2frouting_2eproto);
  return file_level_enum_descriptors_message_2frouting_2fproto_2frouting_2eproto[2];
}
bool ChangeLaneType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class LaneWaypoint::_Internal {
 public:
  using HasBits = decltype(std::declval<LaneWaypoint>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_s(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::civ::common::PointENU& pose(const LaneWaypoint* msg);
  static void set_has_pose(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_heading(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::civ::common::PointENU&
LaneWaypoint::_Internal::pose(const LaneWaypoint* msg) {
  return *msg->pose_;
}
void LaneWaypoint::clear_pose() {
  if (pose_ != nullptr) pose_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
LaneWaypoint::LaneWaypoint(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:civ.routing.LaneWaypoint)
}
LaneWaypoint::LaneWaypoint(const LaneWaypoint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_id()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArena());
  }
  if (from._internal_has_pose()) {
    pose_ = new ::civ::common::PointENU(*from.pose_);
  } else {
    pose_ = nullptr;
  }
  ::memcpy(&s_, &from.s_,
    static_cast<size_t>(reinterpret_cast<char*>(&heading_) -
    reinterpret_cast<char*>(&s_)) + sizeof(heading_));
  // @@protoc_insertion_point(copy_constructor:civ.routing.LaneWaypoint)
}

void LaneWaypoint::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LaneWaypoint_message_2frouting_2fproto_2frouting_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&pose_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&heading_) -
      reinterpret_cast<char*>(&pose_)) + sizeof(heading_));
}

LaneWaypoint::~LaneWaypoint() {
  // @@protoc_insertion_point(destructor:civ.routing.LaneWaypoint)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LaneWaypoint::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete pose_;
}

void LaneWaypoint::ArenaDtor(void* object) {
  LaneWaypoint* _this = reinterpret_cast< LaneWaypoint* >(object);
  (void)_this;
}
void LaneWaypoint::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LaneWaypoint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LaneWaypoint& LaneWaypoint::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LaneWaypoint_message_2frouting_2fproto_2frouting_2eproto.base);
  return *internal_default_instance();
}


void LaneWaypoint::Clear() {
// @@protoc_insertion_point(message_clear_start:civ.routing.LaneWaypoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(pose_ != nullptr);
      pose_->Clear();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&s_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&heading_) -
        reinterpret_cast<char*>(&s_)) + sizeof(heading_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LaneWaypoint::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "civ.routing.LaneWaypoint.id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double s = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_s(&has_bits);
          s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional .civ.common.PointENU pose = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_pose(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double heading = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_heading(&has_bits);
          heading_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LaneWaypoint::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:civ.routing.LaneWaypoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "civ.routing.LaneWaypoint.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // optional double s = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_s(), target);
  }

  // optional .civ.common.PointENU pose = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::pose(this), target, stream);
  }

  // optional double heading = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_heading(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:civ.routing.LaneWaypoint)
  return target;
}

size_t LaneWaypoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:civ.routing.LaneWaypoint)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_id());
    }

    // optional .civ.common.PointENU pose = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *pose_);
    }

    // optional double s = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double heading = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LaneWaypoint::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:civ.routing.LaneWaypoint)
  GOOGLE_DCHECK_NE(&from, this);
  const LaneWaypoint* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LaneWaypoint>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:civ.routing.LaneWaypoint)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:civ.routing.LaneWaypoint)
    MergeFrom(*source);
  }
}

void LaneWaypoint::MergeFrom(const LaneWaypoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:civ.routing.LaneWaypoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_id(from._internal_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_pose()->::civ::common::PointENU::MergeFrom(from._internal_pose());
    }
    if (cached_has_bits & 0x00000004u) {
      s_ = from.s_;
    }
    if (cached_has_bits & 0x00000008u) {
      heading_ = from.heading_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LaneWaypoint::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:civ.routing.LaneWaypoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LaneWaypoint::CopyFrom(const LaneWaypoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:civ.routing.LaneWaypoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaneWaypoint::IsInitialized() const {
  return true;
}

void LaneWaypoint::InternalSwap(LaneWaypoint* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LaneWaypoint, heading_)
      + sizeof(LaneWaypoint::heading_)
      - PROTOBUF_FIELD_OFFSET(LaneWaypoint, pose_)>(
          reinterpret_cast<char*>(&pose_),
          reinterpret_cast<char*>(&other->pose_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LaneWaypoint::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class LaneSegment::_Internal {
 public:
  using HasBits = decltype(std::declval<LaneSegment>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_start_s(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_end_s(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

LaneSegment::LaneSegment(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:civ.routing.LaneSegment)
}
LaneSegment::LaneSegment(const LaneSegment& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_id()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArena());
  }
  ::memcpy(&start_s_, &from.start_s_,
    static_cast<size_t>(reinterpret_cast<char*>(&end_s_) -
    reinterpret_cast<char*>(&start_s_)) + sizeof(end_s_));
  // @@protoc_insertion_point(copy_constructor:civ.routing.LaneSegment)
}

void LaneSegment::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LaneSegment_message_2frouting_2fproto_2frouting_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&start_s_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&end_s_) -
      reinterpret_cast<char*>(&start_s_)) + sizeof(end_s_));
}

LaneSegment::~LaneSegment() {
  // @@protoc_insertion_point(destructor:civ.routing.LaneSegment)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LaneSegment::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LaneSegment::ArenaDtor(void* object) {
  LaneSegment* _this = reinterpret_cast< LaneSegment* >(object);
  (void)_this;
}
void LaneSegment::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LaneSegment::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LaneSegment& LaneSegment::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LaneSegment_message_2frouting_2fproto_2frouting_2eproto.base);
  return *internal_default_instance();
}


void LaneSegment::Clear() {
// @@protoc_insertion_point(message_clear_start:civ.routing.LaneSegment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    id_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&start_s_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&end_s_) -
        reinterpret_cast<char*>(&start_s_)) + sizeof(end_s_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LaneSegment::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "civ.routing.LaneSegment.id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double start_s = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_start_s(&has_bits);
          start_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double end_s = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_end_s(&has_bits);
          end_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LaneSegment::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:civ.routing.LaneSegment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "civ.routing.LaneSegment.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // optional double start_s = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_start_s(), target);
  }

  // optional double end_s = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_end_s(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:civ.routing.LaneSegment)
  return target;
}

size_t LaneSegment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:civ.routing.LaneSegment)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_id());
    }

    // optional double start_s = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double end_s = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LaneSegment::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:civ.routing.LaneSegment)
  GOOGLE_DCHECK_NE(&from, this);
  const LaneSegment* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LaneSegment>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:civ.routing.LaneSegment)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:civ.routing.LaneSegment)
    MergeFrom(*source);
  }
}

void LaneSegment::MergeFrom(const LaneSegment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:civ.routing.LaneSegment)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_id(from._internal_id());
    }
    if (cached_has_bits & 0x00000002u) {
      start_s_ = from.start_s_;
    }
    if (cached_has_bits & 0x00000004u) {
      end_s_ = from.end_s_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LaneSegment::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:civ.routing.LaneSegment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LaneSegment::CopyFrom(const LaneSegment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:civ.routing.LaneSegment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaneSegment::IsInitialized() const {
  return true;
}

void LaneSegment::InternalSwap(LaneSegment* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LaneSegment, end_s_)
      + sizeof(LaneSegment::end_s_)
      - PROTOBUF_FIELD_OFFSET(LaneSegment, start_s_)>(
          reinterpret_cast<char*>(&start_s_),
          reinterpret_cast<char*>(&other->start_s_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LaneSegment::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ParkingInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<ParkingInfo>()._has_bits_);
  static void set_has_parking_space_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::civ::common::PointENU& parking_point(const ParkingInfo* msg);
  static void set_has_parking_point(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_parking_space_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::civ::hdmap::Polygon& corner_point(const ParkingInfo* msg);
  static void set_has_corner_point(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::civ::common::PointENU&
ParkingInfo::_Internal::parking_point(const ParkingInfo* msg) {
  return *msg->parking_point_;
}
const ::civ::hdmap::Polygon&
ParkingInfo::_Internal::corner_point(const ParkingInfo* msg) {
  return *msg->corner_point_;
}
void ParkingInfo::clear_parking_point() {
  if (parking_point_ != nullptr) parking_point_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void ParkingInfo::clear_corner_point() {
  if (corner_point_ != nullptr) corner_point_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
ParkingInfo::ParkingInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:civ.routing.ParkingInfo)
}
ParkingInfo::ParkingInfo(const ParkingInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  parking_space_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_parking_space_id()) {
    parking_space_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_parking_space_id(), 
      GetArena());
  }
  if (from._internal_has_parking_point()) {
    parking_point_ = new ::civ::common::PointENU(*from.parking_point_);
  } else {
    parking_point_ = nullptr;
  }
  if (from._internal_has_corner_point()) {
    corner_point_ = new ::civ::hdmap::Polygon(*from.corner_point_);
  } else {
    corner_point_ = nullptr;
  }
  parking_space_type_ = from.parking_space_type_;
  // @@protoc_insertion_point(copy_constructor:civ.routing.ParkingInfo)
}

void ParkingInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ParkingInfo_message_2frouting_2fproto_2frouting_2eproto.base);
  parking_space_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&parking_point_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&parking_space_type_) -
      reinterpret_cast<char*>(&parking_point_)) + sizeof(parking_space_type_));
}

ParkingInfo::~ParkingInfo() {
  // @@protoc_insertion_point(destructor:civ.routing.ParkingInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ParkingInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  parking_space_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete parking_point_;
  if (this != internal_default_instance()) delete corner_point_;
}

void ParkingInfo::ArenaDtor(void* object) {
  ParkingInfo* _this = reinterpret_cast< ParkingInfo* >(object);
  (void)_this;
}
void ParkingInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ParkingInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ParkingInfo& ParkingInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ParkingInfo_message_2frouting_2fproto_2frouting_2eproto.base);
  return *internal_default_instance();
}


void ParkingInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:civ.routing.ParkingInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      parking_space_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(parking_point_ != nullptr);
      parking_point_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(corner_point_ != nullptr);
      corner_point_->Clear();
    }
  }
  parking_space_type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ParkingInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string parking_space_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_parking_space_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "civ.routing.ParkingInfo.parking_space_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .civ.common.PointENU parking_point = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_parking_point(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .civ.routing.ParkingSpaceType parking_space_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::civ::routing::ParkingSpaceType_IsValid(val))) {
            _internal_set_parking_space_type(static_cast<::civ::routing::ParkingSpaceType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .civ.hdmap.Polygon corner_point = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_corner_point(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ParkingInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:civ.routing.ParkingInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string parking_space_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_parking_space_id().data(), static_cast<int>(this->_internal_parking_space_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "civ.routing.ParkingInfo.parking_space_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_parking_space_id(), target);
  }

  // optional .civ.common.PointENU parking_point = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::parking_point(this), target, stream);
  }

  // optional .civ.routing.ParkingSpaceType parking_space_type = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_parking_space_type(), target);
  }

  // optional .civ.hdmap.Polygon corner_point = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::corner_point(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:civ.routing.ParkingInfo)
  return target;
}

size_t ParkingInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:civ.routing.ParkingInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string parking_space_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_parking_space_id());
    }

    // optional .civ.common.PointENU parking_point = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *parking_point_);
    }

    // optional .civ.hdmap.Polygon corner_point = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *corner_point_);
    }

    // optional .civ.routing.ParkingSpaceType parking_space_type = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_parking_space_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ParkingInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:civ.routing.ParkingInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ParkingInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ParkingInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:civ.routing.ParkingInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:civ.routing.ParkingInfo)
    MergeFrom(*source);
  }
}

void ParkingInfo::MergeFrom(const ParkingInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:civ.routing.ParkingInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_parking_space_id(from._internal_parking_space_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_parking_point()->::civ::common::PointENU::MergeFrom(from._internal_parking_point());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_corner_point()->::civ::hdmap::Polygon::MergeFrom(from._internal_corner_point());
    }
    if (cached_has_bits & 0x00000008u) {
      parking_space_type_ = from.parking_space_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ParkingInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:civ.routing.ParkingInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ParkingInfo::CopyFrom(const ParkingInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:civ.routing.ParkingInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ParkingInfo::IsInitialized() const {
  return true;
}

void ParkingInfo::InternalSwap(ParkingInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  parking_space_id_.Swap(&other->parking_space_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ParkingInfo, parking_space_type_)
      + sizeof(ParkingInfo::parking_space_type_)
      - PROTOBUF_FIELD_OFFSET(ParkingInfo, parking_point_)>(
          reinterpret_cast<char*>(&parking_point_),
          reinterpret_cast<char*>(&other->parking_point_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ParkingInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class DeadEndInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<DeadEndInfo>()._has_bits_);
  static void set_has_dead_end_routing_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::civ::common::PointENU& target_point(const DeadEndInfo* msg);
  static void set_has_target_point(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::civ::common::PointENU&
DeadEndInfo::_Internal::target_point(const DeadEndInfo* msg) {
  return *msg->target_point_;
}
void DeadEndInfo::clear_target_point() {
  if (target_point_ != nullptr) target_point_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
DeadEndInfo::DeadEndInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:civ.routing.DeadEndInfo)
}
DeadEndInfo::DeadEndInfo(const DeadEndInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_target_point()) {
    target_point_ = new ::civ::common::PointENU(*from.target_point_);
  } else {
    target_point_ = nullptr;
  }
  dead_end_routing_type_ = from.dead_end_routing_type_;
  // @@protoc_insertion_point(copy_constructor:civ.routing.DeadEndInfo)
}

void DeadEndInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeadEndInfo_message_2frouting_2fproto_2frouting_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&target_point_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&dead_end_routing_type_) -
      reinterpret_cast<char*>(&target_point_)) + sizeof(dead_end_routing_type_));
}

DeadEndInfo::~DeadEndInfo() {
  // @@protoc_insertion_point(destructor:civ.routing.DeadEndInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DeadEndInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete target_point_;
}

void DeadEndInfo::ArenaDtor(void* object) {
  DeadEndInfo* _this = reinterpret_cast< DeadEndInfo* >(object);
  (void)_this;
}
void DeadEndInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeadEndInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeadEndInfo& DeadEndInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeadEndInfo_message_2frouting_2fproto_2frouting_2eproto.base);
  return *internal_default_instance();
}


void DeadEndInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:civ.routing.DeadEndInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(target_point_ != nullptr);
    target_point_->Clear();
  }
  dead_end_routing_type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeadEndInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .civ.routing.DeadEndRoutingType dead_end_routing_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::civ::routing::DeadEndRoutingType_IsValid(val))) {
            _internal_set_dead_end_routing_type(static_cast<::civ::routing::DeadEndRoutingType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .civ.common.PointENU target_point = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_target_point(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeadEndInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:civ.routing.DeadEndInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .civ.routing.DeadEndRoutingType dead_end_routing_type = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_dead_end_routing_type(), target);
  }

  // optional .civ.common.PointENU target_point = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::target_point(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:civ.routing.DeadEndInfo)
  return target;
}

size_t DeadEndInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:civ.routing.DeadEndInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .civ.common.PointENU target_point = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *target_point_);
    }

    // optional .civ.routing.DeadEndRoutingType dead_end_routing_type = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_dead_end_routing_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeadEndInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:civ.routing.DeadEndInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const DeadEndInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeadEndInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:civ.routing.DeadEndInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:civ.routing.DeadEndInfo)
    MergeFrom(*source);
  }
}

void DeadEndInfo::MergeFrom(const DeadEndInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:civ.routing.DeadEndInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_target_point()->::civ::common::PointENU::MergeFrom(from._internal_target_point());
    }
    if (cached_has_bits & 0x00000002u) {
      dead_end_routing_type_ = from.dead_end_routing_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DeadEndInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:civ.routing.DeadEndInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeadEndInfo::CopyFrom(const DeadEndInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:civ.routing.DeadEndInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeadEndInfo::IsInitialized() const {
  return true;
}

void DeadEndInfo::InternalSwap(DeadEndInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DeadEndInfo, dead_end_routing_type_)
      + sizeof(DeadEndInfo::dead_end_routing_type_)
      - PROTOBUF_FIELD_OFFSET(DeadEndInfo, target_point_)>(
          reinterpret_cast<char*>(&target_point_),
          reinterpret_cast<char*>(&other->target_point_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DeadEndInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class RoutingRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<RoutingRequest>()._has_bits_);
  static const ::civ::common::Header& header(const RoutingRequest* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_broadcast(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::civ::hdmap::ParkingSpace& parking_space(const RoutingRequest* msg);
  static void set_has_parking_space(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::civ::routing::ParkingInfo& parking_info(const RoutingRequest* msg);
  static void set_has_parking_info(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::civ::routing::DeadEndInfo& dead_end_info(const RoutingRequest* msg);
  static void set_has_dead_end_info(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::civ::common::Header&
RoutingRequest::_Internal::header(const RoutingRequest* msg) {
  return *msg->header_;
}
const ::civ::hdmap::ParkingSpace&
RoutingRequest::_Internal::parking_space(const RoutingRequest* msg) {
  return *msg->parking_space_;
}
const ::civ::routing::ParkingInfo&
RoutingRequest::_Internal::parking_info(const RoutingRequest* msg) {
  return *msg->parking_info_;
}
const ::civ::routing::DeadEndInfo&
RoutingRequest::_Internal::dead_end_info(const RoutingRequest* msg) {
  return *msg->dead_end_info_;
}
void RoutingRequest::clear_header() {
  if (header_ != nullptr) header_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void RoutingRequest::clear_parking_space() {
  if (parking_space_ != nullptr) parking_space_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
RoutingRequest::RoutingRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  waypoint_(arena),
  blacklisted_lane_(arena),
  blacklisted_road_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:civ.routing.RoutingRequest)
}
RoutingRequest::RoutingRequest(const RoutingRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      waypoint_(from.waypoint_),
      blacklisted_lane_(from.blacklisted_lane_),
      blacklisted_road_(from.blacklisted_road_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::civ::common::Header(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_parking_space()) {
    parking_space_ = new ::civ::hdmap::ParkingSpace(*from.parking_space_);
  } else {
    parking_space_ = nullptr;
  }
  if (from._internal_has_parking_info()) {
    parking_info_ = new ::civ::routing::ParkingInfo(*from.parking_info_);
  } else {
    parking_info_ = nullptr;
  }
  if (from._internal_has_dead_end_info()) {
    dead_end_info_ = new ::civ::routing::DeadEndInfo(*from.dead_end_info_);
  } else {
    dead_end_info_ = nullptr;
  }
  broadcast_ = from.broadcast_;
  // @@protoc_insertion_point(copy_constructor:civ.routing.RoutingRequest)
}

void RoutingRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RoutingRequest_message_2frouting_2fproto_2frouting_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&header_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&dead_end_info_) -
      reinterpret_cast<char*>(&header_)) + sizeof(dead_end_info_));
  broadcast_ = true;
}

RoutingRequest::~RoutingRequest() {
  // @@protoc_insertion_point(destructor:civ.routing.RoutingRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RoutingRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete parking_space_;
  if (this != internal_default_instance()) delete parking_info_;
  if (this != internal_default_instance()) delete dead_end_info_;
}

void RoutingRequest::ArenaDtor(void* object) {
  RoutingRequest* _this = reinterpret_cast< RoutingRequest* >(object);
  (void)_this;
}
void RoutingRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RoutingRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RoutingRequest& RoutingRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RoutingRequest_message_2frouting_2fproto_2frouting_2eproto.base);
  return *internal_default_instance();
}


void RoutingRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:civ.routing.RoutingRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  waypoint_.Clear();
  blacklisted_lane_.Clear();
  blacklisted_road_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(header_ != nullptr);
      header_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(parking_space_ != nullptr);
      parking_space_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(parking_info_ != nullptr);
      parking_info_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(dead_end_info_ != nullptr);
      dead_end_info_->Clear();
    }
    broadcast_ = true;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoutingRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .civ.common.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .civ.routing.LaneWaypoint waypoint = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_waypoint(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .civ.routing.LaneSegment blacklisted_lane = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_blacklisted_lane(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string blacklisted_road = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_blacklisted_road();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "civ.routing.RoutingRequest.blacklisted_road");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // optional bool broadcast = 5 [default = true];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_broadcast(&has_bits);
          broadcast_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .civ.hdmap.ParkingSpace parking_space = 6 [deprecated = true];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_parking_space(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .civ.routing.ParkingInfo parking_info = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_parking_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .civ.routing.DeadEndInfo dead_end_info = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_dead_end_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RoutingRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:civ.routing.RoutingRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .civ.common.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // repeated .civ.routing.LaneWaypoint waypoint = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_waypoint_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_waypoint(i), target, stream);
  }

  // repeated .civ.routing.LaneSegment blacklisted_lane = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_blacklisted_lane_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_blacklisted_lane(i), target, stream);
  }

  // repeated string blacklisted_road = 4;
  for (int i = 0, n = this->_internal_blacklisted_road_size(); i < n; i++) {
    const auto& s = this->_internal_blacklisted_road(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "civ.routing.RoutingRequest.blacklisted_road");
    target = stream->WriteString(4, s, target);
  }

  // optional bool broadcast = 5 [default = true];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_broadcast(), target);
  }

  // optional .civ.hdmap.ParkingSpace parking_space = 6 [deprecated = true];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::parking_space(this), target, stream);
  }

  // optional .civ.routing.ParkingInfo parking_info = 7;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::parking_info(this), target, stream);
  }

  // optional .civ.routing.DeadEndInfo dead_end_info = 8;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::dead_end_info(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:civ.routing.RoutingRequest)
  return target;
}

size_t RoutingRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:civ.routing.RoutingRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .civ.routing.LaneWaypoint waypoint = 2;
  total_size += 1UL * this->_internal_waypoint_size();
  for (const auto& msg : this->waypoint_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .civ.routing.LaneSegment blacklisted_lane = 3;
  total_size += 1UL * this->_internal_blacklisted_lane_size();
  for (const auto& msg : this->blacklisted_lane_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string blacklisted_road = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(blacklisted_road_.size());
  for (int i = 0, n = blacklisted_road_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      blacklisted_road_.Get(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .civ.common.Header header = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *header_);
    }

    // optional .civ.hdmap.ParkingSpace parking_space = 6 [deprecated = true];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *parking_space_);
    }

    // optional .civ.routing.ParkingInfo parking_info = 7;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *parking_info_);
    }

    // optional .civ.routing.DeadEndInfo dead_end_info = 8;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *dead_end_info_);
    }

    // optional bool broadcast = 5 [default = true];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RoutingRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:civ.routing.RoutingRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const RoutingRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RoutingRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:civ.routing.RoutingRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:civ.routing.RoutingRequest)
    MergeFrom(*source);
  }
}

void RoutingRequest::MergeFrom(const RoutingRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:civ.routing.RoutingRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  waypoint_.MergeFrom(from.waypoint_);
  blacklisted_lane_.MergeFrom(from.blacklisted_lane_);
  blacklisted_road_.MergeFrom(from.blacklisted_road_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_header()->::civ::common::Header::MergeFrom(from._internal_header());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_parking_space()->::civ::hdmap::ParkingSpace::MergeFrom(from._internal_parking_space());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_parking_info()->::civ::routing::ParkingInfo::MergeFrom(from._internal_parking_info());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_dead_end_info()->::civ::routing::DeadEndInfo::MergeFrom(from._internal_dead_end_info());
    }
    if (cached_has_bits & 0x00000010u) {
      broadcast_ = from.broadcast_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RoutingRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:civ.routing.RoutingRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoutingRequest::CopyFrom(const RoutingRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:civ.routing.RoutingRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoutingRequest::IsInitialized() const {
  return true;
}

void RoutingRequest::InternalSwap(RoutingRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  waypoint_.InternalSwap(&other->waypoint_);
  blacklisted_lane_.InternalSwap(&other->blacklisted_lane_);
  blacklisted_road_.InternalSwap(&other->blacklisted_road_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RoutingRequest, dead_end_info_)
      + sizeof(RoutingRequest::dead_end_info_)
      - PROTOBUF_FIELD_OFFSET(RoutingRequest, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
  swap(broadcast_, other->broadcast_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RoutingRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Measurement::_Internal {
 public:
  using HasBits = decltype(std::declval<Measurement>()._has_bits_);
  static void set_has_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Measurement::Measurement(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:civ.routing.Measurement)
}
Measurement::Measurement(const Measurement& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  distance_ = from.distance_;
  // @@protoc_insertion_point(copy_constructor:civ.routing.Measurement)
}

void Measurement::SharedCtor() {
  distance_ = 0;
}

Measurement::~Measurement() {
  // @@protoc_insertion_point(destructor:civ.routing.Measurement)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Measurement::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Measurement::ArenaDtor(void* object) {
  Measurement* _this = reinterpret_cast< Measurement* >(object);
  (void)_this;
}
void Measurement::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Measurement::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Measurement& Measurement::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Measurement_message_2frouting_2fproto_2frouting_2eproto.base);
  return *internal_default_instance();
}


void Measurement::Clear() {
// @@protoc_insertion_point(message_clear_start:civ.routing.Measurement)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  distance_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Measurement::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional double distance = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_distance(&has_bits);
          distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Measurement::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:civ.routing.Measurement)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double distance = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_distance(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:civ.routing.Measurement)
  return target;
}

size_t Measurement::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:civ.routing.Measurement)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional double distance = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Measurement::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:civ.routing.Measurement)
  GOOGLE_DCHECK_NE(&from, this);
  const Measurement* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Measurement>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:civ.routing.Measurement)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:civ.routing.Measurement)
    MergeFrom(*source);
  }
}

void Measurement::MergeFrom(const Measurement& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:civ.routing.Measurement)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_distance()) {
    _internal_set_distance(from._internal_distance());
  }
}

void Measurement::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:civ.routing.Measurement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Measurement::CopyFrom(const Measurement& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:civ.routing.Measurement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Measurement::IsInitialized() const {
  return true;
}

void Measurement::InternalSwap(Measurement* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(distance_, other->distance_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Measurement::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Passage::_Internal {
 public:
  using HasBits = decltype(std::declval<Passage>()._has_bits_);
  static void set_has_can_exit(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_change_lane_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Passage::Passage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  segment_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:civ.routing.Passage)
}
Passage::Passage(const Passage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      segment_(from.segment_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&can_exit_, &from.can_exit_,
    static_cast<size_t>(reinterpret_cast<char*>(&change_lane_type_) -
    reinterpret_cast<char*>(&can_exit_)) + sizeof(change_lane_type_));
  // @@protoc_insertion_point(copy_constructor:civ.routing.Passage)
}

void Passage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Passage_message_2frouting_2fproto_2frouting_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&can_exit_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&change_lane_type_) -
      reinterpret_cast<char*>(&can_exit_)) + sizeof(change_lane_type_));
}

Passage::~Passage() {
  // @@protoc_insertion_point(destructor:civ.routing.Passage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Passage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Passage::ArenaDtor(void* object) {
  Passage* _this = reinterpret_cast< Passage* >(object);
  (void)_this;
}
void Passage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Passage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Passage& Passage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Passage_message_2frouting_2fproto_2frouting_2eproto.base);
  return *internal_default_instance();
}


void Passage::Clear() {
// @@protoc_insertion_point(message_clear_start:civ.routing.Passage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  segment_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&can_exit_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&change_lane_type_) -
        reinterpret_cast<char*>(&can_exit_)) + sizeof(change_lane_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Passage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .civ.routing.LaneSegment segment = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_segment(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // optional bool can_exit = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_can_exit(&has_bits);
          can_exit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .civ.routing.ChangeLaneType change_lane_type = 3 [default = FORWARD];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::civ::routing::ChangeLaneType_IsValid(val))) {
            _internal_set_change_lane_type(static_cast<::civ::routing::ChangeLaneType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Passage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:civ.routing.Passage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .civ.routing.LaneSegment segment = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_segment_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_segment(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool can_exit = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_can_exit(), target);
  }

  // optional .civ.routing.ChangeLaneType change_lane_type = 3 [default = FORWARD];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_change_lane_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:civ.routing.Passage)
  return target;
}

size_t Passage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:civ.routing.Passage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .civ.routing.LaneSegment segment = 1;
  total_size += 1UL * this->_internal_segment_size();
  for (const auto& msg : this->segment_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bool can_exit = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional .civ.routing.ChangeLaneType change_lane_type = 3 [default = FORWARD];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_change_lane_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Passage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:civ.routing.Passage)
  GOOGLE_DCHECK_NE(&from, this);
  const Passage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Passage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:civ.routing.Passage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:civ.routing.Passage)
    MergeFrom(*source);
  }
}

void Passage::MergeFrom(const Passage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:civ.routing.Passage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  segment_.MergeFrom(from.segment_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      can_exit_ = from.can_exit_;
    }
    if (cached_has_bits & 0x00000002u) {
      change_lane_type_ = from.change_lane_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Passage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:civ.routing.Passage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Passage::CopyFrom(const Passage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:civ.routing.Passage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Passage::IsInitialized() const {
  return true;
}

void Passage::InternalSwap(Passage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  segment_.InternalSwap(&other->segment_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Passage, change_lane_type_)
      + sizeof(Passage::change_lane_type_)
      - PROTOBUF_FIELD_OFFSET(Passage, can_exit_)>(
          reinterpret_cast<char*>(&can_exit_),
          reinterpret_cast<char*>(&other->can_exit_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Passage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class RoadSegment::_Internal {
 public:
  using HasBits = decltype(std::declval<RoadSegment>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

RoadSegment::RoadSegment(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  passage_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:civ.routing.RoadSegment)
}
RoadSegment::RoadSegment(const RoadSegment& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      passage_(from.passage_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_id()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:civ.routing.RoadSegment)
}

void RoadSegment::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RoadSegment_message_2frouting_2fproto_2frouting_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

RoadSegment::~RoadSegment() {
  // @@protoc_insertion_point(destructor:civ.routing.RoadSegment)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RoadSegment::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RoadSegment::ArenaDtor(void* object) {
  RoadSegment* _this = reinterpret_cast< RoadSegment* >(object);
  (void)_this;
}
void RoadSegment::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RoadSegment::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RoadSegment& RoadSegment::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RoadSegment_message_2frouting_2fproto_2frouting_2eproto.base);
  return *internal_default_instance();
}


void RoadSegment::Clear() {
// @@protoc_insertion_point(message_clear_start:civ.routing.RoadSegment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  passage_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    id_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoadSegment::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "civ.routing.RoadSegment.id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .civ.routing.Passage passage = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_passage(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RoadSegment::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:civ.routing.RoadSegment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "civ.routing.RoadSegment.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // repeated .civ.routing.Passage passage = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_passage_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_passage(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:civ.routing.RoadSegment)
  return target;
}

size_t RoadSegment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:civ.routing.RoadSegment)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .civ.routing.Passage passage = 2;
  total_size += 1UL * this->_internal_passage_size();
  for (const auto& msg : this->passage_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional string id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RoadSegment::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:civ.routing.RoadSegment)
  GOOGLE_DCHECK_NE(&from, this);
  const RoadSegment* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RoadSegment>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:civ.routing.RoadSegment)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:civ.routing.RoadSegment)
    MergeFrom(*source);
  }
}

void RoadSegment::MergeFrom(const RoadSegment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:civ.routing.RoadSegment)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  passage_.MergeFrom(from.passage_);
  if (from._internal_has_id()) {
    _internal_set_id(from._internal_id());
  }
}

void RoadSegment::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:civ.routing.RoadSegment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoadSegment::CopyFrom(const RoadSegment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:civ.routing.RoadSegment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoadSegment::IsInitialized() const {
  return true;
}

void RoadSegment::InternalSwap(RoadSegment* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  passage_.InternalSwap(&other->passage_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata RoadSegment::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class RoutingResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<RoutingResponse>()._has_bits_);
  static const ::civ::common::Header& header(const RoutingResponse* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::civ::routing::Measurement& measurement(const RoutingResponse* msg);
  static void set_has_measurement(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::civ::routing::RoutingRequest& routing_request(const RoutingResponse* msg);
  static void set_has_routing_request(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_map_version(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::civ::common::StatusPb& status(const RoutingResponse* msg);
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_haha(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

const ::civ::common::Header&
RoutingResponse::_Internal::header(const RoutingResponse* msg) {
  return *msg->header_;
}
const ::civ::routing::Measurement&
RoutingResponse::_Internal::measurement(const RoutingResponse* msg) {
  return *msg->measurement_;
}
const ::civ::routing::RoutingRequest&
RoutingResponse::_Internal::routing_request(const RoutingResponse* msg) {
  return *msg->routing_request_;
}
const ::civ::common::StatusPb&
RoutingResponse::_Internal::status(const RoutingResponse* msg) {
  return *msg->status_;
}
void RoutingResponse::clear_header() {
  if (header_ != nullptr) header_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void RoutingResponse::clear_status() {
  if (status_ != nullptr) status_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
RoutingResponse::RoutingResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  road_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:civ.routing.RoutingResponse)
}
RoutingResponse::RoutingResponse(const RoutingResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      road_(from.road_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  map_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_map_version()) {
    map_version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_map_version(), 
      GetArena());
  }
  if (from._internal_has_header()) {
    header_ = new ::civ::common::Header(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_measurement()) {
    measurement_ = new ::civ::routing::Measurement(*from.measurement_);
  } else {
    measurement_ = nullptr;
  }
  if (from._internal_has_routing_request()) {
    routing_request_ = new ::civ::routing::RoutingRequest(*from.routing_request_);
  } else {
    routing_request_ = nullptr;
  }
  if (from._internal_has_status()) {
    status_ = new ::civ::common::StatusPb(*from.status_);
  } else {
    status_ = nullptr;
  }
  haha_ = from.haha_;
  // @@protoc_insertion_point(copy_constructor:civ.routing.RoutingResponse)
}

void RoutingResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RoutingResponse_message_2frouting_2fproto_2frouting_2eproto.base);
  map_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&header_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&haha_) -
      reinterpret_cast<char*>(&header_)) + sizeof(haha_));
}

RoutingResponse::~RoutingResponse() {
  // @@protoc_insertion_point(destructor:civ.routing.RoutingResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RoutingResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  map_version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete measurement_;
  if (this != internal_default_instance()) delete routing_request_;
  if (this != internal_default_instance()) delete status_;
}

void RoutingResponse::ArenaDtor(void* object) {
  RoutingResponse* _this = reinterpret_cast< RoutingResponse* >(object);
  (void)_this;
}
void RoutingResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RoutingResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RoutingResponse& RoutingResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RoutingResponse_message_2frouting_2fproto_2frouting_2eproto.base);
  return *internal_default_instance();
}


void RoutingResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:civ.routing.RoutingResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  road_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      map_version_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(header_ != nullptr);
      header_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(measurement_ != nullptr);
      measurement_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(routing_request_ != nullptr);
      routing_request_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(status_ != nullptr);
      status_->Clear();
    }
  }
  haha_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoutingResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .civ.common.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .civ.routing.RoadSegment road = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_road(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .civ.routing.Measurement measurement = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_measurement(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .civ.routing.RoutingRequest routing_request = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_routing_request(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes map_version = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_map_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .civ.common.StatusPb status = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double haha = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          _Internal::set_has_haha(&has_bits);
          haha_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RoutingResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:civ.routing.RoutingResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .civ.common.Header header = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // repeated .civ.routing.RoadSegment road = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_road_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_road(i), target, stream);
  }

  // optional .civ.routing.Measurement measurement = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::measurement(this), target, stream);
  }

  // optional .civ.routing.RoutingRequest routing_request = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::routing_request(this), target, stream);
  }

  // optional bytes map_version = 5;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_map_version(), target);
  }

  // optional .civ.common.StatusPb status = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::status(this), target, stream);
  }

  // optional double haha = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_haha(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:civ.routing.RoutingResponse)
  return target;
}

size_t RoutingResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:civ.routing.RoutingResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .civ.routing.RoadSegment road = 2;
  total_size += 1UL * this->_internal_road_size();
  for (const auto& msg : this->road_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional bytes map_version = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_map_version());
    }

    // optional .civ.common.Header header = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *header_);
    }

    // optional .civ.routing.Measurement measurement = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *measurement_);
    }

    // optional .civ.routing.RoutingRequest routing_request = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *routing_request_);
    }

    // optional .civ.common.StatusPb status = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *status_);
    }

    // optional double haha = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RoutingResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:civ.routing.RoutingResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const RoutingResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RoutingResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:civ.routing.RoutingResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:civ.routing.RoutingResponse)
    MergeFrom(*source);
  }
}

void RoutingResponse::MergeFrom(const RoutingResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:civ.routing.RoutingResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  road_.MergeFrom(from.road_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_map_version(from._internal_map_version());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_header()->::civ::common::Header::MergeFrom(from._internal_header());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_measurement()->::civ::routing::Measurement::MergeFrom(from._internal_measurement());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_routing_request()->::civ::routing::RoutingRequest::MergeFrom(from._internal_routing_request());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_status()->::civ::common::StatusPb::MergeFrom(from._internal_status());
    }
    if (cached_has_bits & 0x00000020u) {
      haha_ = from.haha_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RoutingResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:civ.routing.RoutingResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoutingResponse::CopyFrom(const RoutingResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:civ.routing.RoutingResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoutingResponse::IsInitialized() const {
  return true;
}

void RoutingResponse::InternalSwap(RoutingResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  road_.InternalSwap(&other->road_);
  map_version_.Swap(&other->map_version_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RoutingResponse, haha_)
      + sizeof(RoutingResponse::haha_)
      - PROTOBUF_FIELD_OFFSET(RoutingResponse, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RoutingResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace routing
}  // namespace civ
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::civ::routing::LaneWaypoint* Arena::CreateMaybeMessage< ::civ::routing::LaneWaypoint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::civ::routing::LaneWaypoint >(arena);
}
template<> PROTOBUF_NOINLINE ::civ::routing::LaneSegment* Arena::CreateMaybeMessage< ::civ::routing::LaneSegment >(Arena* arena) {
  return Arena::CreateMessageInternal< ::civ::routing::LaneSegment >(arena);
}
template<> PROTOBUF_NOINLINE ::civ::routing::ParkingInfo* Arena::CreateMaybeMessage< ::civ::routing::ParkingInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::civ::routing::ParkingInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::civ::routing::DeadEndInfo* Arena::CreateMaybeMessage< ::civ::routing::DeadEndInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::civ::routing::DeadEndInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::civ::routing::RoutingRequest* Arena::CreateMaybeMessage< ::civ::routing::RoutingRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::civ::routing::RoutingRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::civ::routing::Measurement* Arena::CreateMaybeMessage< ::civ::routing::Measurement >(Arena* arena) {
  return Arena::CreateMessageInternal< ::civ::routing::Measurement >(arena);
}
template<> PROTOBUF_NOINLINE ::civ::routing::Passage* Arena::CreateMaybeMessage< ::civ::routing::Passage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::civ::routing::Passage >(arena);
}
template<> PROTOBUF_NOINLINE ::civ::routing::RoadSegment* Arena::CreateMaybeMessage< ::civ::routing::RoadSegment >(Arena* arena) {
  return Arena::CreateMessageInternal< ::civ::routing::RoadSegment >(arena);
}
template<> PROTOBUF_NOINLINE ::civ::routing::RoutingResponse* Arena::CreateMaybeMessage< ::civ::routing::RoutingResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::civ::routing::RoutingResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
