// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message/drivers/gnss/proto/raw_gnss.proto

#include "message/drivers/gnss/proto/raw_gnss.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_message_2fdrivers_2fgnss_2fproto_2fraw_5fgnss_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GnssHeader_message_2fdrivers_2fgnss_2fproto_2fraw_5fgnss_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_message_2fdrivers_2fgnss_2fproto_2fraw_5fgnss_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LogHeader_message_2fdrivers_2fgnss_2fproto_2fraw_5fgnss_2eproto;
namespace civ {
namespace drivers {
namespace rawgnss {
class LogHeaderDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LogHeader> _instance;
} _LogHeader_default_instance_;
class GnssHeaderDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GnssHeader> _instance;
} _GnssHeader_default_instance_;
class BestposDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Bestpos> _instance;
} _Bestpos_default_instance_;
class GNGGADefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GNGGA> _instance;
} _GNGGA_default_instance_;
class GNVTGDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GNVTG> _instance;
} _GNVTG_default_instance_;
class Heading2DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Heading2> _instance;
} _Heading2_default_instance_;
class RawImuDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RawImu> _instance;
} _RawImu_default_instance_;
class BestVelDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BestVel> _instance;
} _BestVel_default_instance_;
class InspVaxDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InspVax> _instance;
} _InspVax_default_instance_;
}  // namespace rawgnss
}  // namespace drivers
}  // namespace civ
static void InitDefaultsscc_info_BestVel_message_2fdrivers_2fgnss_2fproto_2fraw_5fgnss_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::civ::drivers::rawgnss::_BestVel_default_instance_;
    new (ptr) ::civ::drivers::rawgnss::BestVel();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BestVel_message_2fdrivers_2fgnss_2fproto_2fraw_5fgnss_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_BestVel_message_2fdrivers_2fgnss_2fproto_2fraw_5fgnss_2eproto}, {
      &scc_info_GnssHeader_message_2fdrivers_2fgnss_2fproto_2fraw_5fgnss_2eproto.base,}};

static void InitDefaultsscc_info_Bestpos_message_2fdrivers_2fgnss_2fproto_2fraw_5fgnss_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::civ::drivers::rawgnss::_Bestpos_default_instance_;
    new (ptr) ::civ::drivers::rawgnss::Bestpos();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Bestpos_message_2fdrivers_2fgnss_2fproto_2fraw_5fgnss_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Bestpos_message_2fdrivers_2fgnss_2fproto_2fraw_5fgnss_2eproto}, {
      &scc_info_GnssHeader_message_2fdrivers_2fgnss_2fproto_2fraw_5fgnss_2eproto.base,}};

static void InitDefaultsscc_info_GNGGA_message_2fdrivers_2fgnss_2fproto_2fraw_5fgnss_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::civ::drivers::rawgnss::_GNGGA_default_instance_;
    new (ptr) ::civ::drivers::rawgnss::GNGGA();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GNGGA_message_2fdrivers_2fgnss_2fproto_2fraw_5fgnss_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GNGGA_message_2fdrivers_2fgnss_2fproto_2fraw_5fgnss_2eproto}, {
      &scc_info_LogHeader_message_2fdrivers_2fgnss_2fproto_2fraw_5fgnss_2eproto.base,}};

static void InitDefaultsscc_info_GNVTG_message_2fdrivers_2fgnss_2fproto_2fraw_5fgnss_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::civ::drivers::rawgnss::_GNVTG_default_instance_;
    new (ptr) ::civ::drivers::rawgnss::GNVTG();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GNVTG_message_2fdrivers_2fgnss_2fproto_2fraw_5fgnss_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GNVTG_message_2fdrivers_2fgnss_2fproto_2fraw_5fgnss_2eproto}, {
      &scc_info_LogHeader_message_2fdrivers_2fgnss_2fproto_2fraw_5fgnss_2eproto.base,}};

static void InitDefaultsscc_info_GnssHeader_message_2fdrivers_2fgnss_2fproto_2fraw_5fgnss_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::civ::drivers::rawgnss::_GnssHeader_default_instance_;
    new (ptr) ::civ::drivers::rawgnss::GnssHeader();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GnssHeader_message_2fdrivers_2fgnss_2fproto_2fraw_5fgnss_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GnssHeader_message_2fdrivers_2fgnss_2fproto_2fraw_5fgnss_2eproto}, {
      &scc_info_LogHeader_message_2fdrivers_2fgnss_2fproto_2fraw_5fgnss_2eproto.base,}};

static void InitDefaultsscc_info_Heading2_message_2fdrivers_2fgnss_2fproto_2fraw_5fgnss_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::civ::drivers::rawgnss::_Heading2_default_instance_;
    new (ptr) ::civ::drivers::rawgnss::Heading2();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Heading2_message_2fdrivers_2fgnss_2fproto_2fraw_5fgnss_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Heading2_message_2fdrivers_2fgnss_2fproto_2fraw_5fgnss_2eproto}, {
      &scc_info_GnssHeader_message_2fdrivers_2fgnss_2fproto_2fraw_5fgnss_2eproto.base,}};

static void InitDefaultsscc_info_InspVax_message_2fdrivers_2fgnss_2fproto_2fraw_5fgnss_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::civ::drivers::rawgnss::_InspVax_default_instance_;
    new (ptr) ::civ::drivers::rawgnss::InspVax();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_InspVax_message_2fdrivers_2fgnss_2fproto_2fraw_5fgnss_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_InspVax_message_2fdrivers_2fgnss_2fproto_2fraw_5fgnss_2eproto}, {
      &scc_info_GnssHeader_message_2fdrivers_2fgnss_2fproto_2fraw_5fgnss_2eproto.base,}};

static void InitDefaultsscc_info_LogHeader_message_2fdrivers_2fgnss_2fproto_2fraw_5fgnss_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::civ::drivers::rawgnss::_LogHeader_default_instance_;
    new (ptr) ::civ::drivers::rawgnss::LogHeader();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LogHeader_message_2fdrivers_2fgnss_2fproto_2fraw_5fgnss_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LogHeader_message_2fdrivers_2fgnss_2fproto_2fraw_5fgnss_2eproto}, {}};

static void InitDefaultsscc_info_RawImu_message_2fdrivers_2fgnss_2fproto_2fraw_5fgnss_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::civ::drivers::rawgnss::_RawImu_default_instance_;
    new (ptr) ::civ::drivers::rawgnss::RawImu();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RawImu_message_2fdrivers_2fgnss_2fproto_2fraw_5fgnss_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_RawImu_message_2fdrivers_2fgnss_2fproto_2fraw_5fgnss_2eproto}, {
      &scc_info_GnssHeader_message_2fdrivers_2fgnss_2fproto_2fraw_5fgnss_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_message_2fdrivers_2fgnss_2fproto_2fraw_5fgnss_2eproto[9];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_message_2fdrivers_2fgnss_2fproto_2fraw_5fgnss_2eproto[9];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_message_2fdrivers_2fgnss_2fproto_2fraw_5fgnss_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_message_2fdrivers_2fgnss_2fproto_2fraw_5fgnss_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::civ::drivers::rawgnss::LogHeader, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::civ::drivers::rawgnss::LogHeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::civ::drivers::rawgnss::LogHeader, sync_),
  PROTOBUF_FIELD_OFFSET(::civ::drivers::rawgnss::LogHeader, name_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::civ::drivers::rawgnss::GnssHeader, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::civ::drivers::rawgnss::GnssHeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::civ::drivers::rawgnss::GnssHeader, log_header_),
  PROTOBUF_FIELD_OFFSET(::civ::drivers::rawgnss::GnssHeader, port_),
  PROTOBUF_FIELD_OFFSET(::civ::drivers::rawgnss::GnssHeader, sequence_),
  PROTOBUF_FIELD_OFFSET(::civ::drivers::rawgnss::GnssHeader, idle_time_),
  PROTOBUF_FIELD_OFFSET(::civ::drivers::rawgnss::GnssHeader, time_status_),
  PROTOBUF_FIELD_OFFSET(::civ::drivers::rawgnss::GnssHeader, week_num_),
  PROTOBUF_FIELD_OFFSET(::civ::drivers::rawgnss::GnssHeader, gps_seconds_),
  PROTOBUF_FIELD_OFFSET(::civ::drivers::rawgnss::GnssHeader, receiver_status_),
  PROTOBUF_FIELD_OFFSET(::civ::drivers::rawgnss::GnssHeader, reserved_),
  PROTOBUF_FIELD_OFFSET(::civ::drivers::rawgnss::GnssHeader, receiver_sw_version_),
  PROTOBUF_FIELD_OFFSET(::civ::drivers::rawgnss::GnssHeader, received_timestamp_),
  1,
  0,
  2,
  3,
  10,
  5,
  4,
  6,
  7,
  8,
  9,
  PROTOBUF_FIELD_OFFSET(::civ::drivers::rawgnss::Bestpos, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::civ::drivers::rawgnss::Bestpos, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::civ::drivers::rawgnss::Bestpos, gnss_header_),
  PROTOBUF_FIELD_OFFSET(::civ::drivers::rawgnss::Bestpos, solution_status_),
  PROTOBUF_FIELD_OFFSET(::civ::drivers::rawgnss::Bestpos, pos_type_),
  PROTOBUF_FIELD_OFFSET(::civ::drivers::rawgnss::Bestpos, latitude_in_degree_),
  PROTOBUF_FIELD_OFFSET(::civ::drivers::rawgnss::Bestpos, longitude_in_degree_),
  PROTOBUF_FIELD_OFFSET(::civ::drivers::rawgnss::Bestpos, height_in_metres_),
  PROTOBUF_FIELD_OFFSET(::civ::drivers::rawgnss::Bestpos, undulation_),
  PROTOBUF_FIELD_OFFSET(::civ::drivers::rawgnss::Bestpos, datum_id_),
  PROTOBUF_FIELD_OFFSET(::civ::drivers::rawgnss::Bestpos, latitude_std_dev_),
  PROTOBUF_FIELD_OFFSET(::civ::drivers::rawgnss::Bestpos, longitude_std_dev_),
  PROTOBUF_FIELD_OFFSET(::civ::drivers::rawgnss::Bestpos, height_std_dev_),
  PROTOBUF_FIELD_OFFSET(::civ::drivers::rawgnss::Bestpos, base_station_id_),
  PROTOBUF_FIELD_OFFSET(::civ::drivers::rawgnss::Bestpos, diff_age_in_seconds_),
  PROTOBUF_FIELD_OFFSET(::civ::drivers::rawgnss::Bestpos, solution_age_in_seconds_),
  PROTOBUF_FIELD_OFFSET(::civ::drivers::rawgnss::Bestpos, num_of_satellites_tracked_),
  PROTOBUF_FIELD_OFFSET(::civ::drivers::rawgnss::Bestpos, num_of_satellites_used_),
  PROTOBUF_FIELD_OFFSET(::civ::drivers::rawgnss::Bestpos, num_of_satellites_with_l1_e1_b1_),
  PROTOBUF_FIELD_OFFSET(::civ::drivers::rawgnss::Bestpos, num_of_satellites_with_multi_freq_),
  PROTOBUF_FIELD_OFFSET(::civ::drivers::rawgnss::Bestpos, reserved_),
  PROTOBUF_FIELD_OFFSET(::civ::drivers::rawgnss::Bestpos, extended_solution_status_),
  PROTOBUF_FIELD_OFFSET(::civ::drivers::rawgnss::Bestpos, galileo_beidou_sig_mask_),
  PROTOBUF_FIELD_OFFSET(::civ::drivers::rawgnss::Bestpos, gps_glonass_sig_mask_),
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  21,
  8,
  9,
  10,
  0,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  PROTOBUF_FIELD_OFFSET(::civ::drivers::rawgnss::GNGGA, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::civ::drivers::rawgnss::GNGGA, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::civ::drivers::rawgnss::GNGGA, log_header_),
  PROTOBUF_FIELD_OFFSET(::civ::drivers::rawgnss::GNGGA, utc_in_seconds_),
  PROTOBUF_FIELD_OFFSET(::civ::drivers::rawgnss::GNGGA, latitude_),
  PROTOBUF_FIELD_OFFSET(::civ::drivers::rawgnss::GNGGA, latitude_dir_),
  PROTOBUF_FIELD_OFFSET(::civ::drivers::rawgnss::GNGGA, longitude_),
  PROTOBUF_FIELD_OFFSET(::civ::drivers::rawgnss::GNGGA, longitude_dir_),
  PROTOBUF_FIELD_OFFSET(::civ::drivers::rawgnss::GNGGA, quality_),
  PROTOBUF_FIELD_OFFSET(::civ::drivers::rawgnss::GNGGA, num_of_satellites_used_),
  PROTOBUF_FIELD_OFFSET(::civ::drivers::rawgnss::GNGGA, hdop_),
  PROTOBUF_FIELD_OFFSET(::civ::drivers::rawgnss::GNGGA, alt_),
  PROTOBUF_FIELD_OFFSET(::civ::drivers::rawgnss::GNGGA, utc_hhmmss_),
  PROTOBUF_FIELD_OFFSET(::civ::drivers::rawgnss::GNGGA, latitude_deg_),
  PROTOBUF_FIELD_OFFSET(::civ::drivers::rawgnss::GNGGA, longitude_deg_),
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  0,
  11,
  12,
  PROTOBUF_FIELD_OFFSET(::civ::drivers::rawgnss::GNVTG, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::civ::drivers::rawgnss::GNVTG, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::civ::drivers::rawgnss::GNVTG, log_header_),
  PROTOBUF_FIELD_OFFSET(::civ::drivers::rawgnss::GNVTG, track_true_),
  PROTOBUF_FIELD_OFFSET(::civ::drivers::rawgnss::GNVTG, true_track_indicator_),
  PROTOBUF_FIELD_OFFSET(::civ::drivers::rawgnss::GNVTG, track_mag_),
  PROTOBUF_FIELD_OFFSET(::civ::drivers::rawgnss::GNVTG, magnetic_track_indicator_),
  PROTOBUF_FIELD_OFFSET(::civ::drivers::rawgnss::GNVTG, speed_kn_),
  PROTOBUF_FIELD_OFFSET(::civ::drivers::rawgnss::GNVTG, nautical_speed_indicator_),
  PROTOBUF_FIELD_OFFSET(::civ::drivers::rawgnss::GNVTG, speed_km_),
  PROTOBUF_FIELD_OFFSET(::civ::drivers::rawgnss::GNVTG, speed_indicator_),
  PROTOBUF_FIELD_OFFSET(::civ::drivers::rawgnss::GNVTG, mode_indicator_),
  0,
  1,
  4,
  2,
  5,
  3,
  6,
  8,
  7,
  9,
  PROTOBUF_FIELD_OFFSET(::civ::drivers::rawgnss::Heading2, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::civ::drivers::rawgnss::Heading2, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::civ::drivers::rawgnss::Heading2, gnss_header_),
  PROTOBUF_FIELD_OFFSET(::civ::drivers::rawgnss::Heading2, solution_status_),
  PROTOBUF_FIELD_OFFSET(::civ::drivers::rawgnss::Heading2, pos_type_),
  PROTOBUF_FIELD_OFFSET(::civ::drivers::rawgnss::Heading2, baseline_length_in_metres_),
  PROTOBUF_FIELD_OFFSET(::civ::drivers::rawgnss::Heading2, heading_in_degrees_),
  PROTOBUF_FIELD_OFFSET(::civ::drivers::rawgnss::Heading2, pitch_in_degrees_),
  PROTOBUF_FIELD_OFFSET(::civ::drivers::rawgnss::Heading2, reserved_),
  PROTOBUF_FIELD_OFFSET(::civ::drivers::rawgnss::Heading2, heading_std_dev_),
  PROTOBUF_FIELD_OFFSET(::civ::drivers::rawgnss::Heading2, pitch_std_dev_),
  PROTOBUF_FIELD_OFFSET(::civ::drivers::rawgnss::Heading2, rover_receiver_id_),
  PROTOBUF_FIELD_OFFSET(::civ::drivers::rawgnss::Heading2, master_receiver_id_),
  PROTOBUF_FIELD_OFFSET(::civ::drivers::rawgnss::Heading2, num_of_satellites_tracked_),
  PROTOBUF_FIELD_OFFSET(::civ::drivers::rawgnss::Heading2, num_of_satellites_in_solution_),
  PROTOBUF_FIELD_OFFSET(::civ::drivers::rawgnss::Heading2, num_of_satellites_above_mask_angle_),
  PROTOBUF_FIELD_OFFSET(::civ::drivers::rawgnss::Heading2, num_of_satellites_above_mask_angle_l2_),
  PROTOBUF_FIELD_OFFSET(::civ::drivers::rawgnss::Heading2, solution_source_),
  PROTOBUF_FIELD_OFFSET(::civ::drivers::rawgnss::Heading2, extended_solution_status_),
  PROTOBUF_FIELD_OFFSET(::civ::drivers::rawgnss::Heading2, galileo_beidou_sig_mask_),
  PROTOBUF_FIELD_OFFSET(::civ::drivers::rawgnss::Heading2, gps_glonass_sig_mask_),
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  0,
  1,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  PROTOBUF_FIELD_OFFSET(::civ::drivers::rawgnss::RawImu, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::civ::drivers::rawgnss::RawImu, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::civ::drivers::rawgnss::RawImu, gnss_header_),
  PROTOBUF_FIELD_OFFSET(::civ::drivers::rawgnss::RawImu, gnss_week_),
  PROTOBUF_FIELD_OFFSET(::civ::drivers::rawgnss::RawImu, seconds_into_week_),
  PROTOBUF_FIELD_OFFSET(::civ::drivers::rawgnss::RawImu, imu_status_),
  PROTOBUF_FIELD_OFFSET(::civ::drivers::rawgnss::RawImu, z_accel_output_),
  PROTOBUF_FIELD_OFFSET(::civ::drivers::rawgnss::RawImu, y_accel_output_),
  PROTOBUF_FIELD_OFFSET(::civ::drivers::rawgnss::RawImu, x_accel_output_),
  PROTOBUF_FIELD_OFFSET(::civ::drivers::rawgnss::RawImu, z_gyro_output_),
  PROTOBUF_FIELD_OFFSET(::civ::drivers::rawgnss::RawImu, y_gyro_output_),
  PROTOBUF_FIELD_OFFSET(::civ::drivers::rawgnss::RawImu, x_gyro_output_),
  0,
  2,
  1,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  PROTOBUF_FIELD_OFFSET(::civ::drivers::rawgnss::BestVel, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::civ::drivers::rawgnss::BestVel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::civ::drivers::rawgnss::BestVel, gnss_header_),
  PROTOBUF_FIELD_OFFSET(::civ::drivers::rawgnss::BestVel, solution_status_),
  PROTOBUF_FIELD_OFFSET(::civ::drivers::rawgnss::BestVel, vel_type_),
  PROTOBUF_FIELD_OFFSET(::civ::drivers::rawgnss::BestVel, latency_),
  PROTOBUF_FIELD_OFFSET(::civ::drivers::rawgnss::BestVel, diff_age_in_seconds_),
  PROTOBUF_FIELD_OFFSET(::civ::drivers::rawgnss::BestVel, horizontal_speed_over_ground_),
  PROTOBUF_FIELD_OFFSET(::civ::drivers::rawgnss::BestVel, track_over_ground_),
  PROTOBUF_FIELD_OFFSET(::civ::drivers::rawgnss::BestVel, vertical_speed_),
  PROTOBUF_FIELD_OFFSET(::civ::drivers::rawgnss::BestVel, reserved_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  PROTOBUF_FIELD_OFFSET(::civ::drivers::rawgnss::InspVax, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::civ::drivers::rawgnss::InspVax, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::civ::drivers::rawgnss::InspVax, gnss_header_),
  PROTOBUF_FIELD_OFFSET(::civ::drivers::rawgnss::InspVax, ins_status_),
  PROTOBUF_FIELD_OFFSET(::civ::drivers::rawgnss::InspVax, pos_type_),
  PROTOBUF_FIELD_OFFSET(::civ::drivers::rawgnss::InspVax, latitude_),
  PROTOBUF_FIELD_OFFSET(::civ::drivers::rawgnss::InspVax, longitude_),
  PROTOBUF_FIELD_OFFSET(::civ::drivers::rawgnss::InspVax, height_),
  PROTOBUF_FIELD_OFFSET(::civ::drivers::rawgnss::InspVax, undulation_),
  PROTOBUF_FIELD_OFFSET(::civ::drivers::rawgnss::InspVax, north_velocity_),
  PROTOBUF_FIELD_OFFSET(::civ::drivers::rawgnss::InspVax, east_velocity_),
  PROTOBUF_FIELD_OFFSET(::civ::drivers::rawgnss::InspVax, up_velocity_),
  PROTOBUF_FIELD_OFFSET(::civ::drivers::rawgnss::InspVax, roll_in_local_),
  PROTOBUF_FIELD_OFFSET(::civ::drivers::rawgnss::InspVax, pitch_in_local_),
  PROTOBUF_FIELD_OFFSET(::civ::drivers::rawgnss::InspVax, azimuth_in_local_),
  PROTOBUF_FIELD_OFFSET(::civ::drivers::rawgnss::InspVax, latitude_std_deviation_),
  PROTOBUF_FIELD_OFFSET(::civ::drivers::rawgnss::InspVax, longitude_std_deviation_),
  PROTOBUF_FIELD_OFFSET(::civ::drivers::rawgnss::InspVax, height_std_deviation_),
  PROTOBUF_FIELD_OFFSET(::civ::drivers::rawgnss::InspVax, north_velocity_std_deviation_),
  PROTOBUF_FIELD_OFFSET(::civ::drivers::rawgnss::InspVax, east_velocity_std_deviation_),
  PROTOBUF_FIELD_OFFSET(::civ::drivers::rawgnss::InspVax, up_velocity_std_deviation_),
  PROTOBUF_FIELD_OFFSET(::civ::drivers::rawgnss::InspVax, roll_std_deviation_),
  PROTOBUF_FIELD_OFFSET(::civ::drivers::rawgnss::InspVax, pitch_std_deviation_),
  PROTOBUF_FIELD_OFFSET(::civ::drivers::rawgnss::InspVax, azimuth_std_deviation_),
  PROTOBUF_FIELD_OFFSET(::civ::drivers::rawgnss::InspVax, ext_sol_status_),
  PROTOBUF_FIELD_OFFSET(::civ::drivers::rawgnss::InspVax, time_since_update_),
  0,
  1,
  2,
  3,
  4,
  5,
  9,
  6,
  7,
  8,
  11,
  12,
  13,
  10,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::civ::drivers::rawgnss::LogHeader)},
  { 9, 25, sizeof(::civ::drivers::rawgnss::GnssHeader)},
  { 36, 63, sizeof(::civ::drivers::rawgnss::Bestpos)},
  { 85, 103, sizeof(::civ::drivers::rawgnss::GNGGA)},
  { 116, 131, sizeof(::civ::drivers::rawgnss::GNVTG)},
  { 141, 165, sizeof(::civ::drivers::rawgnss::Heading2)},
  { 184, 199, sizeof(::civ::drivers::rawgnss::RawImu)},
  { 209, 223, sizeof(::civ::drivers::rawgnss::BestVel)},
  { 232, 261, sizeof(::civ::drivers::rawgnss::InspVax)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::civ::drivers::rawgnss::_LogHeader_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::civ::drivers::rawgnss::_GnssHeader_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::civ::drivers::rawgnss::_Bestpos_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::civ::drivers::rawgnss::_GNGGA_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::civ::drivers::rawgnss::_GNVTG_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::civ::drivers::rawgnss::_Heading2_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::civ::drivers::rawgnss::_RawImu_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::civ::drivers::rawgnss::_BestVel_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::civ::drivers::rawgnss::_InspVax_default_instance_),
};

const char descriptor_table_protodef_message_2fdrivers_2fgnss_2fproto_2fraw_5fgnss_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n)message/drivers/gnss/proto/raw_gnss.pr"
  "oto\022\023civ.drivers.rawgnss\"+\n\tLogHeader\022\020\n"
  "\004sync\030\001 \001(\005:\00235\022\014\n\004name\030\002 \002(\t\"\267\002\n\nGnssHe"
  "ader\0222\n\nlog_header\030\001 \002(\0132\036.civ.drivers.r"
  "awgnss.LogHeader\022\014\n\004port\030\002 \002(\t\022\020\n\010sequen"
  "ce\030\003 \002(\r\022\021\n\tidle_time\030\004 \002(\002\0224\n\013time_stat"
  "us\030\005 \002(\0162\037.civ.drivers.rawgnss.TimeStatu"
  "s\022\020\n\010week_num\030\006 \002(\r\022\023\n\013gps_seconds\030\007 \002(\001"
  "\022\027\n\017receiver_status\030\010 \002(\r\022\023\n\010reserved\030\t "
  "\002(\r:\0010\022\033\n\023receiver_sw_version\030\n \002(\r\022\032\n\022r"
  "eceived_timestamp\030\013 \001(\001\"\201\006\n\007Bestpos\0224\n\013g"
  "nss_header\030\001 \002(\0132\037.civ.drivers.rawgnss.G"
  "nssHeader\022<\n\017solution_status\030\002 \001(\0162#.civ"
  ".drivers.rawgnss.SolutionStatus\022:\n\010pos_t"
  "ype\030\003 \001(\0162(.civ.drivers.rawgnss.PositonV"
  "elocityType\022\032\n\022latitude_in_degree\030\004 \002(\001\022"
  "\033\n\023longitude_in_degree\030\005 \002(\001\022\030\n\020height_i"
  "n_metres\030\006 \002(\001\022\022\n\nundulation\030\007 \002(\002\022.\n\010da"
  "tum_id\030\010 \002(\0162\034.civ.drivers.rawgnss.Datum"
  "ID\022\030\n\020latitude_std_dev\030\t \002(\002\022\031\n\021longitud"
  "e_std_dev\030\n \002(\002\022\026\n\016height_std_dev\030\013 \002(\002\022"
  "\027\n\017base_station_id\030\014 \002(\t\022\033\n\023diff_age_in_"
  "seconds\030\r \002(\002\022\037\n\027solution_age_in_seconds"
  "\030\016 \002(\002\022!\n\031num_of_satellites_tracked\030\017 \002("
  "\005\022\036\n\026num_of_satellites_used\030\020 \002(\005\022\'\n\037num"
  "_of_satellites_with_l1_e1_b1\030\021 \002(\005\022)\n!nu"
  "m_of_satellites_with_multi_freq\030\022 \002(\005\022\023\n"
  "\010reserved\030\023 \002(\005:\0010\022 \n\030extended_solution_"
  "status\030\024 \002(\005\022\037\n\027galileo_beidou_sig_mask\030"
  "\025 \002(\005\022\034\n\024gps_glonass_sig_mask\030\026 \002(\005\"\375\003\n\005"
  "GNGGA\0222\n\nlog_header\030\001 \001(\0132\036.civ.drivers."
  "rawgnss.LogHeader\022\026\n\016utc_in_seconds\030\002 \001("
  "\001\022\020\n\010latitude\030\003 \001(\002\022B\n\014latitude_dir\030\004 \001("
  "\0162,.civ.drivers.rawgnss.GNGGA.LatitudeDi"
  "rection\022\021\n\tlongitude\030\005 \001(\002\022D\n\rlongitude_"
  "dir\030\006 \001(\0162-.civ.drivers.rawgnss.GNGGA.Lo"
  "ngitudeDirection\022\017\n\007quality\030\007 \001(\005\022\036\n\026num"
  "_of_satellites_used\030\010 \001(\005\022\014\n\004hdop\030\t \001(\002\022"
  "\013\n\003alt\030\n \001(\002\022\022\n\nutc_hhmmss\030\013 \001(\t\022\024\n\014lati"
  "tude_deg\030\014 \001(\002\022\025\n\rlongitude_deg\030\r \001(\002\")\n"
  "\021LatitudeDirection\022\t\n\005North\020\000\022\t\n\005South\020\001"
  "\"(\n\022LongitudeDirection\022\010\n\004East\020\000\022\010\n\004West"
  "\020\001\"\027\n\tUnitTypes\022\n\n\006METRES\020\000\"\310\003\n\005GNVTG\0222\n"
  "\nlog_header\030\001 \002(\0132\036.civ.drivers.rawgnss."
  "LogHeader\022\022\n\ntrack_true\030\002 \002(\002\022\034\n\024true_tr"
  "ack_indicator\030\003 \002(\010\022\021\n\ttrack_mag\030\004 \002(\002\022 "
  "\n\030magnetic_track_indicator\030\005 \002(\010\022\020\n\010spee"
  "d_kn\030\006 \002(\002\022 \n\030nautical_speed_indicator\030\007"
  " \002(\010\022\020\n\010speed_km\030\010 \002(\002\022\027\n\017speed_indicato"
  "r\030\t \002(\010\022N\n\016mode_indicator\030\n \002(\01626.civ.dr"
  "ivers.rawgnss.GNVTG.PositionSystemModeIn"
  "dicator\"u\n\033PositionSystemModeIndicator\022\016"
  "\n\nAutonomous\020\001\022\020\n\014Differential\020\002\022\021\n\rEsti"
  "matedMode\020\003\022\017\n\013ManualInput\020\004\022\020\n\014DataNotV"
  "alid\020\005\"\256\005\n\010Heading2\0224\n\013gnss_header\030\001 \002(\013"
  "2\037.civ.drivers.rawgnss.GnssHeader\022<\n\017sol"
  "ution_status\030\002 \001(\0162#.civ.drivers.rawgnss"
  ".SolutionStatus\022:\n\010pos_type\030\003 \001(\0162(.civ."
  "drivers.rawgnss.PositonVelocityType\022!\n\031b"
  "aseline_length_in_metres\030\004 \002(\002\022\032\n\022headin"
  "g_in_degrees\030\005 \002(\002\022\030\n\020pitch_in_degrees\030\006"
  " \002(\002\022\023\n\010reserved\030\007 \002(\002:\0010\022\027\n\017heading_std"
  "_dev\030\010 \002(\002\022\025\n\rpitch_std_dev\030\t \002(\002\022\031\n\021rov"
  "er_receiver_id\030\n \002(\t\022\032\n\022master_receiver_"
  "id\030\013 \002(\t\022!\n\031num_of_satellites_tracked\030\014 "
  "\002(\r\022%\n\035num_of_satellites_in_solution\030\r \002"
  "(\r\022*\n\"num_of_satellites_above_mask_angle"
  "\030\016 \002(\r\022-\n%num_of_satellites_above_mask_a"
  "ngle_l2\030\017 \002(\r\022\027\n\017solution_source\030\020 \002(\r\022 "
  "\n\030extended_solution_status\030\021 \002(\r\022\037\n\027gali"
  "leo_beidou_sig_mask\030\022 \002(\r\022\034\n\024gps_glonass"
  "_sig_mask\030\023 \002(\r\"\215\002\n\006RawImu\0224\n\013gnss_heade"
  "r\030\001 \002(\0132\037.civ.drivers.rawgnss.GnssHeader"
  "\022\021\n\tgnss_week\030\002 \002(\r\022\031\n\021seconds_into_week"
  "\030\003 \002(\001\022\022\n\nimu_status\030\004 \002(\r\022\026\n\016z_accel_ou"
  "tput\030\005 \002(\001\022\026\n\016y_accel_output\030\006 \002(\001\022\026\n\016x_"
  "accel_output\030\007 \002(\001\022\025\n\rz_gyro_output\030\010 \002("
  "\001\022\025\n\ry_gyro_output\030\t \002(\001\022\025\n\rx_gyro_outpu"
  "t\030\n \002(\001\"\322\002\n\007BestVel\0224\n\013gnss_header\030\001 \002(\013"
  "2\037.civ.drivers.rawgnss.GnssHeader\022<\n\017sol"
  "ution_status\030\002 \001(\0162#.civ.drivers.rawgnss"
  ".SolutionStatus\022:\n\010vel_type\030\003 \001(\0162(.civ."
  "drivers.rawgnss.PositonVelocityType\022\017\n\007l"
  "atency\030\004 \002(\002\022\033\n\023diff_age_in_seconds\030\005 \002("
  "\002\022$\n\034horizontal_speed_over_ground\030\006 \002(\001\022"
  "\031\n\021track_over_ground\030\007 \002(\001\022\026\n\016vertical_s"
  "peed\030\010 \002(\001\022\020\n\010reserved\030\t \002(\002\"\335\005\n\007InspVax"
  "\0224\n\013gnss_header\030\001 \002(\0132\037.civ.drivers.rawg"
  "nss.GnssHeader\0222\n\nins_status\030\002 \002(\0162\036.civ"
  ".drivers.rawgnss.InsStatus\022:\n\010pos_type\030\003"
  " \001(\0162(.civ.drivers.rawgnss.PositonVeloci"
  "tyType\022\020\n\010latitude\030\004 \002(\001\022\021\n\tlongitude\030\005 "
  "\002(\001\022\016\n\006height\030\006 \002(\001\022\022\n\nundulation\030\007 \002(\002\022"
  "\026\n\016north_velocity\030\010 \002(\001\022\025\n\reast_velocity"
  "\030\t \002(\001\022\023\n\013up_velocity\030\n \002(\001\022\025\n\rroll_in_l"
  "ocal\030\013 \002(\001\022\026\n\016pitch_in_local\030\014 \002(\001\022\030\n\020az"
  "imuth_in_local\030\r \002(\001\022\036\n\026latitude_std_dev"
  "iation\030\016 \002(\002\022\037\n\027longitude_std_deviation\030"
  "\017 \002(\002\022\034\n\024height_std_deviation\030\020 \002(\002\022$\n\034n"
  "orth_velocity_std_deviation\030\021 \002(\002\022#\n\033eas"
  "t_velocity_std_deviation\030\022 \002(\002\022!\n\031up_vel"
  "ocity_std_deviation\030\023 \002(\002\022\032\n\022roll_std_de"
  "viation\030\024 \002(\002\022\033\n\023pitch_std_deviation\030\025 \002"
  "(\002\022\035\n\025azimuth_std_deviation\030\026 \002(\002\022\026\n\016ext"
  "_sol_status\030\027 \002(\r\022\031\n\021time_since_update\030\030"
  " \002(\r*\313\001\n\nTimeStatus\022\013\n\007UNKNOWN\020\024\022\017\n\013APPR"
  "OXIMATE\020<\022\023\n\017COARSEADJUSTING\020P\022\n\n\006COARSE"
  "\020d\022\022\n\016COARSESTEERING\020x\022\021\n\014FREEWHEELING\020\202"
  "\001\022\022\n\rFINEADJUSTING\020\214\001\022\t\n\004FINE\020\240\001\022\027\n\022FINE"
  "BACKUPSTEERING\020\252\001\022\021\n\014FINESTEERING\020\264\001\022\014\n\007"
  "SATTIME\020\310\001*\220\002\n\016SolutionStatus\022\020\n\014SOL_COM"
  "PUTED\020\000\022\024\n\020INSUFFICIENT_OBS\020\001\022\022\n\016NO_CONV"
  "ERGENCE\020\002\022\017\n\013SINGULARITY\020\003\022\r\n\tCOV_TRACE\020"
  "\004\022\r\n\tTEST_DIST\020\005\022\016\n\nCOLD_START\020\006\022\r\n\tV_H_"
  "LIMIT\020\007\022\014\n\010VARIANCE\020\010\022\r\n\tRESIDUALS\020\t\022\025\n\021"
  "INTEGRITY_WARNING\020\r\022\013\n\007PENDING\020\022\022\017\n\013INVA"
  "LID_FIX\020\023\022\020\n\014UNAUTHORIZED\020\024\022\020\n\014INVALID_R"
  "ATE\020\026*\261\004\n\023PositonVelocityType\022\010\n\004NONE\020\000\022"
  "\014\n\010FIXEDPOS\020\001\022\017\n\013FIXEDHEIGHT\020\002\022\r\n\tFLOATC"
  "ONV\020\004\022\014\n\010WIDELANE\020\005\022\016\n\nNARROWLANE\020\006\022\024\n\020D"
  "OPPLER_VELOCITY\020\010\022\n\n\006SINGLE\020\020\022\013\n\007PSRDIFF"
  "\020\021\022\010\n\004WAAS\020\022\022\016\n\nPROPAGATED\020\023\022\014\n\010L1_FLOAT"
  "\020 \022\020\n\014NARROW_FLOAT\020\"\022\n\n\006L1_INT\0200\022\014\n\010WIDE"
  "_INT\0201\022\016\n\nNARROW_INT\0202\022\022\n\016RTK_DIRECT_INS"
  "\0203\022\014\n\010INS_SBAS\0204\022\r\n\tINS_PSRSP\0205\022\017\n\013INS_P"
  "SRDIFF\0206\022\020\n\014INS_RTKFLOAT\0207\022\020\n\014INS_RTKFIX"
  "ED\0208\022\022\n\016PPP_CONVERGING\020D\022\007\n\003PPP\020E\022\017\n\013OPE"
  "RATIONAL\020F\022\013\n\007WARNING\020G\022\021\n\rOUT_OF_BOUNDS"
  "\020H\022\026\n\022INS_PPP_CONVERGING\020I\022\013\n\007INS_PPP\020J\022"
  "\030\n\024PPP_BASIC_CONVERGING\020M\022\r\n\tPPP_BASIC\020N"
  "\022\034\n\030INS_PPP_BASIC_CONVERGING\020O\022\021\n\rINS_PP"
  "P_BASIC\020P*\036\n\007DatumID\022\t\n\005WGS84\020=\022\010\n\004USER\020"
  "\?*\250\002\n\tInsStatus\022\020\n\014INS_INACTIVE\020\000\022\020\n\014INS"
  "_ALIGNING\020\001\022\025\n\021INS_HIGH_VARIANCE\020\002\022\025\n\021IN"
  "S_SOLUTION_GOOD\020\003\022\025\n\021INS_SOLUTION_FREE\020\006"
  "\022\032\n\026INS_ALIGNMENT_COMPLETE\020\007\022\033\n\027DETERMIN"
  "ING_ORIENTATION\020\010\022\026\n\022WAITING_INITIALPOS\020"
  "\t\022\023\n\017WAITING_AZIMUTH\020\n\022\027\n\023INITIALIZING_B"
  "IASES\020\013\022\021\n\rMOTION_DETECT\020\014\022 \n\034WAITING_AL"
  "IGNMENTORIENTATION\020\016"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_message_2fdrivers_2fgnss_2fproto_2fraw_5fgnss_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_message_2fdrivers_2fgnss_2fproto_2fraw_5fgnss_2eproto_sccs[9] = {
  &scc_info_BestVel_message_2fdrivers_2fgnss_2fproto_2fraw_5fgnss_2eproto.base,
  &scc_info_Bestpos_message_2fdrivers_2fgnss_2fproto_2fraw_5fgnss_2eproto.base,
  &scc_info_GNGGA_message_2fdrivers_2fgnss_2fproto_2fraw_5fgnss_2eproto.base,
  &scc_info_GNVTG_message_2fdrivers_2fgnss_2fproto_2fraw_5fgnss_2eproto.base,
  &scc_info_GnssHeader_message_2fdrivers_2fgnss_2fproto_2fraw_5fgnss_2eproto.base,
  &scc_info_Heading2_message_2fdrivers_2fgnss_2fproto_2fraw_5fgnss_2eproto.base,
  &scc_info_InspVax_message_2fdrivers_2fgnss_2fproto_2fraw_5fgnss_2eproto.base,
  &scc_info_LogHeader_message_2fdrivers_2fgnss_2fproto_2fraw_5fgnss_2eproto.base,
  &scc_info_RawImu_message_2fdrivers_2fgnss_2fproto_2fraw_5fgnss_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_message_2fdrivers_2fgnss_2fproto_2fraw_5fgnss_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_message_2fdrivers_2fgnss_2fproto_2fraw_5fgnss_2eproto = {
  false, false, descriptor_table_protodef_message_2fdrivers_2fgnss_2fproto_2fraw_5fgnss_2eproto, "message/drivers/gnss/proto/raw_gnss.proto", 5580,
  &descriptor_table_message_2fdrivers_2fgnss_2fproto_2fraw_5fgnss_2eproto_once, descriptor_table_message_2fdrivers_2fgnss_2fproto_2fraw_5fgnss_2eproto_sccs, descriptor_table_message_2fdrivers_2fgnss_2fproto_2fraw_5fgnss_2eproto_deps, 9, 0,
  schemas, file_default_instances, TableStruct_message_2fdrivers_2fgnss_2fproto_2fraw_5fgnss_2eproto::offsets,
  file_level_metadata_message_2fdrivers_2fgnss_2fproto_2fraw_5fgnss_2eproto, 9, file_level_enum_descriptors_message_2fdrivers_2fgnss_2fproto_2fraw_5fgnss_2eproto, file_level_service_descriptors_message_2fdrivers_2fgnss_2fproto_2fraw_5fgnss_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_message_2fdrivers_2fgnss_2fproto_2fraw_5fgnss_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_message_2fdrivers_2fgnss_2fproto_2fraw_5fgnss_2eproto)), true);
namespace civ {
namespace drivers {
namespace rawgnss {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GNGGA_LatitudeDirection_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_message_2fdrivers_2fgnss_2fproto_2fraw_5fgnss_2eproto);
  return file_level_enum_descriptors_message_2fdrivers_2fgnss_2fproto_2fraw_5fgnss_2eproto[0];
}
bool GNGGA_LatitudeDirection_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr GNGGA_LatitudeDirection GNGGA::North;
constexpr GNGGA_LatitudeDirection GNGGA::South;
constexpr GNGGA_LatitudeDirection GNGGA::LatitudeDirection_MIN;
constexpr GNGGA_LatitudeDirection GNGGA::LatitudeDirection_MAX;
constexpr int GNGGA::LatitudeDirection_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GNGGA_LongitudeDirection_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_message_2fdrivers_2fgnss_2fproto_2fraw_5fgnss_2eproto);
  return file_level_enum_descriptors_message_2fdrivers_2fgnss_2fproto_2fraw_5fgnss_2eproto[1];
}
bool GNGGA_LongitudeDirection_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr GNGGA_LongitudeDirection GNGGA::East;
constexpr GNGGA_LongitudeDirection GNGGA::West;
constexpr GNGGA_LongitudeDirection GNGGA::LongitudeDirection_MIN;
constexpr GNGGA_LongitudeDirection GNGGA::LongitudeDirection_MAX;
constexpr int GNGGA::LongitudeDirection_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GNGGA_UnitTypes_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_message_2fdrivers_2fgnss_2fproto_2fraw_5fgnss_2eproto);
  return file_level_enum_descriptors_message_2fdrivers_2fgnss_2fproto_2fraw_5fgnss_2eproto[2];
}
bool GNGGA_UnitTypes_IsValid(int value) {
  switch (value) {
    case 0:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr GNGGA_UnitTypes GNGGA::METRES;
constexpr GNGGA_UnitTypes GNGGA::UnitTypes_MIN;
constexpr GNGGA_UnitTypes GNGGA::UnitTypes_MAX;
constexpr int GNGGA::UnitTypes_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GNVTG_PositionSystemModeIndicator_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_message_2fdrivers_2fgnss_2fproto_2fraw_5fgnss_2eproto);
  return file_level_enum_descriptors_message_2fdrivers_2fgnss_2fproto_2fraw_5fgnss_2eproto[3];
}
bool GNVTG_PositionSystemModeIndicator_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr GNVTG_PositionSystemModeIndicator GNVTG::Autonomous;
constexpr GNVTG_PositionSystemModeIndicator GNVTG::Differential;
constexpr GNVTG_PositionSystemModeIndicator GNVTG::EstimatedMode;
constexpr GNVTG_PositionSystemModeIndicator GNVTG::ManualInput;
constexpr GNVTG_PositionSystemModeIndicator GNVTG::DataNotValid;
constexpr GNVTG_PositionSystemModeIndicator GNVTG::PositionSystemModeIndicator_MIN;
constexpr GNVTG_PositionSystemModeIndicator GNVTG::PositionSystemModeIndicator_MAX;
constexpr int GNVTG::PositionSystemModeIndicator_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TimeStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_message_2fdrivers_2fgnss_2fproto_2fraw_5fgnss_2eproto);
  return file_level_enum_descriptors_message_2fdrivers_2fgnss_2fproto_2fraw_5fgnss_2eproto[4];
}
bool TimeStatus_IsValid(int value) {
  switch (value) {
    case 20:
    case 60:
    case 80:
    case 100:
    case 120:
    case 130:
    case 140:
    case 160:
    case 170:
    case 180:
    case 200:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SolutionStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_message_2fdrivers_2fgnss_2fproto_2fraw_5fgnss_2eproto);
  return file_level_enum_descriptors_message_2fdrivers_2fgnss_2fproto_2fraw_5fgnss_2eproto[5];
}
bool SolutionStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 13:
    case 18:
    case 19:
    case 20:
    case 22:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PositonVelocityType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_message_2fdrivers_2fgnss_2fproto_2fraw_5fgnss_2eproto);
  return file_level_enum_descriptors_message_2fdrivers_2fgnss_2fproto_2fraw_5fgnss_2eproto[6];
}
bool PositonVelocityType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 5:
    case 6:
    case 8:
    case 16:
    case 17:
    case 18:
    case 19:
    case 32:
    case 34:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 68:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
    case 74:
    case 77:
    case 78:
    case 79:
    case 80:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DatumID_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_message_2fdrivers_2fgnss_2fproto_2fraw_5fgnss_2eproto);
  return file_level_enum_descriptors_message_2fdrivers_2fgnss_2fproto_2fraw_5fgnss_2eproto[7];
}
bool DatumID_IsValid(int value) {
  switch (value) {
    case 61:
    case 63:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* InsStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_message_2fdrivers_2fgnss_2fproto_2fraw_5fgnss_2eproto);
  return file_level_enum_descriptors_message_2fdrivers_2fgnss_2fproto_2fraw_5fgnss_2eproto[8];
}
bool InsStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 14:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class LogHeader::_Internal {
 public:
  using HasBits = decltype(std::declval<LogHeader>()._has_bits_);
  static void set_has_sync(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

LogHeader::LogHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:civ.drivers.rawgnss.LogHeader)
}
LogHeader::LogHeader(const LogHeader& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  sync_ = from.sync_;
  // @@protoc_insertion_point(copy_constructor:civ.drivers.rawgnss.LogHeader)
}

void LogHeader::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LogHeader_message_2fdrivers_2fgnss_2fproto_2fraw_5fgnss_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sync_ = 35;
}

LogHeader::~LogHeader() {
  // @@protoc_insertion_point(destructor:civ.drivers.rawgnss.LogHeader)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LogHeader::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LogHeader::ArenaDtor(void* object) {
  LogHeader* _this = reinterpret_cast< LogHeader* >(object);
  (void)_this;
}
void LogHeader::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LogHeader::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LogHeader& LogHeader::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LogHeader_message_2fdrivers_2fgnss_2fproto_2fraw_5fgnss_2eproto.base);
  return *internal_default_instance();
}


void LogHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:civ.drivers.rawgnss.LogHeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    sync_ = 35;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LogHeader::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 sync = 1 [default = 35];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_sync(&has_bits);
          sync_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "civ.drivers.rawgnss.LogHeader.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LogHeader::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:civ.drivers.rawgnss.LogHeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 sync = 1 [default = 35];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_sync(), target);
  }

  // required string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "civ.drivers.rawgnss.LogHeader.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:civ.drivers.rawgnss.LogHeader)
  return target;
}

size_t LogHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:civ.drivers.rawgnss.LogHeader)
  size_t total_size = 0;

  // required string name = 2;
  if (_internal_has_name()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 sync = 1 [default = 35];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_sync());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LogHeader::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:civ.drivers.rawgnss.LogHeader)
  GOOGLE_DCHECK_NE(&from, this);
  const LogHeader* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LogHeader>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:civ.drivers.rawgnss.LogHeader)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:civ.drivers.rawgnss.LogHeader)
    MergeFrom(*source);
  }
}

void LogHeader::MergeFrom(const LogHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:civ.drivers.rawgnss.LogHeader)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      sync_ = from.sync_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LogHeader::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:civ.drivers.rawgnss.LogHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogHeader::CopyFrom(const LogHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:civ.drivers.rawgnss.LogHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogHeader::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void LogHeader::InternalSwap(LogHeader* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(sync_, other->sync_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LogHeader::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GnssHeader::_Internal {
 public:
  using HasBits = decltype(std::declval<GnssHeader>()._has_bits_);
  static const ::civ::drivers::rawgnss::LogHeader& log_header(const GnssHeader* msg);
  static void set_has_log_header(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_port(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_sequence(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_idle_time(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_time_status(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_week_num(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_gps_seconds(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_receiver_status(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_reserved(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_receiver_sw_version(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_received_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x000005ff) ^ 0x000005ff) != 0;
  }
};

const ::civ::drivers::rawgnss::LogHeader&
GnssHeader::_Internal::log_header(const GnssHeader* msg) {
  return *msg->log_header_;
}
GnssHeader::GnssHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:civ.drivers.rawgnss.GnssHeader)
}
GnssHeader::GnssHeader(const GnssHeader& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  port_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_port()) {
    port_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_port(), 
      GetArena());
  }
  if (from._internal_has_log_header()) {
    log_header_ = new ::civ::drivers::rawgnss::LogHeader(*from.log_header_);
  } else {
    log_header_ = nullptr;
  }
  ::memcpy(&sequence_, &from.sequence_,
    static_cast<size_t>(reinterpret_cast<char*>(&time_status_) -
    reinterpret_cast<char*>(&sequence_)) + sizeof(time_status_));
  // @@protoc_insertion_point(copy_constructor:civ.drivers.rawgnss.GnssHeader)
}

void GnssHeader::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GnssHeader_message_2fdrivers_2fgnss_2fproto_2fraw_5fgnss_2eproto.base);
  port_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&log_header_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&received_timestamp_) -
      reinterpret_cast<char*>(&log_header_)) + sizeof(received_timestamp_));
  time_status_ = 20;
}

GnssHeader::~GnssHeader() {
  // @@protoc_insertion_point(destructor:civ.drivers.rawgnss.GnssHeader)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GnssHeader::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  port_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete log_header_;
}

void GnssHeader::ArenaDtor(void* object) {
  GnssHeader* _this = reinterpret_cast< GnssHeader* >(object);
  (void)_this;
}
void GnssHeader::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GnssHeader::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GnssHeader& GnssHeader::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GnssHeader_message_2fdrivers_2fgnss_2fproto_2fraw_5fgnss_2eproto.base);
  return *internal_default_instance();
}


void GnssHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:civ.drivers.rawgnss.GnssHeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      port_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(log_header_ != nullptr);
      log_header_->Clear();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&sequence_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&reserved_) -
        reinterpret_cast<char*>(&sequence_)) + sizeof(reserved_));
  }
  if (cached_has_bits & 0x00000700u) {
    ::memset(&receiver_sw_version_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&received_timestamp_) -
        reinterpret_cast<char*>(&receiver_sw_version_)) + sizeof(received_timestamp_));
    time_status_ = 20;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GnssHeader::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .civ.drivers.rawgnss.LogHeader log_header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_log_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string port = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_port();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "civ.drivers.rawgnss.GnssHeader.port");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 sequence = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_sequence(&has_bits);
          sequence_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required float idle_time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_idle_time(&has_bits);
          idle_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required .civ.drivers.rawgnss.TimeStatus time_status = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::civ::drivers::rawgnss::TimeStatus_IsValid(val))) {
            _internal_set_time_status(static_cast<::civ::drivers::rawgnss::TimeStatus>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // required uint32 week_num = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_week_num(&has_bits);
          week_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required double gps_seconds = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          _Internal::set_has_gps_seconds(&has_bits);
          gps_seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required uint32 receiver_status = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_receiver_status(&has_bits);
          receiver_status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 reserved = 9 [default = 0];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_reserved(&has_bits);
          reserved_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 receiver_sw_version = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_receiver_sw_version(&has_bits);
          receiver_sw_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double received_timestamp = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 89)) {
          _Internal::set_has_received_timestamp(&has_bits);
          received_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GnssHeader::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:civ.drivers.rawgnss.GnssHeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .civ.drivers.rawgnss.LogHeader log_header = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::log_header(this), target, stream);
  }

  // required string port = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_port().data(), static_cast<int>(this->_internal_port().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "civ.drivers.rawgnss.GnssHeader.port");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_port(), target);
  }

  // required uint32 sequence = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_sequence(), target);
  }

  // required float idle_time = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_idle_time(), target);
  }

  // required .civ.drivers.rawgnss.TimeStatus time_status = 5;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_time_status(), target);
  }

  // required uint32 week_num = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_week_num(), target);
  }

  // required double gps_seconds = 7;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_gps_seconds(), target);
  }

  // required uint32 receiver_status = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_receiver_status(), target);
  }

  // required uint32 reserved = 9 [default = 0];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_reserved(), target);
  }

  // required uint32 receiver_sw_version = 10;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_receiver_sw_version(), target);
  }

  // optional double received_timestamp = 11;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(11, this->_internal_received_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:civ.drivers.rawgnss.GnssHeader)
  return target;
}

size_t GnssHeader::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:civ.drivers.rawgnss.GnssHeader)
  size_t total_size = 0;

  if (_internal_has_port()) {
    // required string port = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_port());
  }

  if (_internal_has_log_header()) {
    // required .civ.drivers.rawgnss.LogHeader log_header = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *log_header_);
  }

  if (_internal_has_sequence()) {
    // required uint32 sequence = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_sequence());
  }

  if (_internal_has_idle_time()) {
    // required float idle_time = 4;
    total_size += 1 + 4;
  }

  if (_internal_has_gps_seconds()) {
    // required double gps_seconds = 7;
    total_size += 1 + 8;
  }

  if (_internal_has_week_num()) {
    // required uint32 week_num = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_week_num());
  }

  if (_internal_has_receiver_status()) {
    // required uint32 receiver_status = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_receiver_status());
  }

  if (_internal_has_reserved()) {
    // required uint32 reserved = 9 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_reserved());
  }

  if (_internal_has_receiver_sw_version()) {
    // required uint32 receiver_sw_version = 10;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_receiver_sw_version());
  }

  if (_internal_has_time_status()) {
    // required .civ.drivers.rawgnss.TimeStatus time_status = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_time_status());
  }

  return total_size;
}
size_t GnssHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:civ.drivers.rawgnss.GnssHeader)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x000005ff) ^ 0x000005ff) == 0) {  // All required fields are present.
    // required string port = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_port());

    // required .civ.drivers.rawgnss.LogHeader log_header = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *log_header_);

    // required uint32 sequence = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_sequence());

    // required float idle_time = 4;
    total_size += 1 + 4;

    // required double gps_seconds = 7;
    total_size += 1 + 8;

    // required uint32 week_num = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_week_num());

    // required uint32 receiver_status = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_receiver_status());

    // required uint32 reserved = 9 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_reserved());

    // required uint32 receiver_sw_version = 10;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_receiver_sw_version());

    // required .civ.drivers.rawgnss.TimeStatus time_status = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_time_status());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional double received_timestamp = 11;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000200u) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GnssHeader::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:civ.drivers.rawgnss.GnssHeader)
  GOOGLE_DCHECK_NE(&from, this);
  const GnssHeader* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GnssHeader>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:civ.drivers.rawgnss.GnssHeader)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:civ.drivers.rawgnss.GnssHeader)
    MergeFrom(*source);
  }
}

void GnssHeader::MergeFrom(const GnssHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:civ.drivers.rawgnss.GnssHeader)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_port(from._internal_port());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_log_header()->::civ::drivers::rawgnss::LogHeader::MergeFrom(from._internal_log_header());
    }
    if (cached_has_bits & 0x00000004u) {
      sequence_ = from.sequence_;
    }
    if (cached_has_bits & 0x00000008u) {
      idle_time_ = from.idle_time_;
    }
    if (cached_has_bits & 0x00000010u) {
      gps_seconds_ = from.gps_seconds_;
    }
    if (cached_has_bits & 0x00000020u) {
      week_num_ = from.week_num_;
    }
    if (cached_has_bits & 0x00000040u) {
      receiver_status_ = from.receiver_status_;
    }
    if (cached_has_bits & 0x00000080u) {
      reserved_ = from.reserved_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      receiver_sw_version_ = from.receiver_sw_version_;
    }
    if (cached_has_bits & 0x00000200u) {
      received_timestamp_ = from.received_timestamp_;
    }
    if (cached_has_bits & 0x00000400u) {
      time_status_ = from.time_status_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GnssHeader::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:civ.drivers.rawgnss.GnssHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GnssHeader::CopyFrom(const GnssHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:civ.drivers.rawgnss.GnssHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GnssHeader::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_log_header()) {
    if (!log_header_->IsInitialized()) return false;
  }
  return true;
}

void GnssHeader::InternalSwap(GnssHeader* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  port_.Swap(&other->port_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GnssHeader, received_timestamp_)
      + sizeof(GnssHeader::received_timestamp_)
      - PROTOBUF_FIELD_OFFSET(GnssHeader, log_header_)>(
          reinterpret_cast<char*>(&log_header_),
          reinterpret_cast<char*>(&other->log_header_));
  swap(time_status_, other->time_status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GnssHeader::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Bestpos::_Internal {
 public:
  using HasBits = decltype(std::declval<Bestpos>()._has_bits_);
  static const ::civ::drivers::rawgnss::GnssHeader& gnss_header(const Bestpos* msg);
  static void set_has_gnss_header(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_solution_status(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_pos_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_latitude_in_degree(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_longitude_in_degree(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_height_in_metres(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_undulation(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_datum_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_latitude_std_dev(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_longitude_std_dev(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_height_std_dev(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_base_station_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_diff_age_in_seconds(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_solution_age_in_seconds(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_num_of_satellites_tracked(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_num_of_satellites_used(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_num_of_satellites_with_l1_e1_b1(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_num_of_satellites_with_multi_freq(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_reserved(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_extended_solution_status(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_galileo_beidou_sig_mask(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_gps_glonass_sig_mask(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x003ffff3) ^ 0x003ffff3) != 0;
  }
};

const ::civ::drivers::rawgnss::GnssHeader&
Bestpos::_Internal::gnss_header(const Bestpos* msg) {
  return *msg->gnss_header_;
}
Bestpos::Bestpos(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:civ.drivers.rawgnss.Bestpos)
}
Bestpos::Bestpos(const Bestpos& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  base_station_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_base_station_id()) {
    base_station_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_base_station_id(), 
      GetArena());
  }
  if (from._internal_has_gnss_header()) {
    gnss_header_ = new ::civ::drivers::rawgnss::GnssHeader(*from.gnss_header_);
  } else {
    gnss_header_ = nullptr;
  }
  ::memcpy(&solution_status_, &from.solution_status_,
    static_cast<size_t>(reinterpret_cast<char*>(&datum_id_) -
    reinterpret_cast<char*>(&solution_status_)) + sizeof(datum_id_));
  // @@protoc_insertion_point(copy_constructor:civ.drivers.rawgnss.Bestpos)
}

void Bestpos::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Bestpos_message_2fdrivers_2fgnss_2fproto_2fraw_5fgnss_2eproto.base);
  base_station_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&gnss_header_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&gps_glonass_sig_mask_) -
      reinterpret_cast<char*>(&gnss_header_)) + sizeof(gps_glonass_sig_mask_));
  datum_id_ = 61;
}

Bestpos::~Bestpos() {
  // @@protoc_insertion_point(destructor:civ.drivers.rawgnss.Bestpos)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Bestpos::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  base_station_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete gnss_header_;
}

void Bestpos::ArenaDtor(void* object) {
  Bestpos* _this = reinterpret_cast< Bestpos* >(object);
  (void)_this;
}
void Bestpos::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Bestpos::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Bestpos& Bestpos::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Bestpos_message_2fdrivers_2fgnss_2fproto_2fraw_5fgnss_2eproto.base);
  return *internal_default_instance();
}


void Bestpos::Clear() {
// @@protoc_insertion_point(message_clear_start:civ.drivers.rawgnss.Bestpos)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      base_station_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(gnss_header_ != nullptr);
      gnss_header_->Clear();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&solution_status_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&undulation_) -
        reinterpret_cast<char*>(&solution_status_)) + sizeof(undulation_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&latitude_std_dev_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&num_of_satellites_with_l1_e1_b1_) -
        reinterpret_cast<char*>(&latitude_std_dev_)) + sizeof(num_of_satellites_with_l1_e1_b1_));
  }
  if (cached_has_bits & 0x003f0000u) {
    ::memset(&num_of_satellites_with_multi_freq_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&gps_glonass_sig_mask_) -
        reinterpret_cast<char*>(&num_of_satellites_with_multi_freq_)) + sizeof(gps_glonass_sig_mask_));
    datum_id_ = 61;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Bestpos::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .civ.drivers.rawgnss.GnssHeader gnss_header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_gnss_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .civ.drivers.rawgnss.SolutionStatus solution_status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::civ::drivers::rawgnss::SolutionStatus_IsValid(val))) {
            _internal_set_solution_status(static_cast<::civ::drivers::rawgnss::SolutionStatus>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .civ.drivers.rawgnss.PositonVelocityType pos_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::civ::drivers::rawgnss::PositonVelocityType_IsValid(val))) {
            _internal_set_pos_type(static_cast<::civ::drivers::rawgnss::PositonVelocityType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // required double latitude_in_degree = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_latitude_in_degree(&has_bits);
          latitude_in_degree_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required double longitude_in_degree = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_longitude_in_degree(&has_bits);
          longitude_in_degree_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required double height_in_metres = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _Internal::set_has_height_in_metres(&has_bits);
          height_in_metres_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required float undulation = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          _Internal::set_has_undulation(&has_bits);
          undulation_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required .civ.drivers.rawgnss.DatumID datum_id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::civ::drivers::rawgnss::DatumID_IsValid(val))) {
            _internal_set_datum_id(static_cast<::civ::drivers::rawgnss::DatumID>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(8, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // required float latitude_std_dev = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          _Internal::set_has_latitude_std_dev(&has_bits);
          latitude_std_dev_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float longitude_std_dev = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          _Internal::set_has_longitude_std_dev(&has_bits);
          longitude_std_dev_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float height_std_dev = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          _Internal::set_has_height_std_dev(&has_bits);
          height_std_dev_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required string base_station_id = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_base_station_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "civ.drivers.rawgnss.Bestpos.base_station_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required float diff_age_in_seconds = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 109)) {
          _Internal::set_has_diff_age_in_seconds(&has_bits);
          diff_age_in_seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float solution_age_in_seconds = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 117)) {
          _Internal::set_has_solution_age_in_seconds(&has_bits);
          solution_age_in_seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required int32 num_of_satellites_tracked = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_num_of_satellites_tracked(&has_bits);
          num_of_satellites_tracked_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 num_of_satellites_used = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_num_of_satellites_used(&has_bits);
          num_of_satellites_used_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 num_of_satellites_with_l1_e1_b1 = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_num_of_satellites_with_l1_e1_b1(&has_bits);
          num_of_satellites_with_l1_e1_b1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 num_of_satellites_with_multi_freq = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_num_of_satellites_with_multi_freq(&has_bits);
          num_of_satellites_with_multi_freq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 reserved = 19 [default = 0];
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_reserved(&has_bits);
          reserved_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 extended_solution_status = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_extended_solution_status(&has_bits);
          extended_solution_status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 galileo_beidou_sig_mask = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          _Internal::set_has_galileo_beidou_sig_mask(&has_bits);
          galileo_beidou_sig_mask_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 gps_glonass_sig_mask = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          _Internal::set_has_gps_glonass_sig_mask(&has_bits);
          gps_glonass_sig_mask_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Bestpos::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:civ.drivers.rawgnss.Bestpos)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .civ.drivers.rawgnss.GnssHeader gnss_header = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::gnss_header(this), target, stream);
  }

  // optional .civ.drivers.rawgnss.SolutionStatus solution_status = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_solution_status(), target);
  }

  // optional .civ.drivers.rawgnss.PositonVelocityType pos_type = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_pos_type(), target);
  }

  // required double latitude_in_degree = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_latitude_in_degree(), target);
  }

  // required double longitude_in_degree = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_longitude_in_degree(), target);
  }

  // required double height_in_metres = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_height_in_metres(), target);
  }

  // required float undulation = 7;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_undulation(), target);
  }

  // required .civ.drivers.rawgnss.DatumID datum_id = 8;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      8, this->_internal_datum_id(), target);
  }

  // required float latitude_std_dev = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_latitude_std_dev(), target);
  }

  // required float longitude_std_dev = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(10, this->_internal_longitude_std_dev(), target);
  }

  // required float height_std_dev = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(11, this->_internal_height_std_dev(), target);
  }

  // required string base_station_id = 12;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_base_station_id().data(), static_cast<int>(this->_internal_base_station_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "civ.drivers.rawgnss.Bestpos.base_station_id");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_base_station_id(), target);
  }

  // required float diff_age_in_seconds = 13;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(13, this->_internal_diff_age_in_seconds(), target);
  }

  // required float solution_age_in_seconds = 14;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(14, this->_internal_solution_age_in_seconds(), target);
  }

  // required int32 num_of_satellites_tracked = 15;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(15, this->_internal_num_of_satellites_tracked(), target);
  }

  // required int32 num_of_satellites_used = 16;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(16, this->_internal_num_of_satellites_used(), target);
  }

  // required int32 num_of_satellites_with_l1_e1_b1 = 17;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(17, this->_internal_num_of_satellites_with_l1_e1_b1(), target);
  }

  // required int32 num_of_satellites_with_multi_freq = 18;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(18, this->_internal_num_of_satellites_with_multi_freq(), target);
  }

  // required int32 reserved = 19 [default = 0];
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(19, this->_internal_reserved(), target);
  }

  // required int32 extended_solution_status = 20;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(20, this->_internal_extended_solution_status(), target);
  }

  // required int32 galileo_beidou_sig_mask = 21;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(21, this->_internal_galileo_beidou_sig_mask(), target);
  }

  // required int32 gps_glonass_sig_mask = 22;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(22, this->_internal_gps_glonass_sig_mask(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:civ.drivers.rawgnss.Bestpos)
  return target;
}

size_t Bestpos::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:civ.drivers.rawgnss.Bestpos)
  size_t total_size = 0;

  if (_internal_has_base_station_id()) {
    // required string base_station_id = 12;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_base_station_id());
  }

  if (_internal_has_gnss_header()) {
    // required .civ.drivers.rawgnss.GnssHeader gnss_header = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *gnss_header_);
  }

  if (_internal_has_latitude_in_degree()) {
    // required double latitude_in_degree = 4;
    total_size += 1 + 8;
  }

  if (_internal_has_longitude_in_degree()) {
    // required double longitude_in_degree = 5;
    total_size += 1 + 8;
  }

  if (_internal_has_height_in_metres()) {
    // required double height_in_metres = 6;
    total_size += 1 + 8;
  }

  if (_internal_has_undulation()) {
    // required float undulation = 7;
    total_size += 1 + 4;
  }

  if (_internal_has_latitude_std_dev()) {
    // required float latitude_std_dev = 9;
    total_size += 1 + 4;
  }

  if (_internal_has_longitude_std_dev()) {
    // required float longitude_std_dev = 10;
    total_size += 1 + 4;
  }

  if (_internal_has_height_std_dev()) {
    // required float height_std_dev = 11;
    total_size += 1 + 4;
  }

  if (_internal_has_diff_age_in_seconds()) {
    // required float diff_age_in_seconds = 13;
    total_size += 1 + 4;
  }

  if (_internal_has_solution_age_in_seconds()) {
    // required float solution_age_in_seconds = 14;
    total_size += 1 + 4;
  }

  if (_internal_has_num_of_satellites_tracked()) {
    // required int32 num_of_satellites_tracked = 15;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_num_of_satellites_tracked());
  }

  if (_internal_has_num_of_satellites_used()) {
    // required int32 num_of_satellites_used = 16;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_num_of_satellites_used());
  }

  if (_internal_has_num_of_satellites_with_l1_e1_b1()) {
    // required int32 num_of_satellites_with_l1_e1_b1 = 17;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_num_of_satellites_with_l1_e1_b1());
  }

  if (_internal_has_num_of_satellites_with_multi_freq()) {
    // required int32 num_of_satellites_with_multi_freq = 18;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_num_of_satellites_with_multi_freq());
  }

  if (_internal_has_reserved()) {
    // required int32 reserved = 19 [default = 0];
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_reserved());
  }

  if (_internal_has_extended_solution_status()) {
    // required int32 extended_solution_status = 20;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_extended_solution_status());
  }

  if (_internal_has_galileo_beidou_sig_mask()) {
    // required int32 galileo_beidou_sig_mask = 21;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_galileo_beidou_sig_mask());
  }

  if (_internal_has_gps_glonass_sig_mask()) {
    // required int32 gps_glonass_sig_mask = 22;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_gps_glonass_sig_mask());
  }

  if (_internal_has_datum_id()) {
    // required .civ.drivers.rawgnss.DatumID datum_id = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_datum_id());
  }

  return total_size;
}
size_t Bestpos::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:civ.drivers.rawgnss.Bestpos)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x003ffff3) ^ 0x003ffff3) == 0) {  // All required fields are present.
    // required string base_station_id = 12;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_base_station_id());

    // required .civ.drivers.rawgnss.GnssHeader gnss_header = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *gnss_header_);

    // required double latitude_in_degree = 4;
    total_size += 1 + 8;

    // required double longitude_in_degree = 5;
    total_size += 1 + 8;

    // required double height_in_metres = 6;
    total_size += 1 + 8;

    // required float undulation = 7;
    total_size += 1 + 4;

    // required float latitude_std_dev = 9;
    total_size += 1 + 4;

    // required float longitude_std_dev = 10;
    total_size += 1 + 4;

    // required float height_std_dev = 11;
    total_size += 1 + 4;

    // required float diff_age_in_seconds = 13;
    total_size += 1 + 4;

    // required float solution_age_in_seconds = 14;
    total_size += 1 + 4;

    // required int32 num_of_satellites_tracked = 15;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_num_of_satellites_tracked());

    // required int32 num_of_satellites_used = 16;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_num_of_satellites_used());

    // required int32 num_of_satellites_with_l1_e1_b1 = 17;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_num_of_satellites_with_l1_e1_b1());

    // required int32 num_of_satellites_with_multi_freq = 18;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_num_of_satellites_with_multi_freq());

    // required int32 reserved = 19 [default = 0];
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_reserved());

    // required int32 extended_solution_status = 20;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_extended_solution_status());

    // required int32 galileo_beidou_sig_mask = 21;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_galileo_beidou_sig_mask());

    // required int32 gps_glonass_sig_mask = 22;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_gps_glonass_sig_mask());

    // required .civ.drivers.rawgnss.DatumID datum_id = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_datum_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000cu) {
    // optional .civ.drivers.rawgnss.SolutionStatus solution_status = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_solution_status());
    }

    // optional .civ.drivers.rawgnss.PositonVelocityType pos_type = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_pos_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Bestpos::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:civ.drivers.rawgnss.Bestpos)
  GOOGLE_DCHECK_NE(&from, this);
  const Bestpos* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Bestpos>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:civ.drivers.rawgnss.Bestpos)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:civ.drivers.rawgnss.Bestpos)
    MergeFrom(*source);
  }
}

void Bestpos::MergeFrom(const Bestpos& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:civ.drivers.rawgnss.Bestpos)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_base_station_id(from._internal_base_station_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_gnss_header()->::civ::drivers::rawgnss::GnssHeader::MergeFrom(from._internal_gnss_header());
    }
    if (cached_has_bits & 0x00000004u) {
      solution_status_ = from.solution_status_;
    }
    if (cached_has_bits & 0x00000008u) {
      pos_type_ = from.pos_type_;
    }
    if (cached_has_bits & 0x00000010u) {
      latitude_in_degree_ = from.latitude_in_degree_;
    }
    if (cached_has_bits & 0x00000020u) {
      longitude_in_degree_ = from.longitude_in_degree_;
    }
    if (cached_has_bits & 0x00000040u) {
      height_in_metres_ = from.height_in_metres_;
    }
    if (cached_has_bits & 0x00000080u) {
      undulation_ = from.undulation_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      latitude_std_dev_ = from.latitude_std_dev_;
    }
    if (cached_has_bits & 0x00000200u) {
      longitude_std_dev_ = from.longitude_std_dev_;
    }
    if (cached_has_bits & 0x00000400u) {
      height_std_dev_ = from.height_std_dev_;
    }
    if (cached_has_bits & 0x00000800u) {
      diff_age_in_seconds_ = from.diff_age_in_seconds_;
    }
    if (cached_has_bits & 0x00001000u) {
      solution_age_in_seconds_ = from.solution_age_in_seconds_;
    }
    if (cached_has_bits & 0x00002000u) {
      num_of_satellites_tracked_ = from.num_of_satellites_tracked_;
    }
    if (cached_has_bits & 0x00004000u) {
      num_of_satellites_used_ = from.num_of_satellites_used_;
    }
    if (cached_has_bits & 0x00008000u) {
      num_of_satellites_with_l1_e1_b1_ = from.num_of_satellites_with_l1_e1_b1_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x003f0000u) {
    if (cached_has_bits & 0x00010000u) {
      num_of_satellites_with_multi_freq_ = from.num_of_satellites_with_multi_freq_;
    }
    if (cached_has_bits & 0x00020000u) {
      reserved_ = from.reserved_;
    }
    if (cached_has_bits & 0x00040000u) {
      extended_solution_status_ = from.extended_solution_status_;
    }
    if (cached_has_bits & 0x00080000u) {
      galileo_beidou_sig_mask_ = from.galileo_beidou_sig_mask_;
    }
    if (cached_has_bits & 0x00100000u) {
      gps_glonass_sig_mask_ = from.gps_glonass_sig_mask_;
    }
    if (cached_has_bits & 0x00200000u) {
      datum_id_ = from.datum_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Bestpos::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:civ.drivers.rawgnss.Bestpos)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Bestpos::CopyFrom(const Bestpos& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:civ.drivers.rawgnss.Bestpos)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Bestpos::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_gnss_header()) {
    if (!gnss_header_->IsInitialized()) return false;
  }
  return true;
}

void Bestpos::InternalSwap(Bestpos* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  base_station_id_.Swap(&other->base_station_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Bestpos, gps_glonass_sig_mask_)
      + sizeof(Bestpos::gps_glonass_sig_mask_)
      - PROTOBUF_FIELD_OFFSET(Bestpos, gnss_header_)>(
          reinterpret_cast<char*>(&gnss_header_),
          reinterpret_cast<char*>(&other->gnss_header_));
  swap(datum_id_, other->datum_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Bestpos::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GNGGA::_Internal {
 public:
  using HasBits = decltype(std::declval<GNGGA>()._has_bits_);
  static const ::civ::drivers::rawgnss::LogHeader& log_header(const GNGGA* msg);
  static void set_has_log_header(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_utc_in_seconds(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_latitude(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_latitude_dir(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_longitude(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_longitude_dir(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_quality(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_num_of_satellites_used(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_hdop(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_alt(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_utc_hhmmss(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_latitude_deg(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_longitude_deg(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
};

const ::civ::drivers::rawgnss::LogHeader&
GNGGA::_Internal::log_header(const GNGGA* msg) {
  return *msg->log_header_;
}
GNGGA::GNGGA(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:civ.drivers.rawgnss.GNGGA)
}
GNGGA::GNGGA(const GNGGA& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  utc_hhmmss_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_utc_hhmmss()) {
    utc_hhmmss_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_utc_hhmmss(), 
      GetArena());
  }
  if (from._internal_has_log_header()) {
    log_header_ = new ::civ::drivers::rawgnss::LogHeader(*from.log_header_);
  } else {
    log_header_ = nullptr;
  }
  ::memcpy(&utc_in_seconds_, &from.utc_in_seconds_,
    static_cast<size_t>(reinterpret_cast<char*>(&longitude_deg_) -
    reinterpret_cast<char*>(&utc_in_seconds_)) + sizeof(longitude_deg_));
  // @@protoc_insertion_point(copy_constructor:civ.drivers.rawgnss.GNGGA)
}

void GNGGA::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GNGGA_message_2fdrivers_2fgnss_2fproto_2fraw_5fgnss_2eproto.base);
  utc_hhmmss_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&log_header_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&longitude_deg_) -
      reinterpret_cast<char*>(&log_header_)) + sizeof(longitude_deg_));
}

GNGGA::~GNGGA() {
  // @@protoc_insertion_point(destructor:civ.drivers.rawgnss.GNGGA)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GNGGA::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  utc_hhmmss_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete log_header_;
}

void GNGGA::ArenaDtor(void* object) {
  GNGGA* _this = reinterpret_cast< GNGGA* >(object);
  (void)_this;
}
void GNGGA::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GNGGA::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GNGGA& GNGGA::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GNGGA_message_2fdrivers_2fgnss_2fproto_2fraw_5fgnss_2eproto.base);
  return *internal_default_instance();
}


void GNGGA::Clear() {
// @@protoc_insertion_point(message_clear_start:civ.drivers.rawgnss.GNGGA)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      utc_hhmmss_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(log_header_ != nullptr);
      log_header_->Clear();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&utc_in_seconds_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&quality_) -
        reinterpret_cast<char*>(&utc_in_seconds_)) + sizeof(quality_));
  }
  if (cached_has_bits & 0x00001f00u) {
    ::memset(&num_of_satellites_used_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&longitude_deg_) -
        reinterpret_cast<char*>(&num_of_satellites_used_)) + sizeof(longitude_deg_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GNGGA::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .civ.drivers.rawgnss.LogHeader log_header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_log_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double utc_in_seconds = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_utc_in_seconds(&has_bits);
          utc_in_seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional float latitude = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_latitude(&has_bits);
          latitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional .civ.drivers.rawgnss.GNGGA.LatitudeDirection latitude_dir = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::civ::drivers::rawgnss::GNGGA_LatitudeDirection_IsValid(val))) {
            _internal_set_latitude_dir(static_cast<::civ::drivers::rawgnss::GNGGA_LatitudeDirection>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional float longitude = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_longitude(&has_bits);
          longitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional .civ.drivers.rawgnss.GNGGA.LongitudeDirection longitude_dir = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::civ::drivers::rawgnss::GNGGA_LongitudeDirection_IsValid(val))) {
            _internal_set_longitude_dir(static_cast<::civ::drivers::rawgnss::GNGGA_LongitudeDirection>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(6, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional int32 quality = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_quality(&has_bits);
          quality_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 num_of_satellites_used = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_num_of_satellites_used(&has_bits);
          num_of_satellites_used_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float hdop = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          _Internal::set_has_hdop(&has_bits);
          hdop_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float alt = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          _Internal::set_has_alt(&has_bits);
          alt_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional string utc_hhmmss = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_utc_hhmmss();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "civ.drivers.rawgnss.GNGGA.utc_hhmmss");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float latitude_deg = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 101)) {
          _Internal::set_has_latitude_deg(&has_bits);
          latitude_deg_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float longitude_deg = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 109)) {
          _Internal::set_has_longitude_deg(&has_bits);
          longitude_deg_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GNGGA::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:civ.drivers.rawgnss.GNGGA)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .civ.drivers.rawgnss.LogHeader log_header = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::log_header(this), target, stream);
  }

  // optional double utc_in_seconds = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_utc_in_seconds(), target);
  }

  // optional float latitude = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_latitude(), target);
  }

  // optional .civ.drivers.rawgnss.GNGGA.LatitudeDirection latitude_dir = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_latitude_dir(), target);
  }

  // optional float longitude = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_longitude(), target);
  }

  // optional .civ.drivers.rawgnss.GNGGA.LongitudeDirection longitude_dir = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_longitude_dir(), target);
  }

  // optional int32 quality = 7;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_quality(), target);
  }

  // optional int32 num_of_satellites_used = 8;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_num_of_satellites_used(), target);
  }

  // optional float hdop = 9;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_hdop(), target);
  }

  // optional float alt = 10;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(10, this->_internal_alt(), target);
  }

  // optional string utc_hhmmss = 11;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_utc_hhmmss().data(), static_cast<int>(this->_internal_utc_hhmmss().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "civ.drivers.rawgnss.GNGGA.utc_hhmmss");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_utc_hhmmss(), target);
  }

  // optional float latitude_deg = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(12, this->_internal_latitude_deg(), target);
  }

  // optional float longitude_deg = 13;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(13, this->_internal_longitude_deg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:civ.drivers.rawgnss.GNGGA)
  return target;
}

size_t GNGGA::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:civ.drivers.rawgnss.GNGGA)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string utc_hhmmss = 11;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_utc_hhmmss());
    }

    // optional .civ.drivers.rawgnss.LogHeader log_header = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *log_header_);
    }

    // optional double utc_in_seconds = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional float latitude = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional .civ.drivers.rawgnss.GNGGA.LatitudeDirection latitude_dir = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_latitude_dir());
    }

    // optional float longitude = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

    // optional .civ.drivers.rawgnss.GNGGA.LongitudeDirection longitude_dir = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_longitude_dir());
    }

    // optional int32 quality = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_quality());
    }

  }
  if (cached_has_bits & 0x00001f00u) {
    // optional int32 num_of_satellites_used = 8;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_num_of_satellites_used());
    }

    // optional float hdop = 9;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 4;
    }

    // optional float alt = 10;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 4;
    }

    // optional float latitude_deg = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 4;
    }

    // optional float longitude_deg = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GNGGA::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:civ.drivers.rawgnss.GNGGA)
  GOOGLE_DCHECK_NE(&from, this);
  const GNGGA* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GNGGA>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:civ.drivers.rawgnss.GNGGA)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:civ.drivers.rawgnss.GNGGA)
    MergeFrom(*source);
  }
}

void GNGGA::MergeFrom(const GNGGA& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:civ.drivers.rawgnss.GNGGA)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_utc_hhmmss(from._internal_utc_hhmmss());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_log_header()->::civ::drivers::rawgnss::LogHeader::MergeFrom(from._internal_log_header());
    }
    if (cached_has_bits & 0x00000004u) {
      utc_in_seconds_ = from.utc_in_seconds_;
    }
    if (cached_has_bits & 0x00000008u) {
      latitude_ = from.latitude_;
    }
    if (cached_has_bits & 0x00000010u) {
      latitude_dir_ = from.latitude_dir_;
    }
    if (cached_has_bits & 0x00000020u) {
      longitude_ = from.longitude_;
    }
    if (cached_has_bits & 0x00000040u) {
      longitude_dir_ = from.longitude_dir_;
    }
    if (cached_has_bits & 0x00000080u) {
      quality_ = from.quality_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00001f00u) {
    if (cached_has_bits & 0x00000100u) {
      num_of_satellites_used_ = from.num_of_satellites_used_;
    }
    if (cached_has_bits & 0x00000200u) {
      hdop_ = from.hdop_;
    }
    if (cached_has_bits & 0x00000400u) {
      alt_ = from.alt_;
    }
    if (cached_has_bits & 0x00000800u) {
      latitude_deg_ = from.latitude_deg_;
    }
    if (cached_has_bits & 0x00001000u) {
      longitude_deg_ = from.longitude_deg_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GNGGA::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:civ.drivers.rawgnss.GNGGA)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GNGGA::CopyFrom(const GNGGA& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:civ.drivers.rawgnss.GNGGA)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GNGGA::IsInitialized() const {
  if (_internal_has_log_header()) {
    if (!log_header_->IsInitialized()) return false;
  }
  return true;
}

void GNGGA::InternalSwap(GNGGA* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  utc_hhmmss_.Swap(&other->utc_hhmmss_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GNGGA, longitude_deg_)
      + sizeof(GNGGA::longitude_deg_)
      - PROTOBUF_FIELD_OFFSET(GNGGA, log_header_)>(
          reinterpret_cast<char*>(&log_header_),
          reinterpret_cast<char*>(&other->log_header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GNGGA::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GNVTG::_Internal {
 public:
  using HasBits = decltype(std::declval<GNVTG>()._has_bits_);
  static const ::civ::drivers::rawgnss::LogHeader& log_header(const GNVTG* msg);
  static void set_has_log_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_track_true(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_true_track_indicator(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_track_mag(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_magnetic_track_indicator(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_speed_kn(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_nautical_speed_indicator(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_speed_km(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_speed_indicator(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_mode_indicator(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x000003ff) ^ 0x000003ff) != 0;
  }
};

const ::civ::drivers::rawgnss::LogHeader&
GNVTG::_Internal::log_header(const GNVTG* msg) {
  return *msg->log_header_;
}
GNVTG::GNVTG(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:civ.drivers.rawgnss.GNVTG)
}
GNVTG::GNVTG(const GNVTG& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_log_header()) {
    log_header_ = new ::civ::drivers::rawgnss::LogHeader(*from.log_header_);
  } else {
    log_header_ = nullptr;
  }
  ::memcpy(&track_true_, &from.track_true_,
    static_cast<size_t>(reinterpret_cast<char*>(&mode_indicator_) -
    reinterpret_cast<char*>(&track_true_)) + sizeof(mode_indicator_));
  // @@protoc_insertion_point(copy_constructor:civ.drivers.rawgnss.GNVTG)
}

void GNVTG::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GNVTG_message_2fdrivers_2fgnss_2fproto_2fraw_5fgnss_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&log_header_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&speed_km_) -
      reinterpret_cast<char*>(&log_header_)) + sizeof(speed_km_));
  mode_indicator_ = 1;
}

GNVTG::~GNVTG() {
  // @@protoc_insertion_point(destructor:civ.drivers.rawgnss.GNVTG)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GNVTG::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete log_header_;
}

void GNVTG::ArenaDtor(void* object) {
  GNVTG* _this = reinterpret_cast< GNVTG* >(object);
  (void)_this;
}
void GNVTG::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GNVTG::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GNVTG& GNVTG::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GNVTG_message_2fdrivers_2fgnss_2fproto_2fraw_5fgnss_2eproto.base);
  return *internal_default_instance();
}


void GNVTG::Clear() {
// @@protoc_insertion_point(message_clear_start:civ.drivers.rawgnss.GNVTG)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(log_header_ != nullptr);
    log_header_->Clear();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&track_true_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&speed_indicator_) -
        reinterpret_cast<char*>(&track_true_)) + sizeof(speed_indicator_));
  }
  if (cached_has_bits & 0x00000300u) {
    speed_km_ = 0;
    mode_indicator_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GNVTG::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .civ.drivers.rawgnss.LogHeader log_header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_log_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required float track_true = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_track_true(&has_bits);
          track_true_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required bool true_track_indicator = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_true_track_indicator(&has_bits);
          true_track_indicator_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required float track_mag = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_track_mag(&has_bits);
          track_mag_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required bool magnetic_track_indicator = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_magnetic_track_indicator(&has_bits);
          magnetic_track_indicator_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required float speed_kn = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_speed_kn(&has_bits);
          speed_kn_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required bool nautical_speed_indicator = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_nautical_speed_indicator(&has_bits);
          nautical_speed_indicator_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required float speed_km = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          _Internal::set_has_speed_km(&has_bits);
          speed_km_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required bool speed_indicator = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_speed_indicator(&has_bits);
          speed_indicator_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .civ.drivers.rawgnss.GNVTG.PositionSystemModeIndicator mode_indicator = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::civ::drivers::rawgnss::GNVTG_PositionSystemModeIndicator_IsValid(val))) {
            _internal_set_mode_indicator(static_cast<::civ::drivers::rawgnss::GNVTG_PositionSystemModeIndicator>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(10, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GNVTG::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:civ.drivers.rawgnss.GNVTG)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .civ.drivers.rawgnss.LogHeader log_header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::log_header(this), target, stream);
  }

  // required float track_true = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_track_true(), target);
  }

  // required bool true_track_indicator = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_true_track_indicator(), target);
  }

  // required float track_mag = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_track_mag(), target);
  }

  // required bool magnetic_track_indicator = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_magnetic_track_indicator(), target);
  }

  // required float speed_kn = 6;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_speed_kn(), target);
  }

  // required bool nautical_speed_indicator = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_nautical_speed_indicator(), target);
  }

  // required float speed_km = 8;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_speed_km(), target);
  }

  // required bool speed_indicator = 9;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_speed_indicator(), target);
  }

  // required .civ.drivers.rawgnss.GNVTG.PositionSystemModeIndicator mode_indicator = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      10, this->_internal_mode_indicator(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:civ.drivers.rawgnss.GNVTG)
  return target;
}

size_t GNVTG::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:civ.drivers.rawgnss.GNVTG)
  size_t total_size = 0;

  if (_internal_has_log_header()) {
    // required .civ.drivers.rawgnss.LogHeader log_header = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *log_header_);
  }

  if (_internal_has_track_true()) {
    // required float track_true = 2;
    total_size += 1 + 4;
  }

  if (_internal_has_track_mag()) {
    // required float track_mag = 4;
    total_size += 1 + 4;
  }

  if (_internal_has_speed_kn()) {
    // required float speed_kn = 6;
    total_size += 1 + 4;
  }

  if (_internal_has_true_track_indicator()) {
    // required bool true_track_indicator = 3;
    total_size += 1 + 1;
  }

  if (_internal_has_magnetic_track_indicator()) {
    // required bool magnetic_track_indicator = 5;
    total_size += 1 + 1;
  }

  if (_internal_has_nautical_speed_indicator()) {
    // required bool nautical_speed_indicator = 7;
    total_size += 1 + 1;
  }

  if (_internal_has_speed_indicator()) {
    // required bool speed_indicator = 9;
    total_size += 1 + 1;
  }

  if (_internal_has_speed_km()) {
    // required float speed_km = 8;
    total_size += 1 + 4;
  }

  if (_internal_has_mode_indicator()) {
    // required .civ.drivers.rawgnss.GNVTG.PositionSystemModeIndicator mode_indicator = 10;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_mode_indicator());
  }

  return total_size;
}
size_t GNVTG::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:civ.drivers.rawgnss.GNVTG)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x000003ff) ^ 0x000003ff) == 0) {  // All required fields are present.
    // required .civ.drivers.rawgnss.LogHeader log_header = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *log_header_);

    // required float track_true = 2;
    total_size += 1 + 4;

    // required float track_mag = 4;
    total_size += 1 + 4;

    // required float speed_kn = 6;
    total_size += 1 + 4;

    // required bool true_track_indicator = 3;
    total_size += 1 + 1;

    // required bool magnetic_track_indicator = 5;
    total_size += 1 + 1;

    // required bool nautical_speed_indicator = 7;
    total_size += 1 + 1;

    // required bool speed_indicator = 9;
    total_size += 1 + 1;

    // required float speed_km = 8;
    total_size += 1 + 4;

    // required .civ.drivers.rawgnss.GNVTG.PositionSystemModeIndicator mode_indicator = 10;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_mode_indicator());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GNVTG::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:civ.drivers.rawgnss.GNVTG)
  GOOGLE_DCHECK_NE(&from, this);
  const GNVTG* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GNVTG>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:civ.drivers.rawgnss.GNVTG)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:civ.drivers.rawgnss.GNVTG)
    MergeFrom(*source);
  }
}

void GNVTG::MergeFrom(const GNVTG& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:civ.drivers.rawgnss.GNVTG)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_log_header()->::civ::drivers::rawgnss::LogHeader::MergeFrom(from._internal_log_header());
    }
    if (cached_has_bits & 0x00000002u) {
      track_true_ = from.track_true_;
    }
    if (cached_has_bits & 0x00000004u) {
      track_mag_ = from.track_mag_;
    }
    if (cached_has_bits & 0x00000008u) {
      speed_kn_ = from.speed_kn_;
    }
    if (cached_has_bits & 0x00000010u) {
      true_track_indicator_ = from.true_track_indicator_;
    }
    if (cached_has_bits & 0x00000020u) {
      magnetic_track_indicator_ = from.magnetic_track_indicator_;
    }
    if (cached_has_bits & 0x00000040u) {
      nautical_speed_indicator_ = from.nautical_speed_indicator_;
    }
    if (cached_has_bits & 0x00000080u) {
      speed_indicator_ = from.speed_indicator_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      speed_km_ = from.speed_km_;
    }
    if (cached_has_bits & 0x00000200u) {
      mode_indicator_ = from.mode_indicator_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GNVTG::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:civ.drivers.rawgnss.GNVTG)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GNVTG::CopyFrom(const GNVTG& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:civ.drivers.rawgnss.GNVTG)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GNVTG::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_log_header()) {
    if (!log_header_->IsInitialized()) return false;
  }
  return true;
}

void GNVTG::InternalSwap(GNVTG* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GNVTG, speed_km_)
      + sizeof(GNVTG::speed_km_)
      - PROTOBUF_FIELD_OFFSET(GNVTG, log_header_)>(
          reinterpret_cast<char*>(&log_header_),
          reinterpret_cast<char*>(&other->log_header_));
  swap(mode_indicator_, other->mode_indicator_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GNVTG::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Heading2::_Internal {
 public:
  using HasBits = decltype(std::declval<Heading2>()._has_bits_);
  static const ::civ::drivers::rawgnss::GnssHeader& gnss_header(const Heading2* msg);
  static void set_has_gnss_header(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_solution_status(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_pos_type(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_baseline_length_in_metres(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_heading_in_degrees(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_pitch_in_degrees(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_reserved(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_heading_std_dev(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_pitch_std_dev(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_rover_receiver_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_master_receiver_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_num_of_satellites_tracked(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_num_of_satellites_in_solution(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_num_of_satellites_above_mask_angle(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_num_of_satellites_above_mask_angle_l2(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_solution_source(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_extended_solution_status(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_galileo_beidou_sig_mask(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_gps_glonass_sig_mask(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0007ffe7) ^ 0x0007ffe7) != 0;
  }
};

const ::civ::drivers::rawgnss::GnssHeader&
Heading2::_Internal::gnss_header(const Heading2* msg) {
  return *msg->gnss_header_;
}
Heading2::Heading2(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:civ.drivers.rawgnss.Heading2)
}
Heading2::Heading2(const Heading2& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  rover_receiver_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_rover_receiver_id()) {
    rover_receiver_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_rover_receiver_id(), 
      GetArena());
  }
  master_receiver_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_master_receiver_id()) {
    master_receiver_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_master_receiver_id(), 
      GetArena());
  }
  if (from._internal_has_gnss_header()) {
    gnss_header_ = new ::civ::drivers::rawgnss::GnssHeader(*from.gnss_header_);
  } else {
    gnss_header_ = nullptr;
  }
  ::memcpy(&solution_status_, &from.solution_status_,
    static_cast<size_t>(reinterpret_cast<char*>(&gps_glonass_sig_mask_) -
    reinterpret_cast<char*>(&solution_status_)) + sizeof(gps_glonass_sig_mask_));
  // @@protoc_insertion_point(copy_constructor:civ.drivers.rawgnss.Heading2)
}

void Heading2::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Heading2_message_2fdrivers_2fgnss_2fproto_2fraw_5fgnss_2eproto.base);
  rover_receiver_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  master_receiver_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&gnss_header_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&gps_glonass_sig_mask_) -
      reinterpret_cast<char*>(&gnss_header_)) + sizeof(gps_glonass_sig_mask_));
}

Heading2::~Heading2() {
  // @@protoc_insertion_point(destructor:civ.drivers.rawgnss.Heading2)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Heading2::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  rover_receiver_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  master_receiver_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete gnss_header_;
}

void Heading2::ArenaDtor(void* object) {
  Heading2* _this = reinterpret_cast< Heading2* >(object);
  (void)_this;
}
void Heading2::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Heading2::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Heading2& Heading2::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Heading2_message_2fdrivers_2fgnss_2fproto_2fraw_5fgnss_2eproto.base);
  return *internal_default_instance();
}


void Heading2::Clear() {
// @@protoc_insertion_point(message_clear_start:civ.drivers.rawgnss.Heading2)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      rover_receiver_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      master_receiver_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(gnss_header_ != nullptr);
      gnss_header_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&solution_status_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&pitch_in_degrees_) -
        reinterpret_cast<char*>(&solution_status_)) + sizeof(pitch_in_degrees_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&reserved_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&solution_source_) -
        reinterpret_cast<char*>(&reserved_)) + sizeof(solution_source_));
  }
  if (cached_has_bits & 0x00070000u) {
    ::memset(&extended_solution_status_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&gps_glonass_sig_mask_) -
        reinterpret_cast<char*>(&extended_solution_status_)) + sizeof(gps_glonass_sig_mask_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Heading2::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .civ.drivers.rawgnss.GnssHeader gnss_header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_gnss_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .civ.drivers.rawgnss.SolutionStatus solution_status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::civ::drivers::rawgnss::SolutionStatus_IsValid(val))) {
            _internal_set_solution_status(static_cast<::civ::drivers::rawgnss::SolutionStatus>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .civ.drivers.rawgnss.PositonVelocityType pos_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::civ::drivers::rawgnss::PositonVelocityType_IsValid(val))) {
            _internal_set_pos_type(static_cast<::civ::drivers::rawgnss::PositonVelocityType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // required float baseline_length_in_metres = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_baseline_length_in_metres(&has_bits);
          baseline_length_in_metres_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float heading_in_degrees = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_heading_in_degrees(&has_bits);
          heading_in_degrees_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float pitch_in_degrees = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_pitch_in_degrees(&has_bits);
          pitch_in_degrees_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float reserved = 7 [default = 0];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          _Internal::set_has_reserved(&has_bits);
          reserved_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float heading_std_dev = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          _Internal::set_has_heading_std_dev(&has_bits);
          heading_std_dev_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float pitch_std_dev = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          _Internal::set_has_pitch_std_dev(&has_bits);
          pitch_std_dev_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required string rover_receiver_id = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_rover_receiver_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "civ.drivers.rawgnss.Heading2.rover_receiver_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string master_receiver_id = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_master_receiver_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "civ.drivers.rawgnss.Heading2.master_receiver_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 num_of_satellites_tracked = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_num_of_satellites_tracked(&has_bits);
          num_of_satellites_tracked_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 num_of_satellites_in_solution = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_num_of_satellites_in_solution(&has_bits);
          num_of_satellites_in_solution_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 num_of_satellites_above_mask_angle = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_num_of_satellites_above_mask_angle(&has_bits);
          num_of_satellites_above_mask_angle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 num_of_satellites_above_mask_angle_l2 = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_num_of_satellites_above_mask_angle_l2(&has_bits);
          num_of_satellites_above_mask_angle_l2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 solution_source = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_solution_source(&has_bits);
          solution_source_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 extended_solution_status = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_extended_solution_status(&has_bits);
          extended_solution_status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 galileo_beidou_sig_mask = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_galileo_beidou_sig_mask(&has_bits);
          galileo_beidou_sig_mask_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 gps_glonass_sig_mask = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_gps_glonass_sig_mask(&has_bits);
          gps_glonass_sig_mask_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Heading2::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:civ.drivers.rawgnss.Heading2)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .civ.drivers.rawgnss.GnssHeader gnss_header = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::gnss_header(this), target, stream);
  }

  // optional .civ.drivers.rawgnss.SolutionStatus solution_status = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_solution_status(), target);
  }

  // optional .civ.drivers.rawgnss.PositonVelocityType pos_type = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_pos_type(), target);
  }

  // required float baseline_length_in_metres = 4;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_baseline_length_in_metres(), target);
  }

  // required float heading_in_degrees = 5;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_heading_in_degrees(), target);
  }

  // required float pitch_in_degrees = 6;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_pitch_in_degrees(), target);
  }

  // required float reserved = 7 [default = 0];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_reserved(), target);
  }

  // required float heading_std_dev = 8;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_heading_std_dev(), target);
  }

  // required float pitch_std_dev = 9;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_pitch_std_dev(), target);
  }

  // required string rover_receiver_id = 10;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_rover_receiver_id().data(), static_cast<int>(this->_internal_rover_receiver_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "civ.drivers.rawgnss.Heading2.rover_receiver_id");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_rover_receiver_id(), target);
  }

  // required string master_receiver_id = 11;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_master_receiver_id().data(), static_cast<int>(this->_internal_master_receiver_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "civ.drivers.rawgnss.Heading2.master_receiver_id");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_master_receiver_id(), target);
  }

  // required uint32 num_of_satellites_tracked = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_num_of_satellites_tracked(), target);
  }

  // required uint32 num_of_satellites_in_solution = 13;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(13, this->_internal_num_of_satellites_in_solution(), target);
  }

  // required uint32 num_of_satellites_above_mask_angle = 14;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(14, this->_internal_num_of_satellites_above_mask_angle(), target);
  }

  // required uint32 num_of_satellites_above_mask_angle_l2 = 15;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(15, this->_internal_num_of_satellites_above_mask_angle_l2(), target);
  }

  // required uint32 solution_source = 16;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(16, this->_internal_solution_source(), target);
  }

  // required uint32 extended_solution_status = 17;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(17, this->_internal_extended_solution_status(), target);
  }

  // required uint32 galileo_beidou_sig_mask = 18;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(18, this->_internal_galileo_beidou_sig_mask(), target);
  }

  // required uint32 gps_glonass_sig_mask = 19;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(19, this->_internal_gps_glonass_sig_mask(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:civ.drivers.rawgnss.Heading2)
  return target;
}

size_t Heading2::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:civ.drivers.rawgnss.Heading2)
  size_t total_size = 0;

  if (_internal_has_rover_receiver_id()) {
    // required string rover_receiver_id = 10;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_rover_receiver_id());
  }

  if (_internal_has_master_receiver_id()) {
    // required string master_receiver_id = 11;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_master_receiver_id());
  }

  if (_internal_has_gnss_header()) {
    // required .civ.drivers.rawgnss.GnssHeader gnss_header = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *gnss_header_);
  }

  if (_internal_has_baseline_length_in_metres()) {
    // required float baseline_length_in_metres = 4;
    total_size += 1 + 4;
  }

  if (_internal_has_heading_in_degrees()) {
    // required float heading_in_degrees = 5;
    total_size += 1 + 4;
  }

  if (_internal_has_pitch_in_degrees()) {
    // required float pitch_in_degrees = 6;
    total_size += 1 + 4;
  }

  if (_internal_has_reserved()) {
    // required float reserved = 7 [default = 0];
    total_size += 1 + 4;
  }

  if (_internal_has_heading_std_dev()) {
    // required float heading_std_dev = 8;
    total_size += 1 + 4;
  }

  if (_internal_has_pitch_std_dev()) {
    // required float pitch_std_dev = 9;
    total_size += 1 + 4;
  }

  if (_internal_has_num_of_satellites_tracked()) {
    // required uint32 num_of_satellites_tracked = 12;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_num_of_satellites_tracked());
  }

  if (_internal_has_num_of_satellites_in_solution()) {
    // required uint32 num_of_satellites_in_solution = 13;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_num_of_satellites_in_solution());
  }

  if (_internal_has_num_of_satellites_above_mask_angle()) {
    // required uint32 num_of_satellites_above_mask_angle = 14;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_num_of_satellites_above_mask_angle());
  }

  if (_internal_has_num_of_satellites_above_mask_angle_l2()) {
    // required uint32 num_of_satellites_above_mask_angle_l2 = 15;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_num_of_satellites_above_mask_angle_l2());
  }

  if (_internal_has_solution_source()) {
    // required uint32 solution_source = 16;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_solution_source());
  }

  if (_internal_has_extended_solution_status()) {
    // required uint32 extended_solution_status = 17;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_extended_solution_status());
  }

  if (_internal_has_galileo_beidou_sig_mask()) {
    // required uint32 galileo_beidou_sig_mask = 18;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_galileo_beidou_sig_mask());
  }

  if (_internal_has_gps_glonass_sig_mask()) {
    // required uint32 gps_glonass_sig_mask = 19;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_gps_glonass_sig_mask());
  }

  return total_size;
}
size_t Heading2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:civ.drivers.rawgnss.Heading2)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0007ffe7) ^ 0x0007ffe7) == 0) {  // All required fields are present.
    // required string rover_receiver_id = 10;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_rover_receiver_id());

    // required string master_receiver_id = 11;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_master_receiver_id());

    // required .civ.drivers.rawgnss.GnssHeader gnss_header = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *gnss_header_);

    // required float baseline_length_in_metres = 4;
    total_size += 1 + 4;

    // required float heading_in_degrees = 5;
    total_size += 1 + 4;

    // required float pitch_in_degrees = 6;
    total_size += 1 + 4;

    // required float reserved = 7 [default = 0];
    total_size += 1 + 4;

    // required float heading_std_dev = 8;
    total_size += 1 + 4;

    // required float pitch_std_dev = 9;
    total_size += 1 + 4;

    // required uint32 num_of_satellites_tracked = 12;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_num_of_satellites_tracked());

    // required uint32 num_of_satellites_in_solution = 13;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_num_of_satellites_in_solution());

    // required uint32 num_of_satellites_above_mask_angle = 14;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_num_of_satellites_above_mask_angle());

    // required uint32 num_of_satellites_above_mask_angle_l2 = 15;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_num_of_satellites_above_mask_angle_l2());

    // required uint32 solution_source = 16;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_solution_source());

    // required uint32 extended_solution_status = 17;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_extended_solution_status());

    // required uint32 galileo_beidou_sig_mask = 18;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_galileo_beidou_sig_mask());

    // required uint32 gps_glonass_sig_mask = 19;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_gps_glonass_sig_mask());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000018u) {
    // optional .civ.drivers.rawgnss.SolutionStatus solution_status = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_solution_status());
    }

    // optional .civ.drivers.rawgnss.PositonVelocityType pos_type = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_pos_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Heading2::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:civ.drivers.rawgnss.Heading2)
  GOOGLE_DCHECK_NE(&from, this);
  const Heading2* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Heading2>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:civ.drivers.rawgnss.Heading2)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:civ.drivers.rawgnss.Heading2)
    MergeFrom(*source);
  }
}

void Heading2::MergeFrom(const Heading2& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:civ.drivers.rawgnss.Heading2)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_rover_receiver_id(from._internal_rover_receiver_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_master_receiver_id(from._internal_master_receiver_id());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_gnss_header()->::civ::drivers::rawgnss::GnssHeader::MergeFrom(from._internal_gnss_header());
    }
    if (cached_has_bits & 0x00000008u) {
      solution_status_ = from.solution_status_;
    }
    if (cached_has_bits & 0x00000010u) {
      pos_type_ = from.pos_type_;
    }
    if (cached_has_bits & 0x00000020u) {
      baseline_length_in_metres_ = from.baseline_length_in_metres_;
    }
    if (cached_has_bits & 0x00000040u) {
      heading_in_degrees_ = from.heading_in_degrees_;
    }
    if (cached_has_bits & 0x00000080u) {
      pitch_in_degrees_ = from.pitch_in_degrees_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      reserved_ = from.reserved_;
    }
    if (cached_has_bits & 0x00000200u) {
      heading_std_dev_ = from.heading_std_dev_;
    }
    if (cached_has_bits & 0x00000400u) {
      pitch_std_dev_ = from.pitch_std_dev_;
    }
    if (cached_has_bits & 0x00000800u) {
      num_of_satellites_tracked_ = from.num_of_satellites_tracked_;
    }
    if (cached_has_bits & 0x00001000u) {
      num_of_satellites_in_solution_ = from.num_of_satellites_in_solution_;
    }
    if (cached_has_bits & 0x00002000u) {
      num_of_satellites_above_mask_angle_ = from.num_of_satellites_above_mask_angle_;
    }
    if (cached_has_bits & 0x00004000u) {
      num_of_satellites_above_mask_angle_l2_ = from.num_of_satellites_above_mask_angle_l2_;
    }
    if (cached_has_bits & 0x00008000u) {
      solution_source_ = from.solution_source_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00070000u) {
    if (cached_has_bits & 0x00010000u) {
      extended_solution_status_ = from.extended_solution_status_;
    }
    if (cached_has_bits & 0x00020000u) {
      galileo_beidou_sig_mask_ = from.galileo_beidou_sig_mask_;
    }
    if (cached_has_bits & 0x00040000u) {
      gps_glonass_sig_mask_ = from.gps_glonass_sig_mask_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Heading2::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:civ.drivers.rawgnss.Heading2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Heading2::CopyFrom(const Heading2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:civ.drivers.rawgnss.Heading2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Heading2::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_gnss_header()) {
    if (!gnss_header_->IsInitialized()) return false;
  }
  return true;
}

void Heading2::InternalSwap(Heading2* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  rover_receiver_id_.Swap(&other->rover_receiver_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  master_receiver_id_.Swap(&other->master_receiver_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Heading2, gps_glonass_sig_mask_)
      + sizeof(Heading2::gps_glonass_sig_mask_)
      - PROTOBUF_FIELD_OFFSET(Heading2, gnss_header_)>(
          reinterpret_cast<char*>(&gnss_header_),
          reinterpret_cast<char*>(&other->gnss_header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Heading2::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class RawImu::_Internal {
 public:
  using HasBits = decltype(std::declval<RawImu>()._has_bits_);
  static const ::civ::drivers::rawgnss::GnssHeader& gnss_header(const RawImu* msg);
  static void set_has_gnss_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_gnss_week(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_seconds_into_week(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_imu_status(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_z_accel_output(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_y_accel_output(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_x_accel_output(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_z_gyro_output(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_y_gyro_output(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_x_gyro_output(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x000003ff) ^ 0x000003ff) != 0;
  }
};

const ::civ::drivers::rawgnss::GnssHeader&
RawImu::_Internal::gnss_header(const RawImu* msg) {
  return *msg->gnss_header_;
}
RawImu::RawImu(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:civ.drivers.rawgnss.RawImu)
}
RawImu::RawImu(const RawImu& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_gnss_header()) {
    gnss_header_ = new ::civ::drivers::rawgnss::GnssHeader(*from.gnss_header_);
  } else {
    gnss_header_ = nullptr;
  }
  ::memcpy(&seconds_into_week_, &from.seconds_into_week_,
    static_cast<size_t>(reinterpret_cast<char*>(&x_gyro_output_) -
    reinterpret_cast<char*>(&seconds_into_week_)) + sizeof(x_gyro_output_));
  // @@protoc_insertion_point(copy_constructor:civ.drivers.rawgnss.RawImu)
}

void RawImu::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RawImu_message_2fdrivers_2fgnss_2fproto_2fraw_5fgnss_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&gnss_header_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&x_gyro_output_) -
      reinterpret_cast<char*>(&gnss_header_)) + sizeof(x_gyro_output_));
}

RawImu::~RawImu() {
  // @@protoc_insertion_point(destructor:civ.drivers.rawgnss.RawImu)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RawImu::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete gnss_header_;
}

void RawImu::ArenaDtor(void* object) {
  RawImu* _this = reinterpret_cast< RawImu* >(object);
  (void)_this;
}
void RawImu::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RawImu::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RawImu& RawImu::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RawImu_message_2fdrivers_2fgnss_2fproto_2fraw_5fgnss_2eproto.base);
  return *internal_default_instance();
}


void RawImu::Clear() {
// @@protoc_insertion_point(message_clear_start:civ.drivers.rawgnss.RawImu)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(gnss_header_ != nullptr);
    gnss_header_->Clear();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&seconds_into_week_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&z_gyro_output_) -
        reinterpret_cast<char*>(&seconds_into_week_)) + sizeof(z_gyro_output_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&y_gyro_output_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&x_gyro_output_) -
        reinterpret_cast<char*>(&y_gyro_output_)) + sizeof(x_gyro_output_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RawImu::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .civ.drivers.rawgnss.GnssHeader gnss_header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_gnss_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 gnss_week = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_gnss_week(&has_bits);
          gnss_week_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required double seconds_into_week = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_seconds_into_week(&has_bits);
          seconds_into_week_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required uint32 imu_status = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_imu_status(&has_bits);
          imu_status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required double z_accel_output = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_z_accel_output(&has_bits);
          z_accel_output_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required double y_accel_output = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _Internal::set_has_y_accel_output(&has_bits);
          y_accel_output_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required double x_accel_output = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          _Internal::set_has_x_accel_output(&has_bits);
          x_accel_output_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required double z_gyro_output = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          _Internal::set_has_z_gyro_output(&has_bits);
          z_gyro_output_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required double y_gyro_output = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          _Internal::set_has_y_gyro_output(&has_bits);
          y_gyro_output_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required double x_gyro_output = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          _Internal::set_has_x_gyro_output(&has_bits);
          x_gyro_output_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RawImu::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:civ.drivers.rawgnss.RawImu)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .civ.drivers.rawgnss.GnssHeader gnss_header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::gnss_header(this), target, stream);
  }

  // required uint32 gnss_week = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_gnss_week(), target);
  }

  // required double seconds_into_week = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_seconds_into_week(), target);
  }

  // required uint32 imu_status = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_imu_status(), target);
  }

  // required double z_accel_output = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_z_accel_output(), target);
  }

  // required double y_accel_output = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_y_accel_output(), target);
  }

  // required double x_accel_output = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_x_accel_output(), target);
  }

  // required double z_gyro_output = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_z_gyro_output(), target);
  }

  // required double y_gyro_output = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->_internal_y_gyro_output(), target);
  }

  // required double x_gyro_output = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(10, this->_internal_x_gyro_output(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:civ.drivers.rawgnss.RawImu)
  return target;
}

size_t RawImu::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:civ.drivers.rawgnss.RawImu)
  size_t total_size = 0;

  if (_internal_has_gnss_header()) {
    // required .civ.drivers.rawgnss.GnssHeader gnss_header = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *gnss_header_);
  }

  if (_internal_has_seconds_into_week()) {
    // required double seconds_into_week = 3;
    total_size += 1 + 8;
  }

  if (_internal_has_gnss_week()) {
    // required uint32 gnss_week = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_gnss_week());
  }

  if (_internal_has_imu_status()) {
    // required uint32 imu_status = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_imu_status());
  }

  if (_internal_has_z_accel_output()) {
    // required double z_accel_output = 5;
    total_size += 1 + 8;
  }

  if (_internal_has_y_accel_output()) {
    // required double y_accel_output = 6;
    total_size += 1 + 8;
  }

  if (_internal_has_x_accel_output()) {
    // required double x_accel_output = 7;
    total_size += 1 + 8;
  }

  if (_internal_has_z_gyro_output()) {
    // required double z_gyro_output = 8;
    total_size += 1 + 8;
  }

  if (_internal_has_y_gyro_output()) {
    // required double y_gyro_output = 9;
    total_size += 1 + 8;
  }

  if (_internal_has_x_gyro_output()) {
    // required double x_gyro_output = 10;
    total_size += 1 + 8;
  }

  return total_size;
}
size_t RawImu::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:civ.drivers.rawgnss.RawImu)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x000003ff) ^ 0x000003ff) == 0) {  // All required fields are present.
    // required .civ.drivers.rawgnss.GnssHeader gnss_header = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *gnss_header_);

    // required double seconds_into_week = 3;
    total_size += 1 + 8;

    // required uint32 gnss_week = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_gnss_week());

    // required uint32 imu_status = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_imu_status());

    // required double z_accel_output = 5;
    total_size += 1 + 8;

    // required double y_accel_output = 6;
    total_size += 1 + 8;

    // required double x_accel_output = 7;
    total_size += 1 + 8;

    // required double z_gyro_output = 8;
    total_size += 1 + 8;

    // required double y_gyro_output = 9;
    total_size += 1 + 8;

    // required double x_gyro_output = 10;
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RawImu::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:civ.drivers.rawgnss.RawImu)
  GOOGLE_DCHECK_NE(&from, this);
  const RawImu* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RawImu>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:civ.drivers.rawgnss.RawImu)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:civ.drivers.rawgnss.RawImu)
    MergeFrom(*source);
  }
}

void RawImu::MergeFrom(const RawImu& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:civ.drivers.rawgnss.RawImu)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_gnss_header()->::civ::drivers::rawgnss::GnssHeader::MergeFrom(from._internal_gnss_header());
    }
    if (cached_has_bits & 0x00000002u) {
      seconds_into_week_ = from.seconds_into_week_;
    }
    if (cached_has_bits & 0x00000004u) {
      gnss_week_ = from.gnss_week_;
    }
    if (cached_has_bits & 0x00000008u) {
      imu_status_ = from.imu_status_;
    }
    if (cached_has_bits & 0x00000010u) {
      z_accel_output_ = from.z_accel_output_;
    }
    if (cached_has_bits & 0x00000020u) {
      y_accel_output_ = from.y_accel_output_;
    }
    if (cached_has_bits & 0x00000040u) {
      x_accel_output_ = from.x_accel_output_;
    }
    if (cached_has_bits & 0x00000080u) {
      z_gyro_output_ = from.z_gyro_output_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      y_gyro_output_ = from.y_gyro_output_;
    }
    if (cached_has_bits & 0x00000200u) {
      x_gyro_output_ = from.x_gyro_output_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RawImu::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:civ.drivers.rawgnss.RawImu)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RawImu::CopyFrom(const RawImu& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:civ.drivers.rawgnss.RawImu)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RawImu::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_gnss_header()) {
    if (!gnss_header_->IsInitialized()) return false;
  }
  return true;
}

void RawImu::InternalSwap(RawImu* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RawImu, x_gyro_output_)
      + sizeof(RawImu::x_gyro_output_)
      - PROTOBUF_FIELD_OFFSET(RawImu, gnss_header_)>(
          reinterpret_cast<char*>(&gnss_header_),
          reinterpret_cast<char*>(&other->gnss_header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RawImu::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class BestVel::_Internal {
 public:
  using HasBits = decltype(std::declval<BestVel>()._has_bits_);
  static const ::civ::drivers::rawgnss::GnssHeader& gnss_header(const BestVel* msg);
  static void set_has_gnss_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_solution_status(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_vel_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_latency(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_diff_age_in_seconds(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_horizontal_speed_over_ground(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_track_over_ground(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_vertical_speed(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_reserved(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x000001f9) ^ 0x000001f9) != 0;
  }
};

const ::civ::drivers::rawgnss::GnssHeader&
BestVel::_Internal::gnss_header(const BestVel* msg) {
  return *msg->gnss_header_;
}
BestVel::BestVel(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:civ.drivers.rawgnss.BestVel)
}
BestVel::BestVel(const BestVel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_gnss_header()) {
    gnss_header_ = new ::civ::drivers::rawgnss::GnssHeader(*from.gnss_header_);
  } else {
    gnss_header_ = nullptr;
  }
  ::memcpy(&solution_status_, &from.solution_status_,
    static_cast<size_t>(reinterpret_cast<char*>(&reserved_) -
    reinterpret_cast<char*>(&solution_status_)) + sizeof(reserved_));
  // @@protoc_insertion_point(copy_constructor:civ.drivers.rawgnss.BestVel)
}

void BestVel::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BestVel_message_2fdrivers_2fgnss_2fproto_2fraw_5fgnss_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&gnss_header_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&reserved_) -
      reinterpret_cast<char*>(&gnss_header_)) + sizeof(reserved_));
}

BestVel::~BestVel() {
  // @@protoc_insertion_point(destructor:civ.drivers.rawgnss.BestVel)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BestVel::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete gnss_header_;
}

void BestVel::ArenaDtor(void* object) {
  BestVel* _this = reinterpret_cast< BestVel* >(object);
  (void)_this;
}
void BestVel::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BestVel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BestVel& BestVel::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BestVel_message_2fdrivers_2fgnss_2fproto_2fraw_5fgnss_2eproto.base);
  return *internal_default_instance();
}


void BestVel::Clear() {
// @@protoc_insertion_point(message_clear_start:civ.drivers.rawgnss.BestVel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(gnss_header_ != nullptr);
    gnss_header_->Clear();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&solution_status_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&vertical_speed_) -
        reinterpret_cast<char*>(&solution_status_)) + sizeof(vertical_speed_));
  }
  reserved_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BestVel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .civ.drivers.rawgnss.GnssHeader gnss_header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_gnss_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .civ.drivers.rawgnss.SolutionStatus solution_status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::civ::drivers::rawgnss::SolutionStatus_IsValid(val))) {
            _internal_set_solution_status(static_cast<::civ::drivers::rawgnss::SolutionStatus>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .civ.drivers.rawgnss.PositonVelocityType vel_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::civ::drivers::rawgnss::PositonVelocityType_IsValid(val))) {
            _internal_set_vel_type(static_cast<::civ::drivers::rawgnss::PositonVelocityType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // required float latency = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_latency(&has_bits);
          latency_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float diff_age_in_seconds = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_diff_age_in_seconds(&has_bits);
          diff_age_in_seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required double horizontal_speed_over_ground = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _Internal::set_has_horizontal_speed_over_ground(&has_bits);
          horizontal_speed_over_ground_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required double track_over_ground = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          _Internal::set_has_track_over_ground(&has_bits);
          track_over_ground_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required double vertical_speed = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          _Internal::set_has_vertical_speed(&has_bits);
          vertical_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required float reserved = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          _Internal::set_has_reserved(&has_bits);
          reserved_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BestVel::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:civ.drivers.rawgnss.BestVel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .civ.drivers.rawgnss.GnssHeader gnss_header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::gnss_header(this), target, stream);
  }

  // optional .civ.drivers.rawgnss.SolutionStatus solution_status = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_solution_status(), target);
  }

  // optional .civ.drivers.rawgnss.PositonVelocityType vel_type = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_vel_type(), target);
  }

  // required float latency = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_latency(), target);
  }

  // required float diff_age_in_seconds = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_diff_age_in_seconds(), target);
  }

  // required double horizontal_speed_over_ground = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_horizontal_speed_over_ground(), target);
  }

  // required double track_over_ground = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_track_over_ground(), target);
  }

  // required double vertical_speed = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_vertical_speed(), target);
  }

  // required float reserved = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_reserved(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:civ.drivers.rawgnss.BestVel)
  return target;
}

size_t BestVel::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:civ.drivers.rawgnss.BestVel)
  size_t total_size = 0;

  if (_internal_has_gnss_header()) {
    // required .civ.drivers.rawgnss.GnssHeader gnss_header = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *gnss_header_);
  }

  if (_internal_has_latency()) {
    // required float latency = 4;
    total_size += 1 + 4;
  }

  if (_internal_has_diff_age_in_seconds()) {
    // required float diff_age_in_seconds = 5;
    total_size += 1 + 4;
  }

  if (_internal_has_horizontal_speed_over_ground()) {
    // required double horizontal_speed_over_ground = 6;
    total_size += 1 + 8;
  }

  if (_internal_has_track_over_ground()) {
    // required double track_over_ground = 7;
    total_size += 1 + 8;
  }

  if (_internal_has_vertical_speed()) {
    // required double vertical_speed = 8;
    total_size += 1 + 8;
  }

  if (_internal_has_reserved()) {
    // required float reserved = 9;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t BestVel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:civ.drivers.rawgnss.BestVel)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x000001f9) ^ 0x000001f9) == 0) {  // All required fields are present.
    // required .civ.drivers.rawgnss.GnssHeader gnss_header = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *gnss_header_);

    // required float latency = 4;
    total_size += 1 + 4;

    // required float diff_age_in_seconds = 5;
    total_size += 1 + 4;

    // required double horizontal_speed_over_ground = 6;
    total_size += 1 + 8;

    // required double track_over_ground = 7;
    total_size += 1 + 8;

    // required double vertical_speed = 8;
    total_size += 1 + 8;

    // required float reserved = 9;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional .civ.drivers.rawgnss.SolutionStatus solution_status = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_solution_status());
    }

    // optional .civ.drivers.rawgnss.PositonVelocityType vel_type = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_vel_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BestVel::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:civ.drivers.rawgnss.BestVel)
  GOOGLE_DCHECK_NE(&from, this);
  const BestVel* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BestVel>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:civ.drivers.rawgnss.BestVel)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:civ.drivers.rawgnss.BestVel)
    MergeFrom(*source);
  }
}

void BestVel::MergeFrom(const BestVel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:civ.drivers.rawgnss.BestVel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_gnss_header()->::civ::drivers::rawgnss::GnssHeader::MergeFrom(from._internal_gnss_header());
    }
    if (cached_has_bits & 0x00000002u) {
      solution_status_ = from.solution_status_;
    }
    if (cached_has_bits & 0x00000004u) {
      vel_type_ = from.vel_type_;
    }
    if (cached_has_bits & 0x00000008u) {
      latency_ = from.latency_;
    }
    if (cached_has_bits & 0x00000010u) {
      diff_age_in_seconds_ = from.diff_age_in_seconds_;
    }
    if (cached_has_bits & 0x00000020u) {
      horizontal_speed_over_ground_ = from.horizontal_speed_over_ground_;
    }
    if (cached_has_bits & 0x00000040u) {
      track_over_ground_ = from.track_over_ground_;
    }
    if (cached_has_bits & 0x00000080u) {
      vertical_speed_ = from.vertical_speed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_reserved(from._internal_reserved());
  }
}

void BestVel::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:civ.drivers.rawgnss.BestVel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BestVel::CopyFrom(const BestVel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:civ.drivers.rawgnss.BestVel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BestVel::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_gnss_header()) {
    if (!gnss_header_->IsInitialized()) return false;
  }
  return true;
}

void BestVel::InternalSwap(BestVel* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BestVel, reserved_)
      + sizeof(BestVel::reserved_)
      - PROTOBUF_FIELD_OFFSET(BestVel, gnss_header_)>(
          reinterpret_cast<char*>(&gnss_header_),
          reinterpret_cast<char*>(&other->gnss_header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BestVel::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class InspVax::_Internal {
 public:
  using HasBits = decltype(std::declval<InspVax>()._has_bits_);
  static const ::civ::drivers::rawgnss::GnssHeader& gnss_header(const InspVax* msg);
  static void set_has_gnss_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ins_status(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_pos_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_latitude(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_longitude(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_height(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_undulation(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_north_velocity(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_east_velocity(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_up_velocity(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_roll_in_local(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_pitch_in_local(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_azimuth_in_local(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_latitude_std_deviation(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_longitude_std_deviation(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_height_std_deviation(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_north_velocity_std_deviation(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_east_velocity_std_deviation(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_up_velocity_std_deviation(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_roll_std_deviation(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_pitch_std_deviation(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_azimuth_std_deviation(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_ext_sol_status(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_time_since_update(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00fffffb) ^ 0x00fffffb) != 0;
  }
};

const ::civ::drivers::rawgnss::GnssHeader&
InspVax::_Internal::gnss_header(const InspVax* msg) {
  return *msg->gnss_header_;
}
InspVax::InspVax(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:civ.drivers.rawgnss.InspVax)
}
InspVax::InspVax(const InspVax& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_gnss_header()) {
    gnss_header_ = new ::civ::drivers::rawgnss::GnssHeader(*from.gnss_header_);
  } else {
    gnss_header_ = nullptr;
  }
  ::memcpy(&ins_status_, &from.ins_status_,
    static_cast<size_t>(reinterpret_cast<char*>(&time_since_update_) -
    reinterpret_cast<char*>(&ins_status_)) + sizeof(time_since_update_));
  // @@protoc_insertion_point(copy_constructor:civ.drivers.rawgnss.InspVax)
}

void InspVax::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_InspVax_message_2fdrivers_2fgnss_2fproto_2fraw_5fgnss_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&gnss_header_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&time_since_update_) -
      reinterpret_cast<char*>(&gnss_header_)) + sizeof(time_since_update_));
}

InspVax::~InspVax() {
  // @@protoc_insertion_point(destructor:civ.drivers.rawgnss.InspVax)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void InspVax::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete gnss_header_;
}

void InspVax::ArenaDtor(void* object) {
  InspVax* _this = reinterpret_cast< InspVax* >(object);
  (void)_this;
}
void InspVax::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InspVax::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InspVax& InspVax::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InspVax_message_2fdrivers_2fgnss_2fproto_2fraw_5fgnss_2eproto.base);
  return *internal_default_instance();
}


void InspVax::Clear() {
// @@protoc_insertion_point(message_clear_start:civ.drivers.rawgnss.InspVax)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(gnss_header_ != nullptr);
    gnss_header_->Clear();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&ins_status_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&east_velocity_) -
        reinterpret_cast<char*>(&ins_status_)) + sizeof(east_velocity_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&up_velocity_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&height_std_deviation_) -
        reinterpret_cast<char*>(&up_velocity_)) + sizeof(height_std_deviation_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&north_velocity_std_deviation_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&time_since_update_) -
        reinterpret_cast<char*>(&north_velocity_std_deviation_)) + sizeof(time_since_update_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InspVax::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .civ.drivers.rawgnss.GnssHeader gnss_header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_gnss_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .civ.drivers.rawgnss.InsStatus ins_status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::civ::drivers::rawgnss::InsStatus_IsValid(val))) {
            _internal_set_ins_status(static_cast<::civ::drivers::rawgnss::InsStatus>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .civ.drivers.rawgnss.PositonVelocityType pos_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::civ::drivers::rawgnss::PositonVelocityType_IsValid(val))) {
            _internal_set_pos_type(static_cast<::civ::drivers::rawgnss::PositonVelocityType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // required double latitude = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_latitude(&has_bits);
          latitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required double longitude = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_longitude(&has_bits);
          longitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required double height = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _Internal::set_has_height(&has_bits);
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required float undulation = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          _Internal::set_has_undulation(&has_bits);
          undulation_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required double north_velocity = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          _Internal::set_has_north_velocity(&has_bits);
          north_velocity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required double east_velocity = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          _Internal::set_has_east_velocity(&has_bits);
          east_velocity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required double up_velocity = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          _Internal::set_has_up_velocity(&has_bits);
          up_velocity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required double roll_in_local = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 89)) {
          _Internal::set_has_roll_in_local(&has_bits);
          roll_in_local_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required double pitch_in_local = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 97)) {
          _Internal::set_has_pitch_in_local(&has_bits);
          pitch_in_local_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required double azimuth_in_local = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 105)) {
          _Internal::set_has_azimuth_in_local(&has_bits);
          azimuth_in_local_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required float latitude_std_deviation = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 117)) {
          _Internal::set_has_latitude_std_deviation(&has_bits);
          latitude_std_deviation_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float longitude_std_deviation = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 125)) {
          _Internal::set_has_longitude_std_deviation(&has_bits);
          longitude_std_deviation_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float height_std_deviation = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 133)) {
          _Internal::set_has_height_std_deviation(&has_bits);
          height_std_deviation_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float north_velocity_std_deviation = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 141)) {
          _Internal::set_has_north_velocity_std_deviation(&has_bits);
          north_velocity_std_deviation_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float east_velocity_std_deviation = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 149)) {
          _Internal::set_has_east_velocity_std_deviation(&has_bits);
          east_velocity_std_deviation_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float up_velocity_std_deviation = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 157)) {
          _Internal::set_has_up_velocity_std_deviation(&has_bits);
          up_velocity_std_deviation_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float roll_std_deviation = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 165)) {
          _Internal::set_has_roll_std_deviation(&has_bits);
          roll_std_deviation_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float pitch_std_deviation = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 173)) {
          _Internal::set_has_pitch_std_deviation(&has_bits);
          pitch_std_deviation_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float azimuth_std_deviation = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 181)) {
          _Internal::set_has_azimuth_std_deviation(&has_bits);
          azimuth_std_deviation_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required uint32 ext_sol_status = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          _Internal::set_has_ext_sol_status(&has_bits);
          ext_sol_status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 time_since_update = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          _Internal::set_has_time_since_update(&has_bits);
          time_since_update_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InspVax::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:civ.drivers.rawgnss.InspVax)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .civ.drivers.rawgnss.GnssHeader gnss_header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::gnss_header(this), target, stream);
  }

  // required .civ.drivers.rawgnss.InsStatus ins_status = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_ins_status(), target);
  }

  // optional .civ.drivers.rawgnss.PositonVelocityType pos_type = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_pos_type(), target);
  }

  // required double latitude = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_latitude(), target);
  }

  // required double longitude = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_longitude(), target);
  }

  // required double height = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_height(), target);
  }

  // required float undulation = 7;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_undulation(), target);
  }

  // required double north_velocity = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_north_velocity(), target);
  }

  // required double east_velocity = 9;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->_internal_east_velocity(), target);
  }

  // required double up_velocity = 10;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(10, this->_internal_up_velocity(), target);
  }

  // required double roll_in_local = 11;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(11, this->_internal_roll_in_local(), target);
  }

  // required double pitch_in_local = 12;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(12, this->_internal_pitch_in_local(), target);
  }

  // required double azimuth_in_local = 13;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(13, this->_internal_azimuth_in_local(), target);
  }

  // required float latitude_std_deviation = 14;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(14, this->_internal_latitude_std_deviation(), target);
  }

  // required float longitude_std_deviation = 15;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(15, this->_internal_longitude_std_deviation(), target);
  }

  // required float height_std_deviation = 16;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(16, this->_internal_height_std_deviation(), target);
  }

  // required float north_velocity_std_deviation = 17;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(17, this->_internal_north_velocity_std_deviation(), target);
  }

  // required float east_velocity_std_deviation = 18;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(18, this->_internal_east_velocity_std_deviation(), target);
  }

  // required float up_velocity_std_deviation = 19;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(19, this->_internal_up_velocity_std_deviation(), target);
  }

  // required float roll_std_deviation = 20;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(20, this->_internal_roll_std_deviation(), target);
  }

  // required float pitch_std_deviation = 21;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(21, this->_internal_pitch_std_deviation(), target);
  }

  // required float azimuth_std_deviation = 22;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(22, this->_internal_azimuth_std_deviation(), target);
  }

  // required uint32 ext_sol_status = 23;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(23, this->_internal_ext_sol_status(), target);
  }

  // required uint32 time_since_update = 24;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(24, this->_internal_time_since_update(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:civ.drivers.rawgnss.InspVax)
  return target;
}

size_t InspVax::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:civ.drivers.rawgnss.InspVax)
  size_t total_size = 0;

  if (_internal_has_gnss_header()) {
    // required .civ.drivers.rawgnss.GnssHeader gnss_header = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *gnss_header_);
  }

  if (_internal_has_ins_status()) {
    // required .civ.drivers.rawgnss.InsStatus ins_status = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_ins_status());
  }

  if (_internal_has_latitude()) {
    // required double latitude = 4;
    total_size += 1 + 8;
  }

  if (_internal_has_longitude()) {
    // required double longitude = 5;
    total_size += 1 + 8;
  }

  if (_internal_has_height()) {
    // required double height = 6;
    total_size += 1 + 8;
  }

  if (_internal_has_north_velocity()) {
    // required double north_velocity = 8;
    total_size += 1 + 8;
  }

  if (_internal_has_east_velocity()) {
    // required double east_velocity = 9;
    total_size += 1 + 8;
  }

  if (_internal_has_up_velocity()) {
    // required double up_velocity = 10;
    total_size += 1 + 8;
  }

  if (_internal_has_undulation()) {
    // required float undulation = 7;
    total_size += 1 + 4;
  }

  if (_internal_has_latitude_std_deviation()) {
    // required float latitude_std_deviation = 14;
    total_size += 1 + 4;
  }

  if (_internal_has_roll_in_local()) {
    // required double roll_in_local = 11;
    total_size += 1 + 8;
  }

  if (_internal_has_pitch_in_local()) {
    // required double pitch_in_local = 12;
    total_size += 1 + 8;
  }

  if (_internal_has_azimuth_in_local()) {
    // required double azimuth_in_local = 13;
    total_size += 1 + 8;
  }

  if (_internal_has_longitude_std_deviation()) {
    // required float longitude_std_deviation = 15;
    total_size += 1 + 4;
  }

  if (_internal_has_height_std_deviation()) {
    // required float height_std_deviation = 16;
    total_size += 2 + 4;
  }

  if (_internal_has_north_velocity_std_deviation()) {
    // required float north_velocity_std_deviation = 17;
    total_size += 2 + 4;
  }

  if (_internal_has_east_velocity_std_deviation()) {
    // required float east_velocity_std_deviation = 18;
    total_size += 2 + 4;
  }

  if (_internal_has_up_velocity_std_deviation()) {
    // required float up_velocity_std_deviation = 19;
    total_size += 2 + 4;
  }

  if (_internal_has_roll_std_deviation()) {
    // required float roll_std_deviation = 20;
    total_size += 2 + 4;
  }

  if (_internal_has_pitch_std_deviation()) {
    // required float pitch_std_deviation = 21;
    total_size += 2 + 4;
  }

  if (_internal_has_azimuth_std_deviation()) {
    // required float azimuth_std_deviation = 22;
    total_size += 2 + 4;
  }

  if (_internal_has_ext_sol_status()) {
    // required uint32 ext_sol_status = 23;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_ext_sol_status());
  }

  if (_internal_has_time_since_update()) {
    // required uint32 time_since_update = 24;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_time_since_update());
  }

  return total_size;
}
size_t InspVax::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:civ.drivers.rawgnss.InspVax)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00fffffb) ^ 0x00fffffb) == 0) {  // All required fields are present.
    // required .civ.drivers.rawgnss.GnssHeader gnss_header = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *gnss_header_);

    // required .civ.drivers.rawgnss.InsStatus ins_status = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_ins_status());

    // required double latitude = 4;
    total_size += 1 + 8;

    // required double longitude = 5;
    total_size += 1 + 8;

    // required double height = 6;
    total_size += 1 + 8;

    // required double north_velocity = 8;
    total_size += 1 + 8;

    // required double east_velocity = 9;
    total_size += 1 + 8;

    // required double up_velocity = 10;
    total_size += 1 + 8;

    // required float undulation = 7;
    total_size += 1 + 4;

    // required float latitude_std_deviation = 14;
    total_size += 1 + 4;

    // required double roll_in_local = 11;
    total_size += 1 + 8;

    // required double pitch_in_local = 12;
    total_size += 1 + 8;

    // required double azimuth_in_local = 13;
    total_size += 1 + 8;

    // required float longitude_std_deviation = 15;
    total_size += 1 + 4;

    // required float height_std_deviation = 16;
    total_size += 2 + 4;

    // required float north_velocity_std_deviation = 17;
    total_size += 2 + 4;

    // required float east_velocity_std_deviation = 18;
    total_size += 2 + 4;

    // required float up_velocity_std_deviation = 19;
    total_size += 2 + 4;

    // required float roll_std_deviation = 20;
    total_size += 2 + 4;

    // required float pitch_std_deviation = 21;
    total_size += 2 + 4;

    // required float azimuth_std_deviation = 22;
    total_size += 2 + 4;

    // required uint32 ext_sol_status = 23;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_ext_sol_status());

    // required uint32 time_since_update = 24;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_time_since_update());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .civ.drivers.rawgnss.PositonVelocityType pos_type = 3;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000004u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_pos_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InspVax::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:civ.drivers.rawgnss.InspVax)
  GOOGLE_DCHECK_NE(&from, this);
  const InspVax* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InspVax>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:civ.drivers.rawgnss.InspVax)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:civ.drivers.rawgnss.InspVax)
    MergeFrom(*source);
  }
}

void InspVax::MergeFrom(const InspVax& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:civ.drivers.rawgnss.InspVax)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_gnss_header()->::civ::drivers::rawgnss::GnssHeader::MergeFrom(from._internal_gnss_header());
    }
    if (cached_has_bits & 0x00000002u) {
      ins_status_ = from.ins_status_;
    }
    if (cached_has_bits & 0x00000004u) {
      pos_type_ = from.pos_type_;
    }
    if (cached_has_bits & 0x00000008u) {
      latitude_ = from.latitude_;
    }
    if (cached_has_bits & 0x00000010u) {
      longitude_ = from.longitude_;
    }
    if (cached_has_bits & 0x00000020u) {
      height_ = from.height_;
    }
    if (cached_has_bits & 0x00000040u) {
      north_velocity_ = from.north_velocity_;
    }
    if (cached_has_bits & 0x00000080u) {
      east_velocity_ = from.east_velocity_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      up_velocity_ = from.up_velocity_;
    }
    if (cached_has_bits & 0x00000200u) {
      undulation_ = from.undulation_;
    }
    if (cached_has_bits & 0x00000400u) {
      latitude_std_deviation_ = from.latitude_std_deviation_;
    }
    if (cached_has_bits & 0x00000800u) {
      roll_in_local_ = from.roll_in_local_;
    }
    if (cached_has_bits & 0x00001000u) {
      pitch_in_local_ = from.pitch_in_local_;
    }
    if (cached_has_bits & 0x00002000u) {
      azimuth_in_local_ = from.azimuth_in_local_;
    }
    if (cached_has_bits & 0x00004000u) {
      longitude_std_deviation_ = from.longitude_std_deviation_;
    }
    if (cached_has_bits & 0x00008000u) {
      height_std_deviation_ = from.height_std_deviation_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      north_velocity_std_deviation_ = from.north_velocity_std_deviation_;
    }
    if (cached_has_bits & 0x00020000u) {
      east_velocity_std_deviation_ = from.east_velocity_std_deviation_;
    }
    if (cached_has_bits & 0x00040000u) {
      up_velocity_std_deviation_ = from.up_velocity_std_deviation_;
    }
    if (cached_has_bits & 0x00080000u) {
      roll_std_deviation_ = from.roll_std_deviation_;
    }
    if (cached_has_bits & 0x00100000u) {
      pitch_std_deviation_ = from.pitch_std_deviation_;
    }
    if (cached_has_bits & 0x00200000u) {
      azimuth_std_deviation_ = from.azimuth_std_deviation_;
    }
    if (cached_has_bits & 0x00400000u) {
      ext_sol_status_ = from.ext_sol_status_;
    }
    if (cached_has_bits & 0x00800000u) {
      time_since_update_ = from.time_since_update_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void InspVax::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:civ.drivers.rawgnss.InspVax)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InspVax::CopyFrom(const InspVax& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:civ.drivers.rawgnss.InspVax)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InspVax::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_gnss_header()) {
    if (!gnss_header_->IsInitialized()) return false;
  }
  return true;
}

void InspVax::InternalSwap(InspVax* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InspVax, time_since_update_)
      + sizeof(InspVax::time_since_update_)
      - PROTOBUF_FIELD_OFFSET(InspVax, gnss_header_)>(
          reinterpret_cast<char*>(&gnss_header_),
          reinterpret_cast<char*>(&other->gnss_header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InspVax::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace rawgnss
}  // namespace drivers
}  // namespace civ
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::civ::drivers::rawgnss::LogHeader* Arena::CreateMaybeMessage< ::civ::drivers::rawgnss::LogHeader >(Arena* arena) {
  return Arena::CreateMessageInternal< ::civ::drivers::rawgnss::LogHeader >(arena);
}
template<> PROTOBUF_NOINLINE ::civ::drivers::rawgnss::GnssHeader* Arena::CreateMaybeMessage< ::civ::drivers::rawgnss::GnssHeader >(Arena* arena) {
  return Arena::CreateMessageInternal< ::civ::drivers::rawgnss::GnssHeader >(arena);
}
template<> PROTOBUF_NOINLINE ::civ::drivers::rawgnss::Bestpos* Arena::CreateMaybeMessage< ::civ::drivers::rawgnss::Bestpos >(Arena* arena) {
  return Arena::CreateMessageInternal< ::civ::drivers::rawgnss::Bestpos >(arena);
}
template<> PROTOBUF_NOINLINE ::civ::drivers::rawgnss::GNGGA* Arena::CreateMaybeMessage< ::civ::drivers::rawgnss::GNGGA >(Arena* arena) {
  return Arena::CreateMessageInternal< ::civ::drivers::rawgnss::GNGGA >(arena);
}
template<> PROTOBUF_NOINLINE ::civ::drivers::rawgnss::GNVTG* Arena::CreateMaybeMessage< ::civ::drivers::rawgnss::GNVTG >(Arena* arena) {
  return Arena::CreateMessageInternal< ::civ::drivers::rawgnss::GNVTG >(arena);
}
template<> PROTOBUF_NOINLINE ::civ::drivers::rawgnss::Heading2* Arena::CreateMaybeMessage< ::civ::drivers::rawgnss::Heading2 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::civ::drivers::rawgnss::Heading2 >(arena);
}
template<> PROTOBUF_NOINLINE ::civ::drivers::rawgnss::RawImu* Arena::CreateMaybeMessage< ::civ::drivers::rawgnss::RawImu >(Arena* arena) {
  return Arena::CreateMessageInternal< ::civ::drivers::rawgnss::RawImu >(arena);
}
template<> PROTOBUF_NOINLINE ::civ::drivers::rawgnss::BestVel* Arena::CreateMaybeMessage< ::civ::drivers::rawgnss::BestVel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::civ::drivers::rawgnss::BestVel >(arena);
}
template<> PROTOBUF_NOINLINE ::civ::drivers::rawgnss::InspVax* Arena::CreateMaybeMessage< ::civ::drivers::rawgnss::InspVax >(Arena* arena) {
  return Arena::CreateMessageInternal< ::civ::drivers::rawgnss::InspVax >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
