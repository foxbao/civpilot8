// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message/drivers/imu/proto/imu.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_message_2fdrivers_2fimu_2fproto_2fimu_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_message_2fdrivers_2fimu_2fproto_2fimu_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "message/common/proto/geometry.pb.h"
#include "message/common/proto/header.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_message_2fdrivers_2fimu_2fproto_2fimu_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_message_2fdrivers_2fimu_2fproto_2fimu_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_message_2fdrivers_2fimu_2fproto_2fimu_2eproto;
namespace civ {
namespace drivers {
namespace imu {
class CorrectedImu;
class CorrectedImuDefaultTypeInternal;
extern CorrectedImuDefaultTypeInternal _CorrectedImu_default_instance_;
}  // namespace imu
}  // namespace drivers
}  // namespace civ
PROTOBUF_NAMESPACE_OPEN
template<> ::civ::drivers::imu::CorrectedImu* Arena::CreateMaybeMessage<::civ::drivers::imu::CorrectedImu>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace civ {
namespace drivers {
namespace imu {

// ===================================================================

class CorrectedImu PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:civ.drivers.imu.CorrectedImu) */ {
 public:
  inline CorrectedImu() : CorrectedImu(nullptr) {}
  virtual ~CorrectedImu();

  CorrectedImu(const CorrectedImu& from);
  CorrectedImu(CorrectedImu&& from) noexcept
    : CorrectedImu() {
    *this = ::std::move(from);
  }

  inline CorrectedImu& operator=(const CorrectedImu& from) {
    CopyFrom(from);
    return *this;
  }
  inline CorrectedImu& operator=(CorrectedImu&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CorrectedImu& default_instance();

  static inline const CorrectedImu* internal_default_instance() {
    return reinterpret_cast<const CorrectedImu*>(
               &_CorrectedImu_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CorrectedImu& a, CorrectedImu& b) {
    a.Swap(&b);
  }
  inline void Swap(CorrectedImu* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CorrectedImu* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CorrectedImu* New() const final {
    return CreateMaybeMessage<CorrectedImu>(nullptr);
  }

  CorrectedImu* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CorrectedImu>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CorrectedImu& from);
  void MergeFrom(const CorrectedImu& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CorrectedImu* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "civ.drivers.imu.CorrectedImu";
  }
  protected:
  explicit CorrectedImu(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_message_2fdrivers_2fimu_2fproto_2fimu_2eproto);
    return ::descriptor_table_message_2fdrivers_2fimu_2fproto_2fimu_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kLinearAccelerationFieldNumber = 4,
    kAngularVelocityFieldNumber = 5,
    kMeasurementTimeFieldNumber = 2,
    kMeasurementSpanFieldNumber = 3,
  };
  // optional .civ.common.Header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::civ::common::Header& header() const;
  ::civ::common::Header* release_header();
  ::civ::common::Header* mutable_header();
  void set_allocated_header(::civ::common::Header* header);
  private:
  const ::civ::common::Header& _internal_header() const;
  ::civ::common::Header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::civ::common::Header* header);
  ::civ::common::Header* unsafe_arena_release_header();

  // optional .civ.common.Point3D linear_acceleration = 4;
  bool has_linear_acceleration() const;
  private:
  bool _internal_has_linear_acceleration() const;
  public:
  void clear_linear_acceleration();
  const ::civ::common::Point3D& linear_acceleration() const;
  ::civ::common::Point3D* release_linear_acceleration();
  ::civ::common::Point3D* mutable_linear_acceleration();
  void set_allocated_linear_acceleration(::civ::common::Point3D* linear_acceleration);
  private:
  const ::civ::common::Point3D& _internal_linear_acceleration() const;
  ::civ::common::Point3D* _internal_mutable_linear_acceleration();
  public:
  void unsafe_arena_set_allocated_linear_acceleration(
      ::civ::common::Point3D* linear_acceleration);
  ::civ::common::Point3D* unsafe_arena_release_linear_acceleration();

  // optional .civ.common.Point3D angular_velocity = 5;
  bool has_angular_velocity() const;
  private:
  bool _internal_has_angular_velocity() const;
  public:
  void clear_angular_velocity();
  const ::civ::common::Point3D& angular_velocity() const;
  ::civ::common::Point3D* release_angular_velocity();
  ::civ::common::Point3D* mutable_angular_velocity();
  void set_allocated_angular_velocity(::civ::common::Point3D* angular_velocity);
  private:
  const ::civ::common::Point3D& _internal_angular_velocity() const;
  ::civ::common::Point3D* _internal_mutable_angular_velocity();
  public:
  void unsafe_arena_set_allocated_angular_velocity(
      ::civ::common::Point3D* angular_velocity);
  ::civ::common::Point3D* unsafe_arena_release_angular_velocity();

  // optional double measurement_time = 2;
  bool has_measurement_time() const;
  private:
  bool _internal_has_measurement_time() const;
  public:
  void clear_measurement_time();
  double measurement_time() const;
  void set_measurement_time(double value);
  private:
  double _internal_measurement_time() const;
  void _internal_set_measurement_time(double value);
  public:

  // optional float measurement_span = 3 [default = 0];
  bool has_measurement_span() const;
  private:
  bool _internal_has_measurement_span() const;
  public:
  void clear_measurement_span();
  float measurement_span() const;
  void set_measurement_span(float value);
  private:
  float _internal_measurement_span() const;
  void _internal_set_measurement_span(float value);
  public:

  // @@protoc_insertion_point(class_scope:civ.drivers.imu.CorrectedImu)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::civ::common::Header* header_;
  ::civ::common::Point3D* linear_acceleration_;
  ::civ::common::Point3D* angular_velocity_;
  double measurement_time_;
  float measurement_span_;
  friend struct ::TableStruct_message_2fdrivers_2fimu_2fproto_2fimu_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CorrectedImu

// optional .civ.common.Header header = 1;
inline bool CorrectedImu::_internal_has_header() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || header_ != nullptr);
  return value;
}
inline bool CorrectedImu::has_header() const {
  return _internal_has_header();
}
inline const ::civ::common::Header& CorrectedImu::_internal_header() const {
  const ::civ::common::Header* p = header_;
  return p != nullptr ? *p : reinterpret_cast<const ::civ::common::Header&>(
      ::civ::common::_Header_default_instance_);
}
inline const ::civ::common::Header& CorrectedImu::header() const {
  // @@protoc_insertion_point(field_get:civ.drivers.imu.CorrectedImu.header)
  return _internal_header();
}
inline void CorrectedImu::unsafe_arena_set_allocated_header(
    ::civ::common::Header* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:civ.drivers.imu.CorrectedImu.header)
}
inline ::civ::common::Header* CorrectedImu::release_header() {
  _has_bits_[0] &= ~0x00000001u;
  ::civ::common::Header* temp = header_;
  header_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::civ::common::Header* CorrectedImu::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:civ.drivers.imu.CorrectedImu.header)
  _has_bits_[0] &= ~0x00000001u;
  ::civ::common::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::civ::common::Header* CorrectedImu::_internal_mutable_header() {
  _has_bits_[0] |= 0x00000001u;
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::civ::common::Header>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::civ::common::Header* CorrectedImu::mutable_header() {
  // @@protoc_insertion_point(field_mutable:civ.drivers.imu.CorrectedImu.header)
  return _internal_mutable_header();
}
inline void CorrectedImu::set_allocated_header(::civ::common::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header)->GetArena();
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:civ.drivers.imu.CorrectedImu.header)
}

// optional double measurement_time = 2;
inline bool CorrectedImu::_internal_has_measurement_time() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CorrectedImu::has_measurement_time() const {
  return _internal_has_measurement_time();
}
inline void CorrectedImu::clear_measurement_time() {
  measurement_time_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline double CorrectedImu::_internal_measurement_time() const {
  return measurement_time_;
}
inline double CorrectedImu::measurement_time() const {
  // @@protoc_insertion_point(field_get:civ.drivers.imu.CorrectedImu.measurement_time)
  return _internal_measurement_time();
}
inline void CorrectedImu::_internal_set_measurement_time(double value) {
  _has_bits_[0] |= 0x00000008u;
  measurement_time_ = value;
}
inline void CorrectedImu::set_measurement_time(double value) {
  _internal_set_measurement_time(value);
  // @@protoc_insertion_point(field_set:civ.drivers.imu.CorrectedImu.measurement_time)
}

// optional float measurement_span = 3 [default = 0];
inline bool CorrectedImu::_internal_has_measurement_span() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CorrectedImu::has_measurement_span() const {
  return _internal_has_measurement_span();
}
inline void CorrectedImu::clear_measurement_span() {
  measurement_span_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline float CorrectedImu::_internal_measurement_span() const {
  return measurement_span_;
}
inline float CorrectedImu::measurement_span() const {
  // @@protoc_insertion_point(field_get:civ.drivers.imu.CorrectedImu.measurement_span)
  return _internal_measurement_span();
}
inline void CorrectedImu::_internal_set_measurement_span(float value) {
  _has_bits_[0] |= 0x00000010u;
  measurement_span_ = value;
}
inline void CorrectedImu::set_measurement_span(float value) {
  _internal_set_measurement_span(value);
  // @@protoc_insertion_point(field_set:civ.drivers.imu.CorrectedImu.measurement_span)
}

// optional .civ.common.Point3D linear_acceleration = 4;
inline bool CorrectedImu::_internal_has_linear_acceleration() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || linear_acceleration_ != nullptr);
  return value;
}
inline bool CorrectedImu::has_linear_acceleration() const {
  return _internal_has_linear_acceleration();
}
inline const ::civ::common::Point3D& CorrectedImu::_internal_linear_acceleration() const {
  const ::civ::common::Point3D* p = linear_acceleration_;
  return p != nullptr ? *p : reinterpret_cast<const ::civ::common::Point3D&>(
      ::civ::common::_Point3D_default_instance_);
}
inline const ::civ::common::Point3D& CorrectedImu::linear_acceleration() const {
  // @@protoc_insertion_point(field_get:civ.drivers.imu.CorrectedImu.linear_acceleration)
  return _internal_linear_acceleration();
}
inline void CorrectedImu::unsafe_arena_set_allocated_linear_acceleration(
    ::civ::common::Point3D* linear_acceleration) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(linear_acceleration_);
  }
  linear_acceleration_ = linear_acceleration;
  if (linear_acceleration) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:civ.drivers.imu.CorrectedImu.linear_acceleration)
}
inline ::civ::common::Point3D* CorrectedImu::release_linear_acceleration() {
  _has_bits_[0] &= ~0x00000002u;
  ::civ::common::Point3D* temp = linear_acceleration_;
  linear_acceleration_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::civ::common::Point3D* CorrectedImu::unsafe_arena_release_linear_acceleration() {
  // @@protoc_insertion_point(field_release:civ.drivers.imu.CorrectedImu.linear_acceleration)
  _has_bits_[0] &= ~0x00000002u;
  ::civ::common::Point3D* temp = linear_acceleration_;
  linear_acceleration_ = nullptr;
  return temp;
}
inline ::civ::common::Point3D* CorrectedImu::_internal_mutable_linear_acceleration() {
  _has_bits_[0] |= 0x00000002u;
  if (linear_acceleration_ == nullptr) {
    auto* p = CreateMaybeMessage<::civ::common::Point3D>(GetArena());
    linear_acceleration_ = p;
  }
  return linear_acceleration_;
}
inline ::civ::common::Point3D* CorrectedImu::mutable_linear_acceleration() {
  // @@protoc_insertion_point(field_mutable:civ.drivers.imu.CorrectedImu.linear_acceleration)
  return _internal_mutable_linear_acceleration();
}
inline void CorrectedImu::set_allocated_linear_acceleration(::civ::common::Point3D* linear_acceleration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(linear_acceleration_);
  }
  if (linear_acceleration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(linear_acceleration)->GetArena();
    if (message_arena != submessage_arena) {
      linear_acceleration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, linear_acceleration, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  linear_acceleration_ = linear_acceleration;
  // @@protoc_insertion_point(field_set_allocated:civ.drivers.imu.CorrectedImu.linear_acceleration)
}

// optional .civ.common.Point3D angular_velocity = 5;
inline bool CorrectedImu::_internal_has_angular_velocity() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || angular_velocity_ != nullptr);
  return value;
}
inline bool CorrectedImu::has_angular_velocity() const {
  return _internal_has_angular_velocity();
}
inline const ::civ::common::Point3D& CorrectedImu::_internal_angular_velocity() const {
  const ::civ::common::Point3D* p = angular_velocity_;
  return p != nullptr ? *p : reinterpret_cast<const ::civ::common::Point3D&>(
      ::civ::common::_Point3D_default_instance_);
}
inline const ::civ::common::Point3D& CorrectedImu::angular_velocity() const {
  // @@protoc_insertion_point(field_get:civ.drivers.imu.CorrectedImu.angular_velocity)
  return _internal_angular_velocity();
}
inline void CorrectedImu::unsafe_arena_set_allocated_angular_velocity(
    ::civ::common::Point3D* angular_velocity) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(angular_velocity_);
  }
  angular_velocity_ = angular_velocity;
  if (angular_velocity) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:civ.drivers.imu.CorrectedImu.angular_velocity)
}
inline ::civ::common::Point3D* CorrectedImu::release_angular_velocity() {
  _has_bits_[0] &= ~0x00000004u;
  ::civ::common::Point3D* temp = angular_velocity_;
  angular_velocity_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::civ::common::Point3D* CorrectedImu::unsafe_arena_release_angular_velocity() {
  // @@protoc_insertion_point(field_release:civ.drivers.imu.CorrectedImu.angular_velocity)
  _has_bits_[0] &= ~0x00000004u;
  ::civ::common::Point3D* temp = angular_velocity_;
  angular_velocity_ = nullptr;
  return temp;
}
inline ::civ::common::Point3D* CorrectedImu::_internal_mutable_angular_velocity() {
  _has_bits_[0] |= 0x00000004u;
  if (angular_velocity_ == nullptr) {
    auto* p = CreateMaybeMessage<::civ::common::Point3D>(GetArena());
    angular_velocity_ = p;
  }
  return angular_velocity_;
}
inline ::civ::common::Point3D* CorrectedImu::mutable_angular_velocity() {
  // @@protoc_insertion_point(field_mutable:civ.drivers.imu.CorrectedImu.angular_velocity)
  return _internal_mutable_angular_velocity();
}
inline void CorrectedImu::set_allocated_angular_velocity(::civ::common::Point3D* angular_velocity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(angular_velocity_);
  }
  if (angular_velocity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(angular_velocity)->GetArena();
    if (message_arena != submessage_arena) {
      angular_velocity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, angular_velocity, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  angular_velocity_ = angular_velocity;
  // @@protoc_insertion_point(field_set_allocated:civ.drivers.imu.CorrectedImu.angular_velocity)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace imu
}  // namespace drivers
}  // namespace civ

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_message_2fdrivers_2fimu_2fproto_2fimu_2eproto
