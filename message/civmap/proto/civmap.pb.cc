// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message/civmap/proto/civmap.proto

#include "message/civmap/proto/civmap.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_message_2fcommon_2fproto_2fheader_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Header_message_2fcommon_2fproto_2fheader_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_message_2fmap_2fproto_2fmap_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<14> scc_info_Map_message_2fmap_2fproto_2fmap_2eproto;
namespace civ {
namespace civmap {
class ZmapMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ZmapMessage> _instance;
} _ZmapMessage_default_instance_;
}  // namespace civmap
}  // namespace civ
static void InitDefaultsscc_info_ZmapMessage_message_2fcivmap_2fproto_2fcivmap_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::civ::civmap::_ZmapMessage_default_instance_;
    new (ptr) ::civ::civmap::ZmapMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ZmapMessage_message_2fcivmap_2fproto_2fcivmap_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ZmapMessage_message_2fcivmap_2fproto_2fcivmap_2eproto}, {
      &scc_info_Header_message_2fcommon_2fproto_2fheader_2eproto.base,
      &scc_info_Map_message_2fmap_2fproto_2fmap_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_message_2fcivmap_2fproto_2fcivmap_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_message_2fcivmap_2fproto_2fcivmap_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_message_2fcivmap_2fproto_2fcivmap_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_message_2fcivmap_2fproto_2fcivmap_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::civ::civmap::ZmapMessage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::civ::civmap::ZmapMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::civ::civmap::ZmapMessage, header_),
  PROTOBUF_FIELD_OFFSET(::civ::civmap::ZmapMessage, map_),
  0,
  1,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::civ::civmap::ZmapMessage)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::civ::civmap::_ZmapMessage_default_instance_),
};

const char descriptor_table_protodef_message_2fcivmap_2fproto_2fcivmap_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n!message/civmap/proto/civmap.proto\022\nciv"
  ".civmap\032!message/common/proto/header.pro"
  "to\032\033message/map/proto/map.proto\"N\n\013ZmapM"
  "essage\022\"\n\006header\030\001 \001(\0132\022.civ.common.Head"
  "er\022\033\n\003map\030\002 \001(\0132\016.civ.hdmap.Map"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_message_2fcivmap_2fproto_2fcivmap_2eproto_deps[2] = {
  &::descriptor_table_message_2fcommon_2fproto_2fheader_2eproto,
  &::descriptor_table_message_2fmap_2fproto_2fmap_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_message_2fcivmap_2fproto_2fcivmap_2eproto_sccs[1] = {
  &scc_info_ZmapMessage_message_2fcivmap_2fproto_2fcivmap_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_message_2fcivmap_2fproto_2fcivmap_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_message_2fcivmap_2fproto_2fcivmap_2eproto = {
  false, false, descriptor_table_protodef_message_2fcivmap_2fproto_2fcivmap_2eproto, "message/civmap/proto/civmap.proto", 191,
  &descriptor_table_message_2fcivmap_2fproto_2fcivmap_2eproto_once, descriptor_table_message_2fcivmap_2fproto_2fcivmap_2eproto_sccs, descriptor_table_message_2fcivmap_2fproto_2fcivmap_2eproto_deps, 1, 2,
  schemas, file_default_instances, TableStruct_message_2fcivmap_2fproto_2fcivmap_2eproto::offsets,
  file_level_metadata_message_2fcivmap_2fproto_2fcivmap_2eproto, 1, file_level_enum_descriptors_message_2fcivmap_2fproto_2fcivmap_2eproto, file_level_service_descriptors_message_2fcivmap_2fproto_2fcivmap_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_message_2fcivmap_2fproto_2fcivmap_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_message_2fcivmap_2fproto_2fcivmap_2eproto)), true);
namespace civ {
namespace civmap {

// ===================================================================

class ZmapMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<ZmapMessage>()._has_bits_);
  static const ::civ::common::Header& header(const ZmapMessage* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::civ::hdmap::Map& map(const ZmapMessage* msg);
  static void set_has_map(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::civ::common::Header&
ZmapMessage::_Internal::header(const ZmapMessage* msg) {
  return *msg->header_;
}
const ::civ::hdmap::Map&
ZmapMessage::_Internal::map(const ZmapMessage* msg) {
  return *msg->map_;
}
void ZmapMessage::clear_header() {
  if (header_ != nullptr) header_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void ZmapMessage::clear_map() {
  if (map_ != nullptr) map_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
ZmapMessage::ZmapMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:civ.civmap.ZmapMessage)
}
ZmapMessage::ZmapMessage(const ZmapMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::civ::common::Header(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_map()) {
    map_ = new ::civ::hdmap::Map(*from.map_);
  } else {
    map_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:civ.civmap.ZmapMessage)
}

void ZmapMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ZmapMessage_message_2fcivmap_2fproto_2fcivmap_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&header_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&map_) -
      reinterpret_cast<char*>(&header_)) + sizeof(map_));
}

ZmapMessage::~ZmapMessage() {
  // @@protoc_insertion_point(destructor:civ.civmap.ZmapMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ZmapMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete map_;
}

void ZmapMessage::ArenaDtor(void* object) {
  ZmapMessage* _this = reinterpret_cast< ZmapMessage* >(object);
  (void)_this;
}
void ZmapMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ZmapMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ZmapMessage& ZmapMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ZmapMessage_message_2fcivmap_2fproto_2fcivmap_2eproto.base);
  return *internal_default_instance();
}


void ZmapMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:civ.civmap.ZmapMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(header_ != nullptr);
      header_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(map_ != nullptr);
      map_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ZmapMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .civ.common.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .civ.hdmap.Map map = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_map(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ZmapMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:civ.civmap.ZmapMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .civ.common.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // optional .civ.hdmap.Map map = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::map(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:civ.civmap.ZmapMessage)
  return target;
}

size_t ZmapMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:civ.civmap.ZmapMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .civ.common.Header header = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *header_);
    }

    // optional .civ.hdmap.Map map = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *map_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ZmapMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:civ.civmap.ZmapMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const ZmapMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ZmapMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:civ.civmap.ZmapMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:civ.civmap.ZmapMessage)
    MergeFrom(*source);
  }
}

void ZmapMessage::MergeFrom(const ZmapMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:civ.civmap.ZmapMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_header()->::civ::common::Header::MergeFrom(from._internal_header());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_map()->::civ::hdmap::Map::MergeFrom(from._internal_map());
    }
  }
}

void ZmapMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:civ.civmap.ZmapMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ZmapMessage::CopyFrom(const ZmapMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:civ.civmap.ZmapMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ZmapMessage::IsInitialized() const {
  return true;
}

void ZmapMessage::InternalSwap(ZmapMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ZmapMessage, map_)
      + sizeof(ZmapMessage::map_)
      - PROTOBUF_FIELD_OFFSET(ZmapMessage, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ZmapMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace civmap
}  // namespace civ
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::civ::civmap::ZmapMessage* Arena::CreateMaybeMessage< ::civ::civmap::ZmapMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::civ::civmap::ZmapMessage >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
