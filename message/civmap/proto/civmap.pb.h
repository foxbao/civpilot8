// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message/civmap/proto/civmap.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_message_2fcivmap_2fproto_2fcivmap_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_message_2fcivmap_2fproto_2fcivmap_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "message/common/proto/header.pb.h"
#include "message/map/proto/map.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_message_2fcivmap_2fproto_2fcivmap_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_message_2fcivmap_2fproto_2fcivmap_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_message_2fcivmap_2fproto_2fcivmap_2eproto;
namespace civ {
namespace civmap {
class ZmapMessage;
class ZmapMessageDefaultTypeInternal;
extern ZmapMessageDefaultTypeInternal _ZmapMessage_default_instance_;
}  // namespace civmap
}  // namespace civ
PROTOBUF_NAMESPACE_OPEN
template<> ::civ::civmap::ZmapMessage* Arena::CreateMaybeMessage<::civ::civmap::ZmapMessage>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace civ {
namespace civmap {

// ===================================================================

class ZmapMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:civ.civmap.ZmapMessage) */ {
 public:
  inline ZmapMessage() : ZmapMessage(nullptr) {}
  virtual ~ZmapMessage();

  ZmapMessage(const ZmapMessage& from);
  ZmapMessage(ZmapMessage&& from) noexcept
    : ZmapMessage() {
    *this = ::std::move(from);
  }

  inline ZmapMessage& operator=(const ZmapMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline ZmapMessage& operator=(ZmapMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ZmapMessage& default_instance();

  static inline const ZmapMessage* internal_default_instance() {
    return reinterpret_cast<const ZmapMessage*>(
               &_ZmapMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ZmapMessage& a, ZmapMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(ZmapMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ZmapMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ZmapMessage* New() const final {
    return CreateMaybeMessage<ZmapMessage>(nullptr);
  }

  ZmapMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ZmapMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ZmapMessage& from);
  void MergeFrom(const ZmapMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ZmapMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "civ.civmap.ZmapMessage";
  }
  protected:
  explicit ZmapMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_message_2fcivmap_2fproto_2fcivmap_2eproto);
    return ::descriptor_table_message_2fcivmap_2fproto_2fcivmap_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kMapFieldNumber = 2,
  };
  // optional .civ.common.Header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::civ::common::Header& header() const;
  ::civ::common::Header* release_header();
  ::civ::common::Header* mutable_header();
  void set_allocated_header(::civ::common::Header* header);
  private:
  const ::civ::common::Header& _internal_header() const;
  ::civ::common::Header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::civ::common::Header* header);
  ::civ::common::Header* unsafe_arena_release_header();

  // optional .civ.hdmap.Map map = 2;
  bool has_map() const;
  private:
  bool _internal_has_map() const;
  public:
  void clear_map();
  const ::civ::hdmap::Map& map() const;
  ::civ::hdmap::Map* release_map();
  ::civ::hdmap::Map* mutable_map();
  void set_allocated_map(::civ::hdmap::Map* map);
  private:
  const ::civ::hdmap::Map& _internal_map() const;
  ::civ::hdmap::Map* _internal_mutable_map();
  public:
  void unsafe_arena_set_allocated_map(
      ::civ::hdmap::Map* map);
  ::civ::hdmap::Map* unsafe_arena_release_map();

  // @@protoc_insertion_point(class_scope:civ.civmap.ZmapMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::civ::common::Header* header_;
  ::civ::hdmap::Map* map_;
  friend struct ::TableStruct_message_2fcivmap_2fproto_2fcivmap_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ZmapMessage

// optional .civ.common.Header header = 1;
inline bool ZmapMessage::_internal_has_header() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || header_ != nullptr);
  return value;
}
inline bool ZmapMessage::has_header() const {
  return _internal_has_header();
}
inline const ::civ::common::Header& ZmapMessage::_internal_header() const {
  const ::civ::common::Header* p = header_;
  return p != nullptr ? *p : reinterpret_cast<const ::civ::common::Header&>(
      ::civ::common::_Header_default_instance_);
}
inline const ::civ::common::Header& ZmapMessage::header() const {
  // @@protoc_insertion_point(field_get:civ.civmap.ZmapMessage.header)
  return _internal_header();
}
inline void ZmapMessage::unsafe_arena_set_allocated_header(
    ::civ::common::Header* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:civ.civmap.ZmapMessage.header)
}
inline ::civ::common::Header* ZmapMessage::release_header() {
  _has_bits_[0] &= ~0x00000001u;
  ::civ::common::Header* temp = header_;
  header_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::civ::common::Header* ZmapMessage::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:civ.civmap.ZmapMessage.header)
  _has_bits_[0] &= ~0x00000001u;
  ::civ::common::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::civ::common::Header* ZmapMessage::_internal_mutable_header() {
  _has_bits_[0] |= 0x00000001u;
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::civ::common::Header>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::civ::common::Header* ZmapMessage::mutable_header() {
  // @@protoc_insertion_point(field_mutable:civ.civmap.ZmapMessage.header)
  return _internal_mutable_header();
}
inline void ZmapMessage::set_allocated_header(::civ::common::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header)->GetArena();
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:civ.civmap.ZmapMessage.header)
}

// optional .civ.hdmap.Map map = 2;
inline bool ZmapMessage::_internal_has_map() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || map_ != nullptr);
  return value;
}
inline bool ZmapMessage::has_map() const {
  return _internal_has_map();
}
inline const ::civ::hdmap::Map& ZmapMessage::_internal_map() const {
  const ::civ::hdmap::Map* p = map_;
  return p != nullptr ? *p : reinterpret_cast<const ::civ::hdmap::Map&>(
      ::civ::hdmap::_Map_default_instance_);
}
inline const ::civ::hdmap::Map& ZmapMessage::map() const {
  // @@protoc_insertion_point(field_get:civ.civmap.ZmapMessage.map)
  return _internal_map();
}
inline void ZmapMessage::unsafe_arena_set_allocated_map(
    ::civ::hdmap::Map* map) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(map_);
  }
  map_ = map;
  if (map) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:civ.civmap.ZmapMessage.map)
}
inline ::civ::hdmap::Map* ZmapMessage::release_map() {
  _has_bits_[0] &= ~0x00000002u;
  ::civ::hdmap::Map* temp = map_;
  map_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::civ::hdmap::Map* ZmapMessage::unsafe_arena_release_map() {
  // @@protoc_insertion_point(field_release:civ.civmap.ZmapMessage.map)
  _has_bits_[0] &= ~0x00000002u;
  ::civ::hdmap::Map* temp = map_;
  map_ = nullptr;
  return temp;
}
inline ::civ::hdmap::Map* ZmapMessage::_internal_mutable_map() {
  _has_bits_[0] |= 0x00000002u;
  if (map_ == nullptr) {
    auto* p = CreateMaybeMessage<::civ::hdmap::Map>(GetArena());
    map_ = p;
  }
  return map_;
}
inline ::civ::hdmap::Map* ZmapMessage::mutable_map() {
  // @@protoc_insertion_point(field_mutable:civ.civmap.ZmapMessage.map)
  return _internal_mutable_map();
}
inline void ZmapMessage::set_allocated_map(::civ::hdmap::Map* map) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(map_);
  }
  if (map) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(map)->GetArena();
    if (message_arena != submessage_arena) {
      map = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, map, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  map_ = map;
  // @@protoc_insertion_point(field_set_allocated:civ.civmap.ZmapMessage.map)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace civmap
}  // namespace civ

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_message_2fcivmap_2fproto_2fcivmap_2eproto
