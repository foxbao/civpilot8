// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message/monitor/proto/system_status.proto

#include "message/monitor/proto/system_status.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_message_2fcommon_2fproto_2fheader_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Header_message_2fcommon_2fproto_2fheader_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_message_2fmonitor_2fproto_2fsystem_5fstatus_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Component_message_2fmonitor_2fproto_2fsystem_5fstatus_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_message_2fmonitor_2fproto_2fsystem_5fstatus_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ComponentStatus_message_2fmonitor_2fproto_2fsystem_5fstatus_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_message_2fmonitor_2fproto_2fsystem_5fstatus_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SystemStatus_ComponentsEntry_DoNotUse_message_2fmonitor_2fproto_2fsystem_5fstatus_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_message_2fmonitor_2fproto_2fsystem_5fstatus_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SystemStatus_HmiModulesEntry_DoNotUse_message_2fmonitor_2fproto_2fsystem_5fstatus_2eproto;
namespace civ {
namespace monitor {
class ComponentStatusDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ComponentStatus> _instance;
} _ComponentStatus_default_instance_;
class ComponentDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Component> _instance;
} _Component_default_instance_;
class SystemStatus_HmiModulesEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SystemStatus_HmiModulesEntry_DoNotUse> _instance;
} _SystemStatus_HmiModulesEntry_DoNotUse_default_instance_;
class SystemStatus_ComponentsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SystemStatus_ComponentsEntry_DoNotUse> _instance;
} _SystemStatus_ComponentsEntry_DoNotUse_default_instance_;
class SystemStatusDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SystemStatus> _instance;
} _SystemStatus_default_instance_;
}  // namespace monitor
}  // namespace civ
static void InitDefaultsscc_info_Component_message_2fmonitor_2fproto_2fsystem_5fstatus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::civ::monitor::_Component_default_instance_;
    new (ptr) ::civ::monitor::Component();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Component_message_2fmonitor_2fproto_2fsystem_5fstatus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Component_message_2fmonitor_2fproto_2fsystem_5fstatus_2eproto}, {
      &scc_info_ComponentStatus_message_2fmonitor_2fproto_2fsystem_5fstatus_2eproto.base,}};

static void InitDefaultsscc_info_ComponentStatus_message_2fmonitor_2fproto_2fsystem_5fstatus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::civ::monitor::_ComponentStatus_default_instance_;
    new (ptr) ::civ::monitor::ComponentStatus();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ComponentStatus_message_2fmonitor_2fproto_2fsystem_5fstatus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ComponentStatus_message_2fmonitor_2fproto_2fsystem_5fstatus_2eproto}, {}};

static void InitDefaultsscc_info_SystemStatus_message_2fmonitor_2fproto_2fsystem_5fstatus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::civ::monitor::_SystemStatus_default_instance_;
    new (ptr) ::civ::monitor::SystemStatus();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_SystemStatus_message_2fmonitor_2fproto_2fsystem_5fstatus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_SystemStatus_message_2fmonitor_2fproto_2fsystem_5fstatus_2eproto}, {
      &scc_info_Header_message_2fcommon_2fproto_2fheader_2eproto.base,
      &scc_info_SystemStatus_HmiModulesEntry_DoNotUse_message_2fmonitor_2fproto_2fsystem_5fstatus_2eproto.base,
      &scc_info_SystemStatus_ComponentsEntry_DoNotUse_message_2fmonitor_2fproto_2fsystem_5fstatus_2eproto.base,}};

static void InitDefaultsscc_info_SystemStatus_ComponentsEntry_DoNotUse_message_2fmonitor_2fproto_2fsystem_5fstatus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::civ::monitor::_SystemStatus_ComponentsEntry_DoNotUse_default_instance_;
    new (ptr) ::civ::monitor::SystemStatus_ComponentsEntry_DoNotUse();
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SystemStatus_ComponentsEntry_DoNotUse_message_2fmonitor_2fproto_2fsystem_5fstatus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SystemStatus_ComponentsEntry_DoNotUse_message_2fmonitor_2fproto_2fsystem_5fstatus_2eproto}, {
      &scc_info_Component_message_2fmonitor_2fproto_2fsystem_5fstatus_2eproto.base,}};

static void InitDefaultsscc_info_SystemStatus_HmiModulesEntry_DoNotUse_message_2fmonitor_2fproto_2fsystem_5fstatus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::civ::monitor::_SystemStatus_HmiModulesEntry_DoNotUse_default_instance_;
    new (ptr) ::civ::monitor::SystemStatus_HmiModulesEntry_DoNotUse();
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SystemStatus_HmiModulesEntry_DoNotUse_message_2fmonitor_2fproto_2fsystem_5fstatus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SystemStatus_HmiModulesEntry_DoNotUse_message_2fmonitor_2fproto_2fsystem_5fstatus_2eproto}, {
      &scc_info_ComponentStatus_message_2fmonitor_2fproto_2fsystem_5fstatus_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_message_2fmonitor_2fproto_2fsystem_5fstatus_2eproto[5];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_message_2fmonitor_2fproto_2fsystem_5fstatus_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_message_2fmonitor_2fproto_2fsystem_5fstatus_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_message_2fmonitor_2fproto_2fsystem_5fstatus_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::civ::monitor::ComponentStatus, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::civ::monitor::ComponentStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::civ::monitor::ComponentStatus, status_),
  PROTOBUF_FIELD_OFFSET(::civ::monitor::ComponentStatus, message_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::civ::monitor::Component, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::civ::monitor::Component, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::civ::monitor::Component, summary_),
  PROTOBUF_FIELD_OFFSET(::civ::monitor::Component, process_status_),
  PROTOBUF_FIELD_OFFSET(::civ::monitor::Component, channel_status_),
  PROTOBUF_FIELD_OFFSET(::civ::monitor::Component, resource_status_),
  PROTOBUF_FIELD_OFFSET(::civ::monitor::Component, other_status_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::civ::monitor::SystemStatus_HmiModulesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::civ::monitor::SystemStatus_HmiModulesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::civ::monitor::SystemStatus_HmiModulesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::civ::monitor::SystemStatus_HmiModulesEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::civ::monitor::SystemStatus_ComponentsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::civ::monitor::SystemStatus_ComponentsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::civ::monitor::SystemStatus_ComponentsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::civ::monitor::SystemStatus_ComponentsEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::civ::monitor::SystemStatus, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::civ::monitor::SystemStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::civ::monitor::SystemStatus, header_),
  PROTOBUF_FIELD_OFFSET(::civ::monitor::SystemStatus, hmi_modules_),
  PROTOBUF_FIELD_OFFSET(::civ::monitor::SystemStatus, components_),
  PROTOBUF_FIELD_OFFSET(::civ::monitor::SystemStatus, passenger_msg_),
  PROTOBUF_FIELD_OFFSET(::civ::monitor::SystemStatus, safety_mode_trigger_time_),
  PROTOBUF_FIELD_OFFSET(::civ::monitor::SystemStatus, require_emergency_stop_),
  PROTOBUF_FIELD_OFFSET(::civ::monitor::SystemStatus, is_realtime_in_simulation_),
  1,
  ~0u,
  ~0u,
  0,
  2,
  3,
  4,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::civ::monitor::ComponentStatus)},
  { 9, 19, sizeof(::civ::monitor::Component)},
  { 24, 31, sizeof(::civ::monitor::SystemStatus_HmiModulesEntry_DoNotUse)},
  { 33, 40, sizeof(::civ::monitor::SystemStatus_ComponentsEntry_DoNotUse)},
  { 42, 54, sizeof(::civ::monitor::SystemStatus)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::civ::monitor::_ComponentStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::civ::monitor::_Component_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::civ::monitor::_SystemStatus_HmiModulesEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::civ::monitor::_SystemStatus_ComponentsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::civ::monitor::_SystemStatus_default_instance_),
};

const char descriptor_table_protodef_message_2fmonitor_2fproto_2fsystem_5fstatus_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n)message/monitor/proto/system_status.pr"
  "oto\022\013civ.monitor\032!message/common/proto/h"
  "eader.proto\"\237\001\n\017ComponentStatus\022<\n\006statu"
  "s\030\001 \001(\0162#.civ.monitor.ComponentStatus.St"
  "atus:\007UNKNOWN\022\017\n\007message\030\002 \001(\t\"=\n\006Status"
  "\022\013\n\007UNKNOWN\020\000\022\006\n\002OK\020\001\022\010\n\004WARN\020\002\022\t\n\005ERROR"
  "\020\003\022\t\n\005FATAL\020\004\"\221\002\n\tComponent\022-\n\007summary\030\001"
  " \001(\0132\034.civ.monitor.ComponentStatus\0224\n\016pr"
  "ocess_status\030\002 \001(\0132\034.civ.monitor.Compone"
  "ntStatus\0224\n\016channel_status\030\003 \001(\0132\034.civ.m"
  "onitor.ComponentStatus\0225\n\017resource_statu"
  "s\030\004 \001(\0132\034.civ.monitor.ComponentStatus\0222\n"
  "\014other_status\030\005 \001(\0132\034.civ.monitor.Compon"
  "entStatus\"\325\003\n\014SystemStatus\022\"\n\006header\030\001 \001"
  "(\0132\022.civ.common.Header\022>\n\013hmi_modules\030\007 "
  "\003(\0132).civ.monitor.SystemStatus.HmiModule"
  "sEntry\022=\n\ncomponents\030\010 \003(\0132).civ.monitor"
  ".SystemStatus.ComponentsEntry\022\025\n\rpasseng"
  "er_msg\030\004 \001(\t\022 \n\030safety_mode_trigger_time"
  "\030\005 \001(\001\022\036\n\026require_emergency_stop\030\006 \001(\010\022!"
  "\n\031is_realtime_in_simulation\030\t \001(\010\032O\n\017Hmi"
  "ModulesEntry\022\013\n\003key\030\001 \001(\t\022+\n\005value\030\002 \001(\013"
  "2\034.civ.monitor.ComponentStatus:\0028\001\032I\n\017Co"
  "mponentsEntry\022\013\n\003key\030\001 \001(\t\022%\n\005value\030\002 \001("
  "\0132\026.civ.monitor.Component:\0028\001J\004\010\002\020\003J\004\010\003\020"
  "\004"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_message_2fmonitor_2fproto_2fsystem_5fstatus_2eproto_deps[1] = {
  &::descriptor_table_message_2fcommon_2fproto_2fheader_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_message_2fmonitor_2fproto_2fsystem_5fstatus_2eproto_sccs[5] = {
  &scc_info_Component_message_2fmonitor_2fproto_2fsystem_5fstatus_2eproto.base,
  &scc_info_ComponentStatus_message_2fmonitor_2fproto_2fsystem_5fstatus_2eproto.base,
  &scc_info_SystemStatus_message_2fmonitor_2fproto_2fsystem_5fstatus_2eproto.base,
  &scc_info_SystemStatus_ComponentsEntry_DoNotUse_message_2fmonitor_2fproto_2fsystem_5fstatus_2eproto.base,
  &scc_info_SystemStatus_HmiModulesEntry_DoNotUse_message_2fmonitor_2fproto_2fsystem_5fstatus_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_message_2fmonitor_2fproto_2fsystem_5fstatus_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_message_2fmonitor_2fproto_2fsystem_5fstatus_2eproto = {
  false, false, descriptor_table_protodef_message_2fmonitor_2fproto_2fsystem_5fstatus_2eproto, "message/monitor/proto/system_status.proto", 1001,
  &descriptor_table_message_2fmonitor_2fproto_2fsystem_5fstatus_2eproto_once, descriptor_table_message_2fmonitor_2fproto_2fsystem_5fstatus_2eproto_sccs, descriptor_table_message_2fmonitor_2fproto_2fsystem_5fstatus_2eproto_deps, 5, 1,
  schemas, file_default_instances, TableStruct_message_2fmonitor_2fproto_2fsystem_5fstatus_2eproto::offsets,
  file_level_metadata_message_2fmonitor_2fproto_2fsystem_5fstatus_2eproto, 5, file_level_enum_descriptors_message_2fmonitor_2fproto_2fsystem_5fstatus_2eproto, file_level_service_descriptors_message_2fmonitor_2fproto_2fsystem_5fstatus_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_message_2fmonitor_2fproto_2fsystem_5fstatus_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_message_2fmonitor_2fproto_2fsystem_5fstatus_2eproto)), true);
namespace civ {
namespace monitor {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ComponentStatus_Status_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_message_2fmonitor_2fproto_2fsystem_5fstatus_2eproto);
  return file_level_enum_descriptors_message_2fmonitor_2fproto_2fsystem_5fstatus_2eproto[0];
}
bool ComponentStatus_Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ComponentStatus_Status ComponentStatus::UNKNOWN;
constexpr ComponentStatus_Status ComponentStatus::OK;
constexpr ComponentStatus_Status ComponentStatus::WARN;
constexpr ComponentStatus_Status ComponentStatus::ERROR;
constexpr ComponentStatus_Status ComponentStatus::FATAL;
constexpr ComponentStatus_Status ComponentStatus::Status_MIN;
constexpr ComponentStatus_Status ComponentStatus::Status_MAX;
constexpr int ComponentStatus::Status_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

class ComponentStatus::_Internal {
 public:
  using HasBits = decltype(std::declval<ComponentStatus>()._has_bits_);
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_message(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ComponentStatus::ComponentStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:civ.monitor.ComponentStatus)
}
ComponentStatus::ComponentStatus(const ComponentStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_message()) {
    message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_message(), 
      GetArena());
  }
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:civ.monitor.ComponentStatus)
}

void ComponentStatus::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ComponentStatus_message_2fmonitor_2fproto_2fsystem_5fstatus_2eproto.base);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_ = 0;
}

ComponentStatus::~ComponentStatus() {
  // @@protoc_insertion_point(destructor:civ.monitor.ComponentStatus)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ComponentStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ComponentStatus::ArenaDtor(void* object) {
  ComponentStatus* _this = reinterpret_cast< ComponentStatus* >(object);
  (void)_this;
}
void ComponentStatus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ComponentStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ComponentStatus& ComponentStatus::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ComponentStatus_message_2fmonitor_2fproto_2fsystem_5fstatus_2eproto.base);
  return *internal_default_instance();
}


void ComponentStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:civ.monitor.ComponentStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    message_.ClearNonDefaultToEmpty();
  }
  status_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ComponentStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .civ.monitor.ComponentStatus.Status status = 1 [default = UNKNOWN];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::civ::monitor::ComponentStatus_Status_IsValid(val))) {
            _internal_set_status(static_cast<::civ::monitor::ComponentStatus_Status>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional string message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "civ.monitor.ComponentStatus.message");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ComponentStatus::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:civ.monitor.ComponentStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .civ.monitor.ComponentStatus.Status status = 1 [default = UNKNOWN];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_status(), target);
  }

  // optional string message = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "civ.monitor.ComponentStatus.message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:civ.monitor.ComponentStatus)
  return target;
}

size_t ComponentStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:civ.monitor.ComponentStatus)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string message = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_message());
    }

    // optional .civ.monitor.ComponentStatus.Status status = 1 [default = UNKNOWN];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ComponentStatus::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:civ.monitor.ComponentStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const ComponentStatus* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ComponentStatus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:civ.monitor.ComponentStatus)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:civ.monitor.ComponentStatus)
    MergeFrom(*source);
  }
}

void ComponentStatus::MergeFrom(const ComponentStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:civ.monitor.ComponentStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_message(from._internal_message());
    }
    if (cached_has_bits & 0x00000002u) {
      status_ = from.status_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ComponentStatus::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:civ.monitor.ComponentStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ComponentStatus::CopyFrom(const ComponentStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:civ.monitor.ComponentStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ComponentStatus::IsInitialized() const {
  return true;
}

void ComponentStatus::InternalSwap(ComponentStatus* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ComponentStatus::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Component::_Internal {
 public:
  using HasBits = decltype(std::declval<Component>()._has_bits_);
  static const ::civ::monitor::ComponentStatus& summary(const Component* msg);
  static void set_has_summary(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::civ::monitor::ComponentStatus& process_status(const Component* msg);
  static void set_has_process_status(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::civ::monitor::ComponentStatus& channel_status(const Component* msg);
  static void set_has_channel_status(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::civ::monitor::ComponentStatus& resource_status(const Component* msg);
  static void set_has_resource_status(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::civ::monitor::ComponentStatus& other_status(const Component* msg);
  static void set_has_other_status(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::civ::monitor::ComponentStatus&
Component::_Internal::summary(const Component* msg) {
  return *msg->summary_;
}
const ::civ::monitor::ComponentStatus&
Component::_Internal::process_status(const Component* msg) {
  return *msg->process_status_;
}
const ::civ::monitor::ComponentStatus&
Component::_Internal::channel_status(const Component* msg) {
  return *msg->channel_status_;
}
const ::civ::monitor::ComponentStatus&
Component::_Internal::resource_status(const Component* msg) {
  return *msg->resource_status_;
}
const ::civ::monitor::ComponentStatus&
Component::_Internal::other_status(const Component* msg) {
  return *msg->other_status_;
}
Component::Component(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:civ.monitor.Component)
}
Component::Component(const Component& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_summary()) {
    summary_ = new ::civ::monitor::ComponentStatus(*from.summary_);
  } else {
    summary_ = nullptr;
  }
  if (from._internal_has_process_status()) {
    process_status_ = new ::civ::monitor::ComponentStatus(*from.process_status_);
  } else {
    process_status_ = nullptr;
  }
  if (from._internal_has_channel_status()) {
    channel_status_ = new ::civ::monitor::ComponentStatus(*from.channel_status_);
  } else {
    channel_status_ = nullptr;
  }
  if (from._internal_has_resource_status()) {
    resource_status_ = new ::civ::monitor::ComponentStatus(*from.resource_status_);
  } else {
    resource_status_ = nullptr;
  }
  if (from._internal_has_other_status()) {
    other_status_ = new ::civ::monitor::ComponentStatus(*from.other_status_);
  } else {
    other_status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:civ.monitor.Component)
}

void Component::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Component_message_2fmonitor_2fproto_2fsystem_5fstatus_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&summary_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&other_status_) -
      reinterpret_cast<char*>(&summary_)) + sizeof(other_status_));
}

Component::~Component() {
  // @@protoc_insertion_point(destructor:civ.monitor.Component)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Component::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete summary_;
  if (this != internal_default_instance()) delete process_status_;
  if (this != internal_default_instance()) delete channel_status_;
  if (this != internal_default_instance()) delete resource_status_;
  if (this != internal_default_instance()) delete other_status_;
}

void Component::ArenaDtor(void* object) {
  Component* _this = reinterpret_cast< Component* >(object);
  (void)_this;
}
void Component::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Component::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Component& Component::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Component_message_2fmonitor_2fproto_2fsystem_5fstatus_2eproto.base);
  return *internal_default_instance();
}


void Component::Clear() {
// @@protoc_insertion_point(message_clear_start:civ.monitor.Component)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(summary_ != nullptr);
      summary_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(process_status_ != nullptr);
      process_status_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(channel_status_ != nullptr);
      channel_status_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(resource_status_ != nullptr);
      resource_status_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(other_status_ != nullptr);
      other_status_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Component::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .civ.monitor.ComponentStatus summary = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_summary(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .civ.monitor.ComponentStatus process_status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_process_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .civ.monitor.ComponentStatus channel_status = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_channel_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .civ.monitor.ComponentStatus resource_status = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_resource_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .civ.monitor.ComponentStatus other_status = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_other_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Component::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:civ.monitor.Component)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .civ.monitor.ComponentStatus summary = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::summary(this), target, stream);
  }

  // optional .civ.monitor.ComponentStatus process_status = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::process_status(this), target, stream);
  }

  // optional .civ.monitor.ComponentStatus channel_status = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::channel_status(this), target, stream);
  }

  // optional .civ.monitor.ComponentStatus resource_status = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::resource_status(this), target, stream);
  }

  // optional .civ.monitor.ComponentStatus other_status = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::other_status(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:civ.monitor.Component)
  return target;
}

size_t Component::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:civ.monitor.Component)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .civ.monitor.ComponentStatus summary = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *summary_);
    }

    // optional .civ.monitor.ComponentStatus process_status = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *process_status_);
    }

    // optional .civ.monitor.ComponentStatus channel_status = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *channel_status_);
    }

    // optional .civ.monitor.ComponentStatus resource_status = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *resource_status_);
    }

    // optional .civ.monitor.ComponentStatus other_status = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *other_status_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Component::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:civ.monitor.Component)
  GOOGLE_DCHECK_NE(&from, this);
  const Component* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Component>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:civ.monitor.Component)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:civ.monitor.Component)
    MergeFrom(*source);
  }
}

void Component::MergeFrom(const Component& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:civ.monitor.Component)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_summary()->::civ::monitor::ComponentStatus::MergeFrom(from._internal_summary());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_process_status()->::civ::monitor::ComponentStatus::MergeFrom(from._internal_process_status());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_channel_status()->::civ::monitor::ComponentStatus::MergeFrom(from._internal_channel_status());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_resource_status()->::civ::monitor::ComponentStatus::MergeFrom(from._internal_resource_status());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_other_status()->::civ::monitor::ComponentStatus::MergeFrom(from._internal_other_status());
    }
  }
}

void Component::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:civ.monitor.Component)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Component::CopyFrom(const Component& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:civ.monitor.Component)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Component::IsInitialized() const {
  return true;
}

void Component::InternalSwap(Component* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Component, other_status_)
      + sizeof(Component::other_status_)
      - PROTOBUF_FIELD_OFFSET(Component, summary_)>(
          reinterpret_cast<char*>(&summary_),
          reinterpret_cast<char*>(&other->summary_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Component::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

SystemStatus_HmiModulesEntry_DoNotUse::SystemStatus_HmiModulesEntry_DoNotUse() {}
SystemStatus_HmiModulesEntry_DoNotUse::SystemStatus_HmiModulesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void SystemStatus_HmiModulesEntry_DoNotUse::MergeFrom(const SystemStatus_HmiModulesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata SystemStatus_HmiModulesEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void SystemStatus_HmiModulesEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

SystemStatus_ComponentsEntry_DoNotUse::SystemStatus_ComponentsEntry_DoNotUse() {}
SystemStatus_ComponentsEntry_DoNotUse::SystemStatus_ComponentsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void SystemStatus_ComponentsEntry_DoNotUse::MergeFrom(const SystemStatus_ComponentsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata SystemStatus_ComponentsEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void SystemStatus_ComponentsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

class SystemStatus::_Internal {
 public:
  using HasBits = decltype(std::declval<SystemStatus>()._has_bits_);
  static const ::civ::common::Header& header(const SystemStatus* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_passenger_msg(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_safety_mode_trigger_time(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_require_emergency_stop(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_is_realtime_in_simulation(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::civ::common::Header&
SystemStatus::_Internal::header(const SystemStatus* msg) {
  return *msg->header_;
}
void SystemStatus::clear_header() {
  if (header_ != nullptr) header_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
SystemStatus::SystemStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  hmi_modules_(arena),
  components_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:civ.monitor.SystemStatus)
}
SystemStatus::SystemStatus(const SystemStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  hmi_modules_.MergeFrom(from.hmi_modules_);
  components_.MergeFrom(from.components_);
  passenger_msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_passenger_msg()) {
    passenger_msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_passenger_msg(), 
      GetArena());
  }
  if (from._internal_has_header()) {
    header_ = new ::civ::common::Header(*from.header_);
  } else {
    header_ = nullptr;
  }
  ::memcpy(&safety_mode_trigger_time_, &from.safety_mode_trigger_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_realtime_in_simulation_) -
    reinterpret_cast<char*>(&safety_mode_trigger_time_)) + sizeof(is_realtime_in_simulation_));
  // @@protoc_insertion_point(copy_constructor:civ.monitor.SystemStatus)
}

void SystemStatus::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SystemStatus_message_2fmonitor_2fproto_2fsystem_5fstatus_2eproto.base);
  passenger_msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&header_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&is_realtime_in_simulation_) -
      reinterpret_cast<char*>(&header_)) + sizeof(is_realtime_in_simulation_));
}

SystemStatus::~SystemStatus() {
  // @@protoc_insertion_point(destructor:civ.monitor.SystemStatus)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SystemStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  passenger_msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete header_;
}

void SystemStatus::ArenaDtor(void* object) {
  SystemStatus* _this = reinterpret_cast< SystemStatus* >(object);
  (void)_this;
}
void SystemStatus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SystemStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SystemStatus& SystemStatus::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SystemStatus_message_2fmonitor_2fproto_2fsystem_5fstatus_2eproto.base);
  return *internal_default_instance();
}


void SystemStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:civ.monitor.SystemStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hmi_modules_.Clear();
  components_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      passenger_msg_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(header_ != nullptr);
      header_->Clear();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&safety_mode_trigger_time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_realtime_in_simulation_) -
        reinterpret_cast<char*>(&safety_mode_trigger_time_)) + sizeof(is_realtime_in_simulation_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SystemStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .civ.common.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string passenger_msg = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_passenger_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "civ.monitor.SystemStatus.passenger_msg");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double safety_mode_trigger_time = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_safety_mode_trigger_time(&has_bits);
          safety_mode_trigger_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional bool require_emergency_stop = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_require_emergency_stop(&has_bits);
          require_emergency_stop_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, .civ.monitor.ComponentStatus> hmi_modules = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&hmi_modules_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // map<string, .civ.monitor.Component> components = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&components_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      // optional bool is_realtime_in_simulation = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_is_realtime_in_simulation(&has_bits);
          is_realtime_in_simulation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SystemStatus::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:civ.monitor.SystemStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .civ.common.Header header = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // optional string passenger_msg = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_passenger_msg().data(), static_cast<int>(this->_internal_passenger_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "civ.monitor.SystemStatus.passenger_msg");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_passenger_msg(), target);
  }

  // optional double safety_mode_trigger_time = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_safety_mode_trigger_time(), target);
  }

  // optional bool require_emergency_stop = 6;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_require_emergency_stop(), target);
  }

  // map<string, .civ.monitor.ComponentStatus> hmi_modules = 7;
  if (!this->_internal_hmi_modules().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::civ::monitor::ComponentStatus >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
          "civ.monitor.SystemStatus.HmiModulesEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_hmi_modules().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_hmi_modules().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::civ::monitor::ComponentStatus >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::civ::monitor::ComponentStatus >::const_iterator
          it = this->_internal_hmi_modules().begin();
          it != this->_internal_hmi_modules().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = SystemStatus_HmiModulesEntry_DoNotUse::Funcs::InternalSerialize(7, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::civ::monitor::ComponentStatus >::const_iterator
          it = this->_internal_hmi_modules().begin();
          it != this->_internal_hmi_modules().end(); ++it) {
        target = SystemStatus_HmiModulesEntry_DoNotUse::Funcs::InternalSerialize(7, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<string, .civ.monitor.Component> components = 8;
  if (!this->_internal_components().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::civ::monitor::Component >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
          "civ.monitor.SystemStatus.ComponentsEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_components().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_components().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::civ::monitor::Component >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::civ::monitor::Component >::const_iterator
          it = this->_internal_components().begin();
          it != this->_internal_components().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = SystemStatus_ComponentsEntry_DoNotUse::Funcs::InternalSerialize(8, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::civ::monitor::Component >::const_iterator
          it = this->_internal_components().begin();
          it != this->_internal_components().end(); ++it) {
        target = SystemStatus_ComponentsEntry_DoNotUse::Funcs::InternalSerialize(8, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // optional bool is_realtime_in_simulation = 9;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_is_realtime_in_simulation(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:civ.monitor.SystemStatus)
  return target;
}

size_t SystemStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:civ.monitor.SystemStatus)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .civ.monitor.ComponentStatus> hmi_modules = 7;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_hmi_modules_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::civ::monitor::ComponentStatus >::const_iterator
      it = this->_internal_hmi_modules().begin();
      it != this->_internal_hmi_modules().end(); ++it) {
    total_size += SystemStatus_HmiModulesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, .civ.monitor.Component> components = 8;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_components_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::civ::monitor::Component >::const_iterator
      it = this->_internal_components().begin();
      it != this->_internal_components().end(); ++it) {
    total_size += SystemStatus_ComponentsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string passenger_msg = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_passenger_msg());
    }

    // optional .civ.common.Header header = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *header_);
    }

    // optional double safety_mode_trigger_time = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional bool require_emergency_stop = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool is_realtime_in_simulation = 9;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SystemStatus::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:civ.monitor.SystemStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const SystemStatus* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SystemStatus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:civ.monitor.SystemStatus)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:civ.monitor.SystemStatus)
    MergeFrom(*source);
  }
}

void SystemStatus::MergeFrom(const SystemStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:civ.monitor.SystemStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  hmi_modules_.MergeFrom(from.hmi_modules_);
  components_.MergeFrom(from.components_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_passenger_msg(from._internal_passenger_msg());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_header()->::civ::common::Header::MergeFrom(from._internal_header());
    }
    if (cached_has_bits & 0x00000004u) {
      safety_mode_trigger_time_ = from.safety_mode_trigger_time_;
    }
    if (cached_has_bits & 0x00000008u) {
      require_emergency_stop_ = from.require_emergency_stop_;
    }
    if (cached_has_bits & 0x00000010u) {
      is_realtime_in_simulation_ = from.is_realtime_in_simulation_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SystemStatus::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:civ.monitor.SystemStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SystemStatus::CopyFrom(const SystemStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:civ.monitor.SystemStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SystemStatus::IsInitialized() const {
  return true;
}

void SystemStatus::InternalSwap(SystemStatus* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  hmi_modules_.Swap(&other->hmi_modules_);
  components_.Swap(&other->components_);
  passenger_msg_.Swap(&other->passenger_msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SystemStatus, is_realtime_in_simulation_)
      + sizeof(SystemStatus::is_realtime_in_simulation_)
      - PROTOBUF_FIELD_OFFSET(SystemStatus, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SystemStatus::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace monitor
}  // namespace civ
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::civ::monitor::ComponentStatus* Arena::CreateMaybeMessage< ::civ::monitor::ComponentStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::civ::monitor::ComponentStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::civ::monitor::Component* Arena::CreateMaybeMessage< ::civ::monitor::Component >(Arena* arena) {
  return Arena::CreateMessageInternal< ::civ::monitor::Component >(arena);
}
template<> PROTOBUF_NOINLINE ::civ::monitor::SystemStatus_HmiModulesEntry_DoNotUse* Arena::CreateMaybeMessage< ::civ::monitor::SystemStatus_HmiModulesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::civ::monitor::SystemStatus_HmiModulesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::civ::monitor::SystemStatus_ComponentsEntry_DoNotUse* Arena::CreateMaybeMessage< ::civ::monitor::SystemStatus_ComponentsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::civ::monitor::SystemStatus_ComponentsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::civ::monitor::SystemStatus* Arena::CreateMaybeMessage< ::civ::monitor::SystemStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::civ::monitor::SystemStatus >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
