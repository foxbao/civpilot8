// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message/localization/proto/pose.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_message_2flocalization_2fproto_2fpose_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_message_2flocalization_2fproto_2fpose_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "message/common/proto/geometry.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_message_2flocalization_2fproto_2fpose_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_message_2flocalization_2fproto_2fpose_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_message_2flocalization_2fproto_2fpose_2eproto;
namespace civ {
namespace localization {
class Pose;
class PoseDefaultTypeInternal;
extern PoseDefaultTypeInternal _Pose_default_instance_;
}  // namespace localization
}  // namespace civ
PROTOBUF_NAMESPACE_OPEN
template<> ::civ::localization::Pose* Arena::CreateMaybeMessage<::civ::localization::Pose>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace civ {
namespace localization {

// ===================================================================

class Pose PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:civ.localization.Pose) */ {
 public:
  inline Pose() : Pose(nullptr) {}
  virtual ~Pose();

  Pose(const Pose& from);
  Pose(Pose&& from) noexcept
    : Pose() {
    *this = ::std::move(from);
  }

  inline Pose& operator=(const Pose& from) {
    CopyFrom(from);
    return *this;
  }
  inline Pose& operator=(Pose&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Pose& default_instance();

  static inline const Pose* internal_default_instance() {
    return reinterpret_cast<const Pose*>(
               &_Pose_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Pose& a, Pose& b) {
    a.Swap(&b);
  }
  inline void Swap(Pose* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Pose* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Pose* New() const final {
    return CreateMaybeMessage<Pose>(nullptr);
  }

  Pose* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Pose>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Pose& from);
  void MergeFrom(const Pose& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Pose* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "civ.localization.Pose";
  }
  protected:
  explicit Pose(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_message_2flocalization_2fproto_2fpose_2eproto);
    return ::descriptor_table_message_2flocalization_2fproto_2fpose_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionFieldNumber = 1,
    kOrientationFieldNumber = 2,
    kLinearVelocityFieldNumber = 3,
    kLinearAccelerationFieldNumber = 4,
    kAngularVelocityFieldNumber = 5,
    kLinearAccelerationVrfFieldNumber = 7,
    kAngularVelocityVrfFieldNumber = 8,
    kEulerAnglesFieldNumber = 9,
    kLinearVelocityVrfFieldNumber = 10,
    kPositionLlhFieldNumber = 11,
    kHeadingFieldNumber = 6,
  };
  // optional .civ.common.PointENU position = 1;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::civ::common::PointENU& position() const;
  ::civ::common::PointENU* release_position();
  ::civ::common::PointENU* mutable_position();
  void set_allocated_position(::civ::common::PointENU* position);
  private:
  const ::civ::common::PointENU& _internal_position() const;
  ::civ::common::PointENU* _internal_mutable_position();
  public:
  void unsafe_arena_set_allocated_position(
      ::civ::common::PointENU* position);
  ::civ::common::PointENU* unsafe_arena_release_position();

  // optional .civ.common.Quaternion orientation = 2;
  bool has_orientation() const;
  private:
  bool _internal_has_orientation() const;
  public:
  void clear_orientation();
  const ::civ::common::Quaternion& orientation() const;
  ::civ::common::Quaternion* release_orientation();
  ::civ::common::Quaternion* mutable_orientation();
  void set_allocated_orientation(::civ::common::Quaternion* orientation);
  private:
  const ::civ::common::Quaternion& _internal_orientation() const;
  ::civ::common::Quaternion* _internal_mutable_orientation();
  public:
  void unsafe_arena_set_allocated_orientation(
      ::civ::common::Quaternion* orientation);
  ::civ::common::Quaternion* unsafe_arena_release_orientation();

  // optional .civ.common.Point3D linear_velocity = 3;
  bool has_linear_velocity() const;
  private:
  bool _internal_has_linear_velocity() const;
  public:
  void clear_linear_velocity();
  const ::civ::common::Point3D& linear_velocity() const;
  ::civ::common::Point3D* release_linear_velocity();
  ::civ::common::Point3D* mutable_linear_velocity();
  void set_allocated_linear_velocity(::civ::common::Point3D* linear_velocity);
  private:
  const ::civ::common::Point3D& _internal_linear_velocity() const;
  ::civ::common::Point3D* _internal_mutable_linear_velocity();
  public:
  void unsafe_arena_set_allocated_linear_velocity(
      ::civ::common::Point3D* linear_velocity);
  ::civ::common::Point3D* unsafe_arena_release_linear_velocity();

  // optional .civ.common.Point3D linear_acceleration = 4;
  bool has_linear_acceleration() const;
  private:
  bool _internal_has_linear_acceleration() const;
  public:
  void clear_linear_acceleration();
  const ::civ::common::Point3D& linear_acceleration() const;
  ::civ::common::Point3D* release_linear_acceleration();
  ::civ::common::Point3D* mutable_linear_acceleration();
  void set_allocated_linear_acceleration(::civ::common::Point3D* linear_acceleration);
  private:
  const ::civ::common::Point3D& _internal_linear_acceleration() const;
  ::civ::common::Point3D* _internal_mutable_linear_acceleration();
  public:
  void unsafe_arena_set_allocated_linear_acceleration(
      ::civ::common::Point3D* linear_acceleration);
  ::civ::common::Point3D* unsafe_arena_release_linear_acceleration();

  // optional .civ.common.Point3D angular_velocity = 5;
  bool has_angular_velocity() const;
  private:
  bool _internal_has_angular_velocity() const;
  public:
  void clear_angular_velocity();
  const ::civ::common::Point3D& angular_velocity() const;
  ::civ::common::Point3D* release_angular_velocity();
  ::civ::common::Point3D* mutable_angular_velocity();
  void set_allocated_angular_velocity(::civ::common::Point3D* angular_velocity);
  private:
  const ::civ::common::Point3D& _internal_angular_velocity() const;
  ::civ::common::Point3D* _internal_mutable_angular_velocity();
  public:
  void unsafe_arena_set_allocated_angular_velocity(
      ::civ::common::Point3D* angular_velocity);
  ::civ::common::Point3D* unsafe_arena_release_angular_velocity();

  // optional .civ.common.Point3D linear_acceleration_vrf = 7;
  bool has_linear_acceleration_vrf() const;
  private:
  bool _internal_has_linear_acceleration_vrf() const;
  public:
  void clear_linear_acceleration_vrf();
  const ::civ::common::Point3D& linear_acceleration_vrf() const;
  ::civ::common::Point3D* release_linear_acceleration_vrf();
  ::civ::common::Point3D* mutable_linear_acceleration_vrf();
  void set_allocated_linear_acceleration_vrf(::civ::common::Point3D* linear_acceleration_vrf);
  private:
  const ::civ::common::Point3D& _internal_linear_acceleration_vrf() const;
  ::civ::common::Point3D* _internal_mutable_linear_acceleration_vrf();
  public:
  void unsafe_arena_set_allocated_linear_acceleration_vrf(
      ::civ::common::Point3D* linear_acceleration_vrf);
  ::civ::common::Point3D* unsafe_arena_release_linear_acceleration_vrf();

  // optional .civ.common.Point3D angular_velocity_vrf = 8;
  bool has_angular_velocity_vrf() const;
  private:
  bool _internal_has_angular_velocity_vrf() const;
  public:
  void clear_angular_velocity_vrf();
  const ::civ::common::Point3D& angular_velocity_vrf() const;
  ::civ::common::Point3D* release_angular_velocity_vrf();
  ::civ::common::Point3D* mutable_angular_velocity_vrf();
  void set_allocated_angular_velocity_vrf(::civ::common::Point3D* angular_velocity_vrf);
  private:
  const ::civ::common::Point3D& _internal_angular_velocity_vrf() const;
  ::civ::common::Point3D* _internal_mutable_angular_velocity_vrf();
  public:
  void unsafe_arena_set_allocated_angular_velocity_vrf(
      ::civ::common::Point3D* angular_velocity_vrf);
  ::civ::common::Point3D* unsafe_arena_release_angular_velocity_vrf();

  // optional .civ.common.Point3D euler_angles = 9;
  bool has_euler_angles() const;
  private:
  bool _internal_has_euler_angles() const;
  public:
  void clear_euler_angles();
  const ::civ::common::Point3D& euler_angles() const;
  ::civ::common::Point3D* release_euler_angles();
  ::civ::common::Point3D* mutable_euler_angles();
  void set_allocated_euler_angles(::civ::common::Point3D* euler_angles);
  private:
  const ::civ::common::Point3D& _internal_euler_angles() const;
  ::civ::common::Point3D* _internal_mutable_euler_angles();
  public:
  void unsafe_arena_set_allocated_euler_angles(
      ::civ::common::Point3D* euler_angles);
  ::civ::common::Point3D* unsafe_arena_release_euler_angles();

  // optional .civ.common.Point3D linear_velocity_vrf = 10;
  bool has_linear_velocity_vrf() const;
  private:
  bool _internal_has_linear_velocity_vrf() const;
  public:
  void clear_linear_velocity_vrf();
  const ::civ::common::Point3D& linear_velocity_vrf() const;
  ::civ::common::Point3D* release_linear_velocity_vrf();
  ::civ::common::Point3D* mutable_linear_velocity_vrf();
  void set_allocated_linear_velocity_vrf(::civ::common::Point3D* linear_velocity_vrf);
  private:
  const ::civ::common::Point3D& _internal_linear_velocity_vrf() const;
  ::civ::common::Point3D* _internal_mutable_linear_velocity_vrf();
  public:
  void unsafe_arena_set_allocated_linear_velocity_vrf(
      ::civ::common::Point3D* linear_velocity_vrf);
  ::civ::common::Point3D* unsafe_arena_release_linear_velocity_vrf();

  // optional .civ.common.PointLLH position_llh = 11;
  bool has_position_llh() const;
  private:
  bool _internal_has_position_llh() const;
  public:
  void clear_position_llh();
  const ::civ::common::PointLLH& position_llh() const;
  ::civ::common::PointLLH* release_position_llh();
  ::civ::common::PointLLH* mutable_position_llh();
  void set_allocated_position_llh(::civ::common::PointLLH* position_llh);
  private:
  const ::civ::common::PointLLH& _internal_position_llh() const;
  ::civ::common::PointLLH* _internal_mutable_position_llh();
  public:
  void unsafe_arena_set_allocated_position_llh(
      ::civ::common::PointLLH* position_llh);
  ::civ::common::PointLLH* unsafe_arena_release_position_llh();

  // optional double heading = 6;
  bool has_heading() const;
  private:
  bool _internal_has_heading() const;
  public:
  void clear_heading();
  double heading() const;
  void set_heading(double value);
  private:
  double _internal_heading() const;
  void _internal_set_heading(double value);
  public:

  // @@protoc_insertion_point(class_scope:civ.localization.Pose)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::civ::common::PointENU* position_;
  ::civ::common::Quaternion* orientation_;
  ::civ::common::Point3D* linear_velocity_;
  ::civ::common::Point3D* linear_acceleration_;
  ::civ::common::Point3D* angular_velocity_;
  ::civ::common::Point3D* linear_acceleration_vrf_;
  ::civ::common::Point3D* angular_velocity_vrf_;
  ::civ::common::Point3D* euler_angles_;
  ::civ::common::Point3D* linear_velocity_vrf_;
  ::civ::common::PointLLH* position_llh_;
  double heading_;
  friend struct ::TableStruct_message_2flocalization_2fproto_2fpose_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Pose

// optional .civ.common.PointENU position = 1;
inline bool Pose::_internal_has_position() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || position_ != nullptr);
  return value;
}
inline bool Pose::has_position() const {
  return _internal_has_position();
}
inline const ::civ::common::PointENU& Pose::_internal_position() const {
  const ::civ::common::PointENU* p = position_;
  return p != nullptr ? *p : reinterpret_cast<const ::civ::common::PointENU&>(
      ::civ::common::_PointENU_default_instance_);
}
inline const ::civ::common::PointENU& Pose::position() const {
  // @@protoc_insertion_point(field_get:civ.localization.Pose.position)
  return _internal_position();
}
inline void Pose::unsafe_arena_set_allocated_position(
    ::civ::common::PointENU* position) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_);
  }
  position_ = position;
  if (position) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:civ.localization.Pose.position)
}
inline ::civ::common::PointENU* Pose::release_position() {
  _has_bits_[0] &= ~0x00000001u;
  ::civ::common::PointENU* temp = position_;
  position_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::civ::common::PointENU* Pose::unsafe_arena_release_position() {
  // @@protoc_insertion_point(field_release:civ.localization.Pose.position)
  _has_bits_[0] &= ~0x00000001u;
  ::civ::common::PointENU* temp = position_;
  position_ = nullptr;
  return temp;
}
inline ::civ::common::PointENU* Pose::_internal_mutable_position() {
  _has_bits_[0] |= 0x00000001u;
  if (position_ == nullptr) {
    auto* p = CreateMaybeMessage<::civ::common::PointENU>(GetArena());
    position_ = p;
  }
  return position_;
}
inline ::civ::common::PointENU* Pose::mutable_position() {
  // @@protoc_insertion_point(field_mutable:civ.localization.Pose.position)
  return _internal_mutable_position();
}
inline void Pose::set_allocated_position(::civ::common::PointENU* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_);
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(position)->GetArena();
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:civ.localization.Pose.position)
}

// optional .civ.common.Quaternion orientation = 2;
inline bool Pose::_internal_has_orientation() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || orientation_ != nullptr);
  return value;
}
inline bool Pose::has_orientation() const {
  return _internal_has_orientation();
}
inline const ::civ::common::Quaternion& Pose::_internal_orientation() const {
  const ::civ::common::Quaternion* p = orientation_;
  return p != nullptr ? *p : reinterpret_cast<const ::civ::common::Quaternion&>(
      ::civ::common::_Quaternion_default_instance_);
}
inline const ::civ::common::Quaternion& Pose::orientation() const {
  // @@protoc_insertion_point(field_get:civ.localization.Pose.orientation)
  return _internal_orientation();
}
inline void Pose::unsafe_arena_set_allocated_orientation(
    ::civ::common::Quaternion* orientation) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(orientation_);
  }
  orientation_ = orientation;
  if (orientation) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:civ.localization.Pose.orientation)
}
inline ::civ::common::Quaternion* Pose::release_orientation() {
  _has_bits_[0] &= ~0x00000002u;
  ::civ::common::Quaternion* temp = orientation_;
  orientation_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::civ::common::Quaternion* Pose::unsafe_arena_release_orientation() {
  // @@protoc_insertion_point(field_release:civ.localization.Pose.orientation)
  _has_bits_[0] &= ~0x00000002u;
  ::civ::common::Quaternion* temp = orientation_;
  orientation_ = nullptr;
  return temp;
}
inline ::civ::common::Quaternion* Pose::_internal_mutable_orientation() {
  _has_bits_[0] |= 0x00000002u;
  if (orientation_ == nullptr) {
    auto* p = CreateMaybeMessage<::civ::common::Quaternion>(GetArena());
    orientation_ = p;
  }
  return orientation_;
}
inline ::civ::common::Quaternion* Pose::mutable_orientation() {
  // @@protoc_insertion_point(field_mutable:civ.localization.Pose.orientation)
  return _internal_mutable_orientation();
}
inline void Pose::set_allocated_orientation(::civ::common::Quaternion* orientation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(orientation_);
  }
  if (orientation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(orientation)->GetArena();
    if (message_arena != submessage_arena) {
      orientation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, orientation, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  orientation_ = orientation;
  // @@protoc_insertion_point(field_set_allocated:civ.localization.Pose.orientation)
}

// optional .civ.common.Point3D linear_velocity = 3;
inline bool Pose::_internal_has_linear_velocity() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || linear_velocity_ != nullptr);
  return value;
}
inline bool Pose::has_linear_velocity() const {
  return _internal_has_linear_velocity();
}
inline const ::civ::common::Point3D& Pose::_internal_linear_velocity() const {
  const ::civ::common::Point3D* p = linear_velocity_;
  return p != nullptr ? *p : reinterpret_cast<const ::civ::common::Point3D&>(
      ::civ::common::_Point3D_default_instance_);
}
inline const ::civ::common::Point3D& Pose::linear_velocity() const {
  // @@protoc_insertion_point(field_get:civ.localization.Pose.linear_velocity)
  return _internal_linear_velocity();
}
inline void Pose::unsafe_arena_set_allocated_linear_velocity(
    ::civ::common::Point3D* linear_velocity) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(linear_velocity_);
  }
  linear_velocity_ = linear_velocity;
  if (linear_velocity) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:civ.localization.Pose.linear_velocity)
}
inline ::civ::common::Point3D* Pose::release_linear_velocity() {
  _has_bits_[0] &= ~0x00000004u;
  ::civ::common::Point3D* temp = linear_velocity_;
  linear_velocity_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::civ::common::Point3D* Pose::unsafe_arena_release_linear_velocity() {
  // @@protoc_insertion_point(field_release:civ.localization.Pose.linear_velocity)
  _has_bits_[0] &= ~0x00000004u;
  ::civ::common::Point3D* temp = linear_velocity_;
  linear_velocity_ = nullptr;
  return temp;
}
inline ::civ::common::Point3D* Pose::_internal_mutable_linear_velocity() {
  _has_bits_[0] |= 0x00000004u;
  if (linear_velocity_ == nullptr) {
    auto* p = CreateMaybeMessage<::civ::common::Point3D>(GetArena());
    linear_velocity_ = p;
  }
  return linear_velocity_;
}
inline ::civ::common::Point3D* Pose::mutable_linear_velocity() {
  // @@protoc_insertion_point(field_mutable:civ.localization.Pose.linear_velocity)
  return _internal_mutable_linear_velocity();
}
inline void Pose::set_allocated_linear_velocity(::civ::common::Point3D* linear_velocity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(linear_velocity_);
  }
  if (linear_velocity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(linear_velocity)->GetArena();
    if (message_arena != submessage_arena) {
      linear_velocity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, linear_velocity, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  linear_velocity_ = linear_velocity;
  // @@protoc_insertion_point(field_set_allocated:civ.localization.Pose.linear_velocity)
}

// optional .civ.common.Point3D linear_acceleration = 4;
inline bool Pose::_internal_has_linear_acceleration() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || linear_acceleration_ != nullptr);
  return value;
}
inline bool Pose::has_linear_acceleration() const {
  return _internal_has_linear_acceleration();
}
inline const ::civ::common::Point3D& Pose::_internal_linear_acceleration() const {
  const ::civ::common::Point3D* p = linear_acceleration_;
  return p != nullptr ? *p : reinterpret_cast<const ::civ::common::Point3D&>(
      ::civ::common::_Point3D_default_instance_);
}
inline const ::civ::common::Point3D& Pose::linear_acceleration() const {
  // @@protoc_insertion_point(field_get:civ.localization.Pose.linear_acceleration)
  return _internal_linear_acceleration();
}
inline void Pose::unsafe_arena_set_allocated_linear_acceleration(
    ::civ::common::Point3D* linear_acceleration) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(linear_acceleration_);
  }
  linear_acceleration_ = linear_acceleration;
  if (linear_acceleration) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:civ.localization.Pose.linear_acceleration)
}
inline ::civ::common::Point3D* Pose::release_linear_acceleration() {
  _has_bits_[0] &= ~0x00000008u;
  ::civ::common::Point3D* temp = linear_acceleration_;
  linear_acceleration_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::civ::common::Point3D* Pose::unsafe_arena_release_linear_acceleration() {
  // @@protoc_insertion_point(field_release:civ.localization.Pose.linear_acceleration)
  _has_bits_[0] &= ~0x00000008u;
  ::civ::common::Point3D* temp = linear_acceleration_;
  linear_acceleration_ = nullptr;
  return temp;
}
inline ::civ::common::Point3D* Pose::_internal_mutable_linear_acceleration() {
  _has_bits_[0] |= 0x00000008u;
  if (linear_acceleration_ == nullptr) {
    auto* p = CreateMaybeMessage<::civ::common::Point3D>(GetArena());
    linear_acceleration_ = p;
  }
  return linear_acceleration_;
}
inline ::civ::common::Point3D* Pose::mutable_linear_acceleration() {
  // @@protoc_insertion_point(field_mutable:civ.localization.Pose.linear_acceleration)
  return _internal_mutable_linear_acceleration();
}
inline void Pose::set_allocated_linear_acceleration(::civ::common::Point3D* linear_acceleration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(linear_acceleration_);
  }
  if (linear_acceleration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(linear_acceleration)->GetArena();
    if (message_arena != submessage_arena) {
      linear_acceleration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, linear_acceleration, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  linear_acceleration_ = linear_acceleration;
  // @@protoc_insertion_point(field_set_allocated:civ.localization.Pose.linear_acceleration)
}

// optional .civ.common.Point3D angular_velocity = 5;
inline bool Pose::_internal_has_angular_velocity() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || angular_velocity_ != nullptr);
  return value;
}
inline bool Pose::has_angular_velocity() const {
  return _internal_has_angular_velocity();
}
inline const ::civ::common::Point3D& Pose::_internal_angular_velocity() const {
  const ::civ::common::Point3D* p = angular_velocity_;
  return p != nullptr ? *p : reinterpret_cast<const ::civ::common::Point3D&>(
      ::civ::common::_Point3D_default_instance_);
}
inline const ::civ::common::Point3D& Pose::angular_velocity() const {
  // @@protoc_insertion_point(field_get:civ.localization.Pose.angular_velocity)
  return _internal_angular_velocity();
}
inline void Pose::unsafe_arena_set_allocated_angular_velocity(
    ::civ::common::Point3D* angular_velocity) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(angular_velocity_);
  }
  angular_velocity_ = angular_velocity;
  if (angular_velocity) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:civ.localization.Pose.angular_velocity)
}
inline ::civ::common::Point3D* Pose::release_angular_velocity() {
  _has_bits_[0] &= ~0x00000010u;
  ::civ::common::Point3D* temp = angular_velocity_;
  angular_velocity_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::civ::common::Point3D* Pose::unsafe_arena_release_angular_velocity() {
  // @@protoc_insertion_point(field_release:civ.localization.Pose.angular_velocity)
  _has_bits_[0] &= ~0x00000010u;
  ::civ::common::Point3D* temp = angular_velocity_;
  angular_velocity_ = nullptr;
  return temp;
}
inline ::civ::common::Point3D* Pose::_internal_mutable_angular_velocity() {
  _has_bits_[0] |= 0x00000010u;
  if (angular_velocity_ == nullptr) {
    auto* p = CreateMaybeMessage<::civ::common::Point3D>(GetArena());
    angular_velocity_ = p;
  }
  return angular_velocity_;
}
inline ::civ::common::Point3D* Pose::mutable_angular_velocity() {
  // @@protoc_insertion_point(field_mutable:civ.localization.Pose.angular_velocity)
  return _internal_mutable_angular_velocity();
}
inline void Pose::set_allocated_angular_velocity(::civ::common::Point3D* angular_velocity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(angular_velocity_);
  }
  if (angular_velocity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(angular_velocity)->GetArena();
    if (message_arena != submessage_arena) {
      angular_velocity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, angular_velocity, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  angular_velocity_ = angular_velocity;
  // @@protoc_insertion_point(field_set_allocated:civ.localization.Pose.angular_velocity)
}

// optional double heading = 6;
inline bool Pose::_internal_has_heading() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool Pose::has_heading() const {
  return _internal_has_heading();
}
inline void Pose::clear_heading() {
  heading_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline double Pose::_internal_heading() const {
  return heading_;
}
inline double Pose::heading() const {
  // @@protoc_insertion_point(field_get:civ.localization.Pose.heading)
  return _internal_heading();
}
inline void Pose::_internal_set_heading(double value) {
  _has_bits_[0] |= 0x00000400u;
  heading_ = value;
}
inline void Pose::set_heading(double value) {
  _internal_set_heading(value);
  // @@protoc_insertion_point(field_set:civ.localization.Pose.heading)
}

// optional .civ.common.Point3D linear_acceleration_vrf = 7;
inline bool Pose::_internal_has_linear_acceleration_vrf() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || linear_acceleration_vrf_ != nullptr);
  return value;
}
inline bool Pose::has_linear_acceleration_vrf() const {
  return _internal_has_linear_acceleration_vrf();
}
inline const ::civ::common::Point3D& Pose::_internal_linear_acceleration_vrf() const {
  const ::civ::common::Point3D* p = linear_acceleration_vrf_;
  return p != nullptr ? *p : reinterpret_cast<const ::civ::common::Point3D&>(
      ::civ::common::_Point3D_default_instance_);
}
inline const ::civ::common::Point3D& Pose::linear_acceleration_vrf() const {
  // @@protoc_insertion_point(field_get:civ.localization.Pose.linear_acceleration_vrf)
  return _internal_linear_acceleration_vrf();
}
inline void Pose::unsafe_arena_set_allocated_linear_acceleration_vrf(
    ::civ::common::Point3D* linear_acceleration_vrf) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(linear_acceleration_vrf_);
  }
  linear_acceleration_vrf_ = linear_acceleration_vrf;
  if (linear_acceleration_vrf) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:civ.localization.Pose.linear_acceleration_vrf)
}
inline ::civ::common::Point3D* Pose::release_linear_acceleration_vrf() {
  _has_bits_[0] &= ~0x00000020u;
  ::civ::common::Point3D* temp = linear_acceleration_vrf_;
  linear_acceleration_vrf_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::civ::common::Point3D* Pose::unsafe_arena_release_linear_acceleration_vrf() {
  // @@protoc_insertion_point(field_release:civ.localization.Pose.linear_acceleration_vrf)
  _has_bits_[0] &= ~0x00000020u;
  ::civ::common::Point3D* temp = linear_acceleration_vrf_;
  linear_acceleration_vrf_ = nullptr;
  return temp;
}
inline ::civ::common::Point3D* Pose::_internal_mutable_linear_acceleration_vrf() {
  _has_bits_[0] |= 0x00000020u;
  if (linear_acceleration_vrf_ == nullptr) {
    auto* p = CreateMaybeMessage<::civ::common::Point3D>(GetArena());
    linear_acceleration_vrf_ = p;
  }
  return linear_acceleration_vrf_;
}
inline ::civ::common::Point3D* Pose::mutable_linear_acceleration_vrf() {
  // @@protoc_insertion_point(field_mutable:civ.localization.Pose.linear_acceleration_vrf)
  return _internal_mutable_linear_acceleration_vrf();
}
inline void Pose::set_allocated_linear_acceleration_vrf(::civ::common::Point3D* linear_acceleration_vrf) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(linear_acceleration_vrf_);
  }
  if (linear_acceleration_vrf) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(linear_acceleration_vrf)->GetArena();
    if (message_arena != submessage_arena) {
      linear_acceleration_vrf = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, linear_acceleration_vrf, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  linear_acceleration_vrf_ = linear_acceleration_vrf;
  // @@protoc_insertion_point(field_set_allocated:civ.localization.Pose.linear_acceleration_vrf)
}

// optional .civ.common.Point3D angular_velocity_vrf = 8;
inline bool Pose::_internal_has_angular_velocity_vrf() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || angular_velocity_vrf_ != nullptr);
  return value;
}
inline bool Pose::has_angular_velocity_vrf() const {
  return _internal_has_angular_velocity_vrf();
}
inline const ::civ::common::Point3D& Pose::_internal_angular_velocity_vrf() const {
  const ::civ::common::Point3D* p = angular_velocity_vrf_;
  return p != nullptr ? *p : reinterpret_cast<const ::civ::common::Point3D&>(
      ::civ::common::_Point3D_default_instance_);
}
inline const ::civ::common::Point3D& Pose::angular_velocity_vrf() const {
  // @@protoc_insertion_point(field_get:civ.localization.Pose.angular_velocity_vrf)
  return _internal_angular_velocity_vrf();
}
inline void Pose::unsafe_arena_set_allocated_angular_velocity_vrf(
    ::civ::common::Point3D* angular_velocity_vrf) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(angular_velocity_vrf_);
  }
  angular_velocity_vrf_ = angular_velocity_vrf;
  if (angular_velocity_vrf) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:civ.localization.Pose.angular_velocity_vrf)
}
inline ::civ::common::Point3D* Pose::release_angular_velocity_vrf() {
  _has_bits_[0] &= ~0x00000040u;
  ::civ::common::Point3D* temp = angular_velocity_vrf_;
  angular_velocity_vrf_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::civ::common::Point3D* Pose::unsafe_arena_release_angular_velocity_vrf() {
  // @@protoc_insertion_point(field_release:civ.localization.Pose.angular_velocity_vrf)
  _has_bits_[0] &= ~0x00000040u;
  ::civ::common::Point3D* temp = angular_velocity_vrf_;
  angular_velocity_vrf_ = nullptr;
  return temp;
}
inline ::civ::common::Point3D* Pose::_internal_mutable_angular_velocity_vrf() {
  _has_bits_[0] |= 0x00000040u;
  if (angular_velocity_vrf_ == nullptr) {
    auto* p = CreateMaybeMessage<::civ::common::Point3D>(GetArena());
    angular_velocity_vrf_ = p;
  }
  return angular_velocity_vrf_;
}
inline ::civ::common::Point3D* Pose::mutable_angular_velocity_vrf() {
  // @@protoc_insertion_point(field_mutable:civ.localization.Pose.angular_velocity_vrf)
  return _internal_mutable_angular_velocity_vrf();
}
inline void Pose::set_allocated_angular_velocity_vrf(::civ::common::Point3D* angular_velocity_vrf) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(angular_velocity_vrf_);
  }
  if (angular_velocity_vrf) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(angular_velocity_vrf)->GetArena();
    if (message_arena != submessage_arena) {
      angular_velocity_vrf = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, angular_velocity_vrf, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  angular_velocity_vrf_ = angular_velocity_vrf;
  // @@protoc_insertion_point(field_set_allocated:civ.localization.Pose.angular_velocity_vrf)
}

// optional .civ.common.Point3D euler_angles = 9;
inline bool Pose::_internal_has_euler_angles() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || euler_angles_ != nullptr);
  return value;
}
inline bool Pose::has_euler_angles() const {
  return _internal_has_euler_angles();
}
inline const ::civ::common::Point3D& Pose::_internal_euler_angles() const {
  const ::civ::common::Point3D* p = euler_angles_;
  return p != nullptr ? *p : reinterpret_cast<const ::civ::common::Point3D&>(
      ::civ::common::_Point3D_default_instance_);
}
inline const ::civ::common::Point3D& Pose::euler_angles() const {
  // @@protoc_insertion_point(field_get:civ.localization.Pose.euler_angles)
  return _internal_euler_angles();
}
inline void Pose::unsafe_arena_set_allocated_euler_angles(
    ::civ::common::Point3D* euler_angles) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(euler_angles_);
  }
  euler_angles_ = euler_angles;
  if (euler_angles) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:civ.localization.Pose.euler_angles)
}
inline ::civ::common::Point3D* Pose::release_euler_angles() {
  _has_bits_[0] &= ~0x00000080u;
  ::civ::common::Point3D* temp = euler_angles_;
  euler_angles_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::civ::common::Point3D* Pose::unsafe_arena_release_euler_angles() {
  // @@protoc_insertion_point(field_release:civ.localization.Pose.euler_angles)
  _has_bits_[0] &= ~0x00000080u;
  ::civ::common::Point3D* temp = euler_angles_;
  euler_angles_ = nullptr;
  return temp;
}
inline ::civ::common::Point3D* Pose::_internal_mutable_euler_angles() {
  _has_bits_[0] |= 0x00000080u;
  if (euler_angles_ == nullptr) {
    auto* p = CreateMaybeMessage<::civ::common::Point3D>(GetArena());
    euler_angles_ = p;
  }
  return euler_angles_;
}
inline ::civ::common::Point3D* Pose::mutable_euler_angles() {
  // @@protoc_insertion_point(field_mutable:civ.localization.Pose.euler_angles)
  return _internal_mutable_euler_angles();
}
inline void Pose::set_allocated_euler_angles(::civ::common::Point3D* euler_angles) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(euler_angles_);
  }
  if (euler_angles) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(euler_angles)->GetArena();
    if (message_arena != submessage_arena) {
      euler_angles = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, euler_angles, submessage_arena);
    }
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  euler_angles_ = euler_angles;
  // @@protoc_insertion_point(field_set_allocated:civ.localization.Pose.euler_angles)
}

// optional .civ.common.Point3D linear_velocity_vrf = 10;
inline bool Pose::_internal_has_linear_velocity_vrf() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || linear_velocity_vrf_ != nullptr);
  return value;
}
inline bool Pose::has_linear_velocity_vrf() const {
  return _internal_has_linear_velocity_vrf();
}
inline const ::civ::common::Point3D& Pose::_internal_linear_velocity_vrf() const {
  const ::civ::common::Point3D* p = linear_velocity_vrf_;
  return p != nullptr ? *p : reinterpret_cast<const ::civ::common::Point3D&>(
      ::civ::common::_Point3D_default_instance_);
}
inline const ::civ::common::Point3D& Pose::linear_velocity_vrf() const {
  // @@protoc_insertion_point(field_get:civ.localization.Pose.linear_velocity_vrf)
  return _internal_linear_velocity_vrf();
}
inline void Pose::unsafe_arena_set_allocated_linear_velocity_vrf(
    ::civ::common::Point3D* linear_velocity_vrf) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(linear_velocity_vrf_);
  }
  linear_velocity_vrf_ = linear_velocity_vrf;
  if (linear_velocity_vrf) {
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:civ.localization.Pose.linear_velocity_vrf)
}
inline ::civ::common::Point3D* Pose::release_linear_velocity_vrf() {
  _has_bits_[0] &= ~0x00000100u;
  ::civ::common::Point3D* temp = linear_velocity_vrf_;
  linear_velocity_vrf_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::civ::common::Point3D* Pose::unsafe_arena_release_linear_velocity_vrf() {
  // @@protoc_insertion_point(field_release:civ.localization.Pose.linear_velocity_vrf)
  _has_bits_[0] &= ~0x00000100u;
  ::civ::common::Point3D* temp = linear_velocity_vrf_;
  linear_velocity_vrf_ = nullptr;
  return temp;
}
inline ::civ::common::Point3D* Pose::_internal_mutable_linear_velocity_vrf() {
  _has_bits_[0] |= 0x00000100u;
  if (linear_velocity_vrf_ == nullptr) {
    auto* p = CreateMaybeMessage<::civ::common::Point3D>(GetArena());
    linear_velocity_vrf_ = p;
  }
  return linear_velocity_vrf_;
}
inline ::civ::common::Point3D* Pose::mutable_linear_velocity_vrf() {
  // @@protoc_insertion_point(field_mutable:civ.localization.Pose.linear_velocity_vrf)
  return _internal_mutable_linear_velocity_vrf();
}
inline void Pose::set_allocated_linear_velocity_vrf(::civ::common::Point3D* linear_velocity_vrf) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(linear_velocity_vrf_);
  }
  if (linear_velocity_vrf) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(linear_velocity_vrf)->GetArena();
    if (message_arena != submessage_arena) {
      linear_velocity_vrf = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, linear_velocity_vrf, submessage_arena);
    }
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  linear_velocity_vrf_ = linear_velocity_vrf;
  // @@protoc_insertion_point(field_set_allocated:civ.localization.Pose.linear_velocity_vrf)
}

// optional .civ.common.PointLLH position_llh = 11;
inline bool Pose::_internal_has_position_llh() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  PROTOBUF_ASSUME(!value || position_llh_ != nullptr);
  return value;
}
inline bool Pose::has_position_llh() const {
  return _internal_has_position_llh();
}
inline const ::civ::common::PointLLH& Pose::_internal_position_llh() const {
  const ::civ::common::PointLLH* p = position_llh_;
  return p != nullptr ? *p : reinterpret_cast<const ::civ::common::PointLLH&>(
      ::civ::common::_PointLLH_default_instance_);
}
inline const ::civ::common::PointLLH& Pose::position_llh() const {
  // @@protoc_insertion_point(field_get:civ.localization.Pose.position_llh)
  return _internal_position_llh();
}
inline void Pose::unsafe_arena_set_allocated_position_llh(
    ::civ::common::PointLLH* position_llh) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_llh_);
  }
  position_llh_ = position_llh;
  if (position_llh) {
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:civ.localization.Pose.position_llh)
}
inline ::civ::common::PointLLH* Pose::release_position_llh() {
  _has_bits_[0] &= ~0x00000200u;
  ::civ::common::PointLLH* temp = position_llh_;
  position_llh_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::civ::common::PointLLH* Pose::unsafe_arena_release_position_llh() {
  // @@protoc_insertion_point(field_release:civ.localization.Pose.position_llh)
  _has_bits_[0] &= ~0x00000200u;
  ::civ::common::PointLLH* temp = position_llh_;
  position_llh_ = nullptr;
  return temp;
}
inline ::civ::common::PointLLH* Pose::_internal_mutable_position_llh() {
  _has_bits_[0] |= 0x00000200u;
  if (position_llh_ == nullptr) {
    auto* p = CreateMaybeMessage<::civ::common::PointLLH>(GetArena());
    position_llh_ = p;
  }
  return position_llh_;
}
inline ::civ::common::PointLLH* Pose::mutable_position_llh() {
  // @@protoc_insertion_point(field_mutable:civ.localization.Pose.position_llh)
  return _internal_mutable_position_llh();
}
inline void Pose::set_allocated_position_llh(::civ::common::PointLLH* position_llh) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_llh_);
  }
  if (position_llh) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_llh)->GetArena();
    if (message_arena != submessage_arena) {
      position_llh = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position_llh, submessage_arena);
    }
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  position_llh_ = position_llh;
  // @@protoc_insertion_point(field_set_allocated:civ.localization.Pose.position_llh)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace localization
}  // namespace civ

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_message_2flocalization_2fproto_2fpose_2eproto
