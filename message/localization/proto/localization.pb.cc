// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message/localization/proto/localization.proto

#include "message/localization/proto/localization.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_message_2fcommon_2fproto_2fheader_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Header_message_2fcommon_2fproto_2fheader_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_message_2fcommon_2fproto_2fgeometry_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Point3D_message_2fcommon_2fproto_2fgeometry_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_message_2fcommon_2fproto_2fpnc_5fpoint_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_TrajectoryPoint_message_2fcommon_2fproto_2fpnc_5fpoint_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_message_2flocalization_2fproto_2flocalization_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_LocalizationEstimate_message_2flocalization_2fproto_2flocalization_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_message_2flocalization_2fproto_2flocalization_5fstatus_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MsfSensorMsgStatus_message_2flocalization_2fproto_2flocalization_5fstatus_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_message_2flocalization_2fproto_2flocalization_5fstatus_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MsfStatus_message_2flocalization_2fproto_2flocalization_5fstatus_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_message_2flocalization_2fproto_2fpose_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_Pose_message_2flocalization_2fproto_2fpose_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_message_2flocalization_2fproto_2flocalization_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Uncertainty_message_2flocalization_2fproto_2flocalization_2eproto;
namespace civ {
namespace localization {
class UncertaintyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Uncertainty> _instance;
} _Uncertainty_default_instance_;
class LocalizationEstimateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LocalizationEstimate> _instance;
} _LocalizationEstimate_default_instance_;
class LocalizationEstimateVecDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LocalizationEstimateVec> _instance;
} _LocalizationEstimateVec_default_instance_;
class LocalizationStatusDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LocalizationStatus> _instance;
} _LocalizationStatus_default_instance_;
}  // namespace localization
}  // namespace civ
static void InitDefaultsscc_info_LocalizationEstimate_message_2flocalization_2fproto_2flocalization_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::civ::localization::_LocalizationEstimate_default_instance_;
    new (ptr) ::civ::localization::LocalizationEstimate();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_LocalizationEstimate_message_2flocalization_2fproto_2flocalization_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 6, 0, InitDefaultsscc_info_LocalizationEstimate_message_2flocalization_2fproto_2flocalization_2eproto}, {
      &scc_info_Header_message_2fcommon_2fproto_2fheader_2eproto.base,
      &scc_info_Pose_message_2flocalization_2fproto_2fpose_2eproto.base,
      &scc_info_Uncertainty_message_2flocalization_2fproto_2flocalization_2eproto.base,
      &scc_info_TrajectoryPoint_message_2fcommon_2fproto_2fpnc_5fpoint_2eproto.base,
      &scc_info_MsfStatus_message_2flocalization_2fproto_2flocalization_5fstatus_2eproto.base,
      &scc_info_MsfSensorMsgStatus_message_2flocalization_2fproto_2flocalization_5fstatus_2eproto.base,}};

static void InitDefaultsscc_info_LocalizationEstimateVec_message_2flocalization_2fproto_2flocalization_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::civ::localization::_LocalizationEstimateVec_default_instance_;
    new (ptr) ::civ::localization::LocalizationEstimateVec();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LocalizationEstimateVec_message_2flocalization_2fproto_2flocalization_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_LocalizationEstimateVec_message_2flocalization_2fproto_2flocalization_2eproto}, {
      &scc_info_LocalizationEstimate_message_2flocalization_2fproto_2flocalization_2eproto.base,}};

static void InitDefaultsscc_info_LocalizationStatus_message_2flocalization_2fproto_2flocalization_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::civ::localization::_LocalizationStatus_default_instance_;
    new (ptr) ::civ::localization::LocalizationStatus();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LocalizationStatus_message_2flocalization_2fproto_2flocalization_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_LocalizationStatus_message_2flocalization_2fproto_2flocalization_2eproto}, {
      &scc_info_Header_message_2fcommon_2fproto_2fheader_2eproto.base,}};

static void InitDefaultsscc_info_Uncertainty_message_2flocalization_2fproto_2flocalization_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::civ::localization::_Uncertainty_default_instance_;
    new (ptr) ::civ::localization::Uncertainty();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Uncertainty_message_2flocalization_2fproto_2flocalization_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Uncertainty_message_2flocalization_2fproto_2flocalization_2eproto}, {
      &scc_info_Point3D_message_2fcommon_2fproto_2fgeometry_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_message_2flocalization_2fproto_2flocalization_2eproto[4];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_message_2flocalization_2fproto_2flocalization_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_message_2flocalization_2fproto_2flocalization_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_message_2flocalization_2fproto_2flocalization_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::civ::localization::Uncertainty, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::civ::localization::Uncertainty, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::civ::localization::Uncertainty, position_std_dev_),
  PROTOBUF_FIELD_OFFSET(::civ::localization::Uncertainty, orientation_std_dev_),
  PROTOBUF_FIELD_OFFSET(::civ::localization::Uncertainty, linear_velocity_std_dev_),
  PROTOBUF_FIELD_OFFSET(::civ::localization::Uncertainty, linear_acceleration_std_dev_),
  PROTOBUF_FIELD_OFFSET(::civ::localization::Uncertainty, angular_velocity_std_dev_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::civ::localization::LocalizationEstimate, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::civ::localization::LocalizationEstimate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::civ::localization::LocalizationEstimate, header_),
  PROTOBUF_FIELD_OFFSET(::civ::localization::LocalizationEstimate, pose_),
  PROTOBUF_FIELD_OFFSET(::civ::localization::LocalizationEstimate, uncertainty_),
  PROTOBUF_FIELD_OFFSET(::civ::localization::LocalizationEstimate, measurement_time_),
  PROTOBUF_FIELD_OFFSET(::civ::localization::LocalizationEstimate, trajectory_point_),
  PROTOBUF_FIELD_OFFSET(::civ::localization::LocalizationEstimate, msf_status_),
  PROTOBUF_FIELD_OFFSET(::civ::localization::LocalizationEstimate, sensor_status_),
  PROTOBUF_FIELD_OFFSET(::civ::localization::LocalizationEstimate, status_),
  PROTOBUF_FIELD_OFFSET(::civ::localization::LocalizationEstimate, mileage_),
  PROTOBUF_FIELD_OFFSET(::civ::localization::LocalizationEstimate, trailer_theta_),
  PROTOBUF_FIELD_OFFSET(::civ::localization::LocalizationEstimate, vehicle_to_curb_dist_),
  0,
  1,
  2,
  5,
  ~0u,
  3,
  4,
  6,
  8,
  7,
  9,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::civ::localization::LocalizationEstimateVec, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::civ::localization::LocalizationEstimateVec, loc_vec_),
  PROTOBUF_FIELD_OFFSET(::civ::localization::LocalizationStatus, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::civ::localization::LocalizationStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::civ::localization::LocalizationStatus, header_),
  PROTOBUF_FIELD_OFFSET(::civ::localization::LocalizationStatus, fusion_status_),
  PROTOBUF_FIELD_OFFSET(::civ::localization::LocalizationStatus, gnss_status_),
  PROTOBUF_FIELD_OFFSET(::civ::localization::LocalizationStatus, lidar_status_),
  PROTOBUF_FIELD_OFFSET(::civ::localization::LocalizationStatus, measurement_time_),
  PROTOBUF_FIELD_OFFSET(::civ::localization::LocalizationStatus, state_message_),
  1,
  2,
  3,
  5,
  4,
  0,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 10, sizeof(::civ::localization::Uncertainty)},
  { 15, 31, sizeof(::civ::localization::LocalizationEstimate)},
  { 42, -1, sizeof(::civ::localization::LocalizationEstimateVec)},
  { 48, 59, sizeof(::civ::localization::LocalizationStatus)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::civ::localization::_Uncertainty_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::civ::localization::_LocalizationEstimate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::civ::localization::_LocalizationEstimateVec_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::civ::localization::_LocalizationStatus_default_instance_),
};

const char descriptor_table_protodef_message_2flocalization_2fproto_2flocalization_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n-message/localization/proto/localizatio"
  "n.proto\022\020civ.localization\032!message/commo"
  "n/proto/header.proto\032%message/localizati"
  "on/proto/pose.proto\032#message/common/prot"
  "o/geometry.proto\032$message/common/proto/p"
  "nc_point.proto\0324message/localization/pro"
  "to/localization_status.proto\"\225\002\n\013Uncerta"
  "inty\022-\n\020position_std_dev\030\001 \001(\0132\023.civ.com"
  "mon.Point3D\0220\n\023orientation_std_dev\030\002 \001(\013"
  "2\023.civ.common.Point3D\0224\n\027linear_velocity"
  "_std_dev\030\003 \001(\0132\023.civ.common.Point3D\0228\n\033l"
  "inear_acceleration_std_dev\030\004 \001(\0132\023.civ.c"
  "ommon.Point3D\0225\n\030angular_velocity_std_de"
  "v\030\005 \001(\0132\023.civ.common.Point3D\"\251\003\n\024Localiz"
  "ationEstimate\022\"\n\006header\030\001 \001(\0132\022.civ.comm"
  "on.Header\022$\n\004pose\030\002 \001(\0132\026.civ.localizati"
  "on.Pose\0222\n\013uncertainty\030\003 \001(\0132\035.civ.local"
  "ization.Uncertainty\022\030\n\020measurement_time\030"
  "\004 \001(\001\0225\n\020trajectory_point\030\005 \003(\0132\033.civ.co"
  "mmon.TrajectoryPoint\022/\n\nmsf_status\030\006 \001(\013"
  "2\033.civ.localization.MsfStatus\022;\n\rsensor_"
  "status\030\007 \001(\0132$.civ.localization.MsfSenso"
  "rMsgStatus\022\016\n\006status\030\010 \001(\005\022\017\n\007mileage\030\n "
  "\001(\001\022\025\n\rtrailer_theta\030\013 \001(\002\022\034\n\024vehicle_to"
  "_curb_dist\030\014 \001(\002\"R\n\027LocalizationEstimate"
  "Vec\0227\n\007loc_vec\030\001 \003(\0132&.civ.localization."
  "LocalizationEstimate\"\223\002\n\022LocalizationSta"
  "tus\022\"\n\006header\030\001 \001(\0132\022.civ.common.Header\022"
  "5\n\rfusion_status\030\002 \001(\0162\036.civ.localizatio"
  "n.MeasureState\0227\n\013gnss_status\030\003 \001(\0162\036.ci"
  "v.localization.MeasureStateB\002\030\001\0228\n\014lidar"
  "_status\030\004 \001(\0162\036.civ.localization.Measure"
  "StateB\002\030\001\022\030\n\020measurement_time\030\005 \001(\001\022\025\n\rs"
  "tate_message\030\006 \001(\t*T\n\014MeasureState\022\006\n\002OK"
  "\020\000\022\014\n\010WARNNING\020\001\022\t\n\005ERROR\020\002\022\022\n\016CRITICAL_"
  "ERROR\020\003\022\017\n\013FATAL_ERROR\020\004"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_message_2flocalization_2fproto_2flocalization_2eproto_deps[5] = {
  &::descriptor_table_message_2fcommon_2fproto_2fgeometry_2eproto,
  &::descriptor_table_message_2fcommon_2fproto_2fheader_2eproto,
  &::descriptor_table_message_2fcommon_2fproto_2fpnc_5fpoint_2eproto,
  &::descriptor_table_message_2flocalization_2fproto_2flocalization_5fstatus_2eproto,
  &::descriptor_table_message_2flocalization_2fproto_2fpose_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_message_2flocalization_2fproto_2flocalization_2eproto_sccs[4] = {
  &scc_info_LocalizationEstimate_message_2flocalization_2fproto_2flocalization_2eproto.base,
  &scc_info_LocalizationEstimateVec_message_2flocalization_2fproto_2flocalization_2eproto.base,
  &scc_info_LocalizationStatus_message_2flocalization_2fproto_2flocalization_2eproto.base,
  &scc_info_Uncertainty_message_2flocalization_2fproto_2flocalization_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_message_2flocalization_2fproto_2flocalization_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_message_2flocalization_2fproto_2flocalization_2eproto = {
  false, false, descriptor_table_protodef_message_2flocalization_2fproto_2flocalization_2eproto, "message/localization/proto/localization.proto", 1424,
  &descriptor_table_message_2flocalization_2fproto_2flocalization_2eproto_once, descriptor_table_message_2flocalization_2fproto_2flocalization_2eproto_sccs, descriptor_table_message_2flocalization_2fproto_2flocalization_2eproto_deps, 4, 5,
  schemas, file_default_instances, TableStruct_message_2flocalization_2fproto_2flocalization_2eproto::offsets,
  file_level_metadata_message_2flocalization_2fproto_2flocalization_2eproto, 4, file_level_enum_descriptors_message_2flocalization_2fproto_2flocalization_2eproto, file_level_service_descriptors_message_2flocalization_2fproto_2flocalization_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_message_2flocalization_2fproto_2flocalization_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_message_2flocalization_2fproto_2flocalization_2eproto)), true);
namespace civ {
namespace localization {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MeasureState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_message_2flocalization_2fproto_2flocalization_2eproto);
  return file_level_enum_descriptors_message_2flocalization_2fproto_2flocalization_2eproto[0];
}
bool MeasureState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class Uncertainty::_Internal {
 public:
  using HasBits = decltype(std::declval<Uncertainty>()._has_bits_);
  static const ::civ::common::Point3D& position_std_dev(const Uncertainty* msg);
  static void set_has_position_std_dev(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::civ::common::Point3D& orientation_std_dev(const Uncertainty* msg);
  static void set_has_orientation_std_dev(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::civ::common::Point3D& linear_velocity_std_dev(const Uncertainty* msg);
  static void set_has_linear_velocity_std_dev(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::civ::common::Point3D& linear_acceleration_std_dev(const Uncertainty* msg);
  static void set_has_linear_acceleration_std_dev(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::civ::common::Point3D& angular_velocity_std_dev(const Uncertainty* msg);
  static void set_has_angular_velocity_std_dev(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::civ::common::Point3D&
Uncertainty::_Internal::position_std_dev(const Uncertainty* msg) {
  return *msg->position_std_dev_;
}
const ::civ::common::Point3D&
Uncertainty::_Internal::orientation_std_dev(const Uncertainty* msg) {
  return *msg->orientation_std_dev_;
}
const ::civ::common::Point3D&
Uncertainty::_Internal::linear_velocity_std_dev(const Uncertainty* msg) {
  return *msg->linear_velocity_std_dev_;
}
const ::civ::common::Point3D&
Uncertainty::_Internal::linear_acceleration_std_dev(const Uncertainty* msg) {
  return *msg->linear_acceleration_std_dev_;
}
const ::civ::common::Point3D&
Uncertainty::_Internal::angular_velocity_std_dev(const Uncertainty* msg) {
  return *msg->angular_velocity_std_dev_;
}
void Uncertainty::clear_position_std_dev() {
  if (position_std_dev_ != nullptr) position_std_dev_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void Uncertainty::clear_orientation_std_dev() {
  if (orientation_std_dev_ != nullptr) orientation_std_dev_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void Uncertainty::clear_linear_velocity_std_dev() {
  if (linear_velocity_std_dev_ != nullptr) linear_velocity_std_dev_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void Uncertainty::clear_linear_acceleration_std_dev() {
  if (linear_acceleration_std_dev_ != nullptr) linear_acceleration_std_dev_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void Uncertainty::clear_angular_velocity_std_dev() {
  if (angular_velocity_std_dev_ != nullptr) angular_velocity_std_dev_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
Uncertainty::Uncertainty(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:civ.localization.Uncertainty)
}
Uncertainty::Uncertainty(const Uncertainty& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_position_std_dev()) {
    position_std_dev_ = new ::civ::common::Point3D(*from.position_std_dev_);
  } else {
    position_std_dev_ = nullptr;
  }
  if (from._internal_has_orientation_std_dev()) {
    orientation_std_dev_ = new ::civ::common::Point3D(*from.orientation_std_dev_);
  } else {
    orientation_std_dev_ = nullptr;
  }
  if (from._internal_has_linear_velocity_std_dev()) {
    linear_velocity_std_dev_ = new ::civ::common::Point3D(*from.linear_velocity_std_dev_);
  } else {
    linear_velocity_std_dev_ = nullptr;
  }
  if (from._internal_has_linear_acceleration_std_dev()) {
    linear_acceleration_std_dev_ = new ::civ::common::Point3D(*from.linear_acceleration_std_dev_);
  } else {
    linear_acceleration_std_dev_ = nullptr;
  }
  if (from._internal_has_angular_velocity_std_dev()) {
    angular_velocity_std_dev_ = new ::civ::common::Point3D(*from.angular_velocity_std_dev_);
  } else {
    angular_velocity_std_dev_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:civ.localization.Uncertainty)
}

void Uncertainty::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Uncertainty_message_2flocalization_2fproto_2flocalization_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&position_std_dev_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&angular_velocity_std_dev_) -
      reinterpret_cast<char*>(&position_std_dev_)) + sizeof(angular_velocity_std_dev_));
}

Uncertainty::~Uncertainty() {
  // @@protoc_insertion_point(destructor:civ.localization.Uncertainty)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Uncertainty::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete position_std_dev_;
  if (this != internal_default_instance()) delete orientation_std_dev_;
  if (this != internal_default_instance()) delete linear_velocity_std_dev_;
  if (this != internal_default_instance()) delete linear_acceleration_std_dev_;
  if (this != internal_default_instance()) delete angular_velocity_std_dev_;
}

void Uncertainty::ArenaDtor(void* object) {
  Uncertainty* _this = reinterpret_cast< Uncertainty* >(object);
  (void)_this;
}
void Uncertainty::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Uncertainty::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Uncertainty& Uncertainty::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Uncertainty_message_2flocalization_2fproto_2flocalization_2eproto.base);
  return *internal_default_instance();
}


void Uncertainty::Clear() {
// @@protoc_insertion_point(message_clear_start:civ.localization.Uncertainty)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(position_std_dev_ != nullptr);
      position_std_dev_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(orientation_std_dev_ != nullptr);
      orientation_std_dev_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(linear_velocity_std_dev_ != nullptr);
      linear_velocity_std_dev_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(linear_acceleration_std_dev_ != nullptr);
      linear_acceleration_std_dev_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(angular_velocity_std_dev_ != nullptr);
      angular_velocity_std_dev_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Uncertainty::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .civ.common.Point3D position_std_dev = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_position_std_dev(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .civ.common.Point3D orientation_std_dev = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_orientation_std_dev(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .civ.common.Point3D linear_velocity_std_dev = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_linear_velocity_std_dev(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .civ.common.Point3D linear_acceleration_std_dev = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_linear_acceleration_std_dev(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .civ.common.Point3D angular_velocity_std_dev = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_angular_velocity_std_dev(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Uncertainty::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:civ.localization.Uncertainty)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .civ.common.Point3D position_std_dev = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::position_std_dev(this), target, stream);
  }

  // optional .civ.common.Point3D orientation_std_dev = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::orientation_std_dev(this), target, stream);
  }

  // optional .civ.common.Point3D linear_velocity_std_dev = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::linear_velocity_std_dev(this), target, stream);
  }

  // optional .civ.common.Point3D linear_acceleration_std_dev = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::linear_acceleration_std_dev(this), target, stream);
  }

  // optional .civ.common.Point3D angular_velocity_std_dev = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::angular_velocity_std_dev(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:civ.localization.Uncertainty)
  return target;
}

size_t Uncertainty::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:civ.localization.Uncertainty)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .civ.common.Point3D position_std_dev = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *position_std_dev_);
    }

    // optional .civ.common.Point3D orientation_std_dev = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *orientation_std_dev_);
    }

    // optional .civ.common.Point3D linear_velocity_std_dev = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *linear_velocity_std_dev_);
    }

    // optional .civ.common.Point3D linear_acceleration_std_dev = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *linear_acceleration_std_dev_);
    }

    // optional .civ.common.Point3D angular_velocity_std_dev = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *angular_velocity_std_dev_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Uncertainty::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:civ.localization.Uncertainty)
  GOOGLE_DCHECK_NE(&from, this);
  const Uncertainty* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Uncertainty>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:civ.localization.Uncertainty)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:civ.localization.Uncertainty)
    MergeFrom(*source);
  }
}

void Uncertainty::MergeFrom(const Uncertainty& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:civ.localization.Uncertainty)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_position_std_dev()->::civ::common::Point3D::MergeFrom(from._internal_position_std_dev());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_orientation_std_dev()->::civ::common::Point3D::MergeFrom(from._internal_orientation_std_dev());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_linear_velocity_std_dev()->::civ::common::Point3D::MergeFrom(from._internal_linear_velocity_std_dev());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_linear_acceleration_std_dev()->::civ::common::Point3D::MergeFrom(from._internal_linear_acceleration_std_dev());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_angular_velocity_std_dev()->::civ::common::Point3D::MergeFrom(from._internal_angular_velocity_std_dev());
    }
  }
}

void Uncertainty::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:civ.localization.Uncertainty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Uncertainty::CopyFrom(const Uncertainty& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:civ.localization.Uncertainty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Uncertainty::IsInitialized() const {
  return true;
}

void Uncertainty::InternalSwap(Uncertainty* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Uncertainty, angular_velocity_std_dev_)
      + sizeof(Uncertainty::angular_velocity_std_dev_)
      - PROTOBUF_FIELD_OFFSET(Uncertainty, position_std_dev_)>(
          reinterpret_cast<char*>(&position_std_dev_),
          reinterpret_cast<char*>(&other->position_std_dev_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Uncertainty::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class LocalizationEstimate::_Internal {
 public:
  using HasBits = decltype(std::declval<LocalizationEstimate>()._has_bits_);
  static const ::civ::common::Header& header(const LocalizationEstimate* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::civ::localization::Pose& pose(const LocalizationEstimate* msg);
  static void set_has_pose(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::civ::localization::Uncertainty& uncertainty(const LocalizationEstimate* msg);
  static void set_has_uncertainty(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_measurement_time(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::civ::localization::MsfStatus& msf_status(const LocalizationEstimate* msg);
  static void set_has_msf_status(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::civ::localization::MsfSensorMsgStatus& sensor_status(const LocalizationEstimate* msg);
  static void set_has_sensor_status(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_mileage(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_trailer_theta(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_vehicle_to_curb_dist(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
};

const ::civ::common::Header&
LocalizationEstimate::_Internal::header(const LocalizationEstimate* msg) {
  return *msg->header_;
}
const ::civ::localization::Pose&
LocalizationEstimate::_Internal::pose(const LocalizationEstimate* msg) {
  return *msg->pose_;
}
const ::civ::localization::Uncertainty&
LocalizationEstimate::_Internal::uncertainty(const LocalizationEstimate* msg) {
  return *msg->uncertainty_;
}
const ::civ::localization::MsfStatus&
LocalizationEstimate::_Internal::msf_status(const LocalizationEstimate* msg) {
  return *msg->msf_status_;
}
const ::civ::localization::MsfSensorMsgStatus&
LocalizationEstimate::_Internal::sensor_status(const LocalizationEstimate* msg) {
  return *msg->sensor_status_;
}
void LocalizationEstimate::clear_header() {
  if (header_ != nullptr) header_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void LocalizationEstimate::clear_pose() {
  if (pose_ != nullptr) pose_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void LocalizationEstimate::clear_trajectory_point() {
  trajectory_point_.Clear();
}
void LocalizationEstimate::clear_msf_status() {
  if (msf_status_ != nullptr) msf_status_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void LocalizationEstimate::clear_sensor_status() {
  if (sensor_status_ != nullptr) sensor_status_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
LocalizationEstimate::LocalizationEstimate(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  trajectory_point_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:civ.localization.LocalizationEstimate)
}
LocalizationEstimate::LocalizationEstimate(const LocalizationEstimate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      trajectory_point_(from.trajectory_point_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::civ::common::Header(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_pose()) {
    pose_ = new ::civ::localization::Pose(*from.pose_);
  } else {
    pose_ = nullptr;
  }
  if (from._internal_has_uncertainty()) {
    uncertainty_ = new ::civ::localization::Uncertainty(*from.uncertainty_);
  } else {
    uncertainty_ = nullptr;
  }
  if (from._internal_has_msf_status()) {
    msf_status_ = new ::civ::localization::MsfStatus(*from.msf_status_);
  } else {
    msf_status_ = nullptr;
  }
  if (from._internal_has_sensor_status()) {
    sensor_status_ = new ::civ::localization::MsfSensorMsgStatus(*from.sensor_status_);
  } else {
    sensor_status_ = nullptr;
  }
  ::memcpy(&measurement_time_, &from.measurement_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&vehicle_to_curb_dist_) -
    reinterpret_cast<char*>(&measurement_time_)) + sizeof(vehicle_to_curb_dist_));
  // @@protoc_insertion_point(copy_constructor:civ.localization.LocalizationEstimate)
}

void LocalizationEstimate::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LocalizationEstimate_message_2flocalization_2fproto_2flocalization_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&header_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&vehicle_to_curb_dist_) -
      reinterpret_cast<char*>(&header_)) + sizeof(vehicle_to_curb_dist_));
}

LocalizationEstimate::~LocalizationEstimate() {
  // @@protoc_insertion_point(destructor:civ.localization.LocalizationEstimate)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LocalizationEstimate::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete pose_;
  if (this != internal_default_instance()) delete uncertainty_;
  if (this != internal_default_instance()) delete msf_status_;
  if (this != internal_default_instance()) delete sensor_status_;
}

void LocalizationEstimate::ArenaDtor(void* object) {
  LocalizationEstimate* _this = reinterpret_cast< LocalizationEstimate* >(object);
  (void)_this;
}
void LocalizationEstimate::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LocalizationEstimate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LocalizationEstimate& LocalizationEstimate::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LocalizationEstimate_message_2flocalization_2fproto_2flocalization_2eproto.base);
  return *internal_default_instance();
}


void LocalizationEstimate::Clear() {
// @@protoc_insertion_point(message_clear_start:civ.localization.LocalizationEstimate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  trajectory_point_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(header_ != nullptr);
      header_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(pose_ != nullptr);
      pose_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(uncertainty_ != nullptr);
      uncertainty_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(msf_status_ != nullptr);
      msf_status_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(sensor_status_ != nullptr);
      sensor_status_->Clear();
    }
  }
  if (cached_has_bits & 0x000000e0u) {
    ::memset(&measurement_time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&trailer_theta_) -
        reinterpret_cast<char*>(&measurement_time_)) + sizeof(trailer_theta_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&mileage_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&vehicle_to_curb_dist_) -
        reinterpret_cast<char*>(&mileage_)) + sizeof(vehicle_to_curb_dist_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LocalizationEstimate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .civ.common.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .civ.localization.Pose pose = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_pose(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .civ.localization.Uncertainty uncertainty = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_uncertainty(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double measurement_time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_measurement_time(&has_bits);
          measurement_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated .civ.common.TrajectoryPoint trajectory_point = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_trajectory_point(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .civ.localization.MsfStatus msf_status = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_msf_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .civ.localization.MsfSensorMsgStatus sensor_status = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_sensor_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 status = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_status(&has_bits);
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double mileage = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          _Internal::set_has_mileage(&has_bits);
          mileage_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional float trailer_theta = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          _Internal::set_has_trailer_theta(&has_bits);
          trailer_theta_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float vehicle_to_curb_dist = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 101)) {
          _Internal::set_has_vehicle_to_curb_dist(&has_bits);
          vehicle_to_curb_dist_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LocalizationEstimate::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:civ.localization.LocalizationEstimate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .civ.common.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // optional .civ.localization.Pose pose = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::pose(this), target, stream);
  }

  // optional .civ.localization.Uncertainty uncertainty = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::uncertainty(this), target, stream);
  }

  // optional double measurement_time = 4;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_measurement_time(), target);
  }

  // repeated .civ.common.TrajectoryPoint trajectory_point = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_trajectory_point_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_trajectory_point(i), target, stream);
  }

  // optional .civ.localization.MsfStatus msf_status = 6;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::msf_status(this), target, stream);
  }

  // optional .civ.localization.MsfSensorMsgStatus sensor_status = 7;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::sensor_status(this), target, stream);
  }

  // optional int32 status = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_status(), target);
  }

  // optional double mileage = 10;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(10, this->_internal_mileage(), target);
  }

  // optional float trailer_theta = 11;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(11, this->_internal_trailer_theta(), target);
  }

  // optional float vehicle_to_curb_dist = 12;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(12, this->_internal_vehicle_to_curb_dist(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:civ.localization.LocalizationEstimate)
  return target;
}

size_t LocalizationEstimate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:civ.localization.LocalizationEstimate)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .civ.common.TrajectoryPoint trajectory_point = 5;
  total_size += 1UL * this->_internal_trajectory_point_size();
  for (const auto& msg : this->trajectory_point_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .civ.common.Header header = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *header_);
    }

    // optional .civ.localization.Pose pose = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *pose_);
    }

    // optional .civ.localization.Uncertainty uncertainty = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *uncertainty_);
    }

    // optional .civ.localization.MsfStatus msf_status = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *msf_status_);
    }

    // optional .civ.localization.MsfSensorMsgStatus sensor_status = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *sensor_status_);
    }

    // optional double measurement_time = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional int32 status = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_status());
    }

    // optional float trailer_theta = 11;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 4;
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional double mileage = 10;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 8;
    }

    // optional float vehicle_to_curb_dist = 12;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LocalizationEstimate::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:civ.localization.LocalizationEstimate)
  GOOGLE_DCHECK_NE(&from, this);
  const LocalizationEstimate* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LocalizationEstimate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:civ.localization.LocalizationEstimate)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:civ.localization.LocalizationEstimate)
    MergeFrom(*source);
  }
}

void LocalizationEstimate::MergeFrom(const LocalizationEstimate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:civ.localization.LocalizationEstimate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  trajectory_point_.MergeFrom(from.trajectory_point_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_header()->::civ::common::Header::MergeFrom(from._internal_header());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_pose()->::civ::localization::Pose::MergeFrom(from._internal_pose());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_uncertainty()->::civ::localization::Uncertainty::MergeFrom(from._internal_uncertainty());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_msf_status()->::civ::localization::MsfStatus::MergeFrom(from._internal_msf_status());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_sensor_status()->::civ::localization::MsfSensorMsgStatus::MergeFrom(from._internal_sensor_status());
    }
    if (cached_has_bits & 0x00000020u) {
      measurement_time_ = from.measurement_time_;
    }
    if (cached_has_bits & 0x00000040u) {
      status_ = from.status_;
    }
    if (cached_has_bits & 0x00000080u) {
      trailer_theta_ = from.trailer_theta_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      mileage_ = from.mileage_;
    }
    if (cached_has_bits & 0x00000200u) {
      vehicle_to_curb_dist_ = from.vehicle_to_curb_dist_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LocalizationEstimate::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:civ.localization.LocalizationEstimate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LocalizationEstimate::CopyFrom(const LocalizationEstimate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:civ.localization.LocalizationEstimate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocalizationEstimate::IsInitialized() const {
  return true;
}

void LocalizationEstimate::InternalSwap(LocalizationEstimate* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  trajectory_point_.InternalSwap(&other->trajectory_point_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LocalizationEstimate, vehicle_to_curb_dist_)
      + sizeof(LocalizationEstimate::vehicle_to_curb_dist_)
      - PROTOBUF_FIELD_OFFSET(LocalizationEstimate, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LocalizationEstimate::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class LocalizationEstimateVec::_Internal {
 public:
};

LocalizationEstimateVec::LocalizationEstimateVec(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  loc_vec_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:civ.localization.LocalizationEstimateVec)
}
LocalizationEstimateVec::LocalizationEstimateVec(const LocalizationEstimateVec& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      loc_vec_(from.loc_vec_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:civ.localization.LocalizationEstimateVec)
}

void LocalizationEstimateVec::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LocalizationEstimateVec_message_2flocalization_2fproto_2flocalization_2eproto.base);
}

LocalizationEstimateVec::~LocalizationEstimateVec() {
  // @@protoc_insertion_point(destructor:civ.localization.LocalizationEstimateVec)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LocalizationEstimateVec::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void LocalizationEstimateVec::ArenaDtor(void* object) {
  LocalizationEstimateVec* _this = reinterpret_cast< LocalizationEstimateVec* >(object);
  (void)_this;
}
void LocalizationEstimateVec::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LocalizationEstimateVec::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LocalizationEstimateVec& LocalizationEstimateVec::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LocalizationEstimateVec_message_2flocalization_2fproto_2flocalization_2eproto.base);
  return *internal_default_instance();
}


void LocalizationEstimateVec::Clear() {
// @@protoc_insertion_point(message_clear_start:civ.localization.LocalizationEstimateVec)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  loc_vec_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LocalizationEstimateVec::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .civ.localization.LocalizationEstimate loc_vec = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_loc_vec(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LocalizationEstimateVec::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:civ.localization.LocalizationEstimateVec)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .civ.localization.LocalizationEstimate loc_vec = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_loc_vec_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_loc_vec(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:civ.localization.LocalizationEstimateVec)
  return target;
}

size_t LocalizationEstimateVec::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:civ.localization.LocalizationEstimateVec)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .civ.localization.LocalizationEstimate loc_vec = 1;
  total_size += 1UL * this->_internal_loc_vec_size();
  for (const auto& msg : this->loc_vec_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LocalizationEstimateVec::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:civ.localization.LocalizationEstimateVec)
  GOOGLE_DCHECK_NE(&from, this);
  const LocalizationEstimateVec* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LocalizationEstimateVec>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:civ.localization.LocalizationEstimateVec)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:civ.localization.LocalizationEstimateVec)
    MergeFrom(*source);
  }
}

void LocalizationEstimateVec::MergeFrom(const LocalizationEstimateVec& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:civ.localization.LocalizationEstimateVec)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  loc_vec_.MergeFrom(from.loc_vec_);
}

void LocalizationEstimateVec::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:civ.localization.LocalizationEstimateVec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LocalizationEstimateVec::CopyFrom(const LocalizationEstimateVec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:civ.localization.LocalizationEstimateVec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocalizationEstimateVec::IsInitialized() const {
  return true;
}

void LocalizationEstimateVec::InternalSwap(LocalizationEstimateVec* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  loc_vec_.InternalSwap(&other->loc_vec_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LocalizationEstimateVec::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class LocalizationStatus::_Internal {
 public:
  using HasBits = decltype(std::declval<LocalizationStatus>()._has_bits_);
  static const ::civ::common::Header& header(const LocalizationStatus* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_fusion_status(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_gnss_status(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_lidar_status(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_measurement_time(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_state_message(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::civ::common::Header&
LocalizationStatus::_Internal::header(const LocalizationStatus* msg) {
  return *msg->header_;
}
void LocalizationStatus::clear_header() {
  if (header_ != nullptr) header_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
LocalizationStatus::LocalizationStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:civ.localization.LocalizationStatus)
}
LocalizationStatus::LocalizationStatus(const LocalizationStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  state_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_state_message()) {
    state_message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_state_message(), 
      GetArena());
  }
  if (from._internal_has_header()) {
    header_ = new ::civ::common::Header(*from.header_);
  } else {
    header_ = nullptr;
  }
  ::memcpy(&fusion_status_, &from.fusion_status_,
    static_cast<size_t>(reinterpret_cast<char*>(&lidar_status_) -
    reinterpret_cast<char*>(&fusion_status_)) + sizeof(lidar_status_));
  // @@protoc_insertion_point(copy_constructor:civ.localization.LocalizationStatus)
}

void LocalizationStatus::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LocalizationStatus_message_2flocalization_2fproto_2flocalization_2eproto.base);
  state_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&header_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&lidar_status_) -
      reinterpret_cast<char*>(&header_)) + sizeof(lidar_status_));
}

LocalizationStatus::~LocalizationStatus() {
  // @@protoc_insertion_point(destructor:civ.localization.LocalizationStatus)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LocalizationStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  state_message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete header_;
}

void LocalizationStatus::ArenaDtor(void* object) {
  LocalizationStatus* _this = reinterpret_cast< LocalizationStatus* >(object);
  (void)_this;
}
void LocalizationStatus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LocalizationStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LocalizationStatus& LocalizationStatus::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LocalizationStatus_message_2flocalization_2fproto_2flocalization_2eproto.base);
  return *internal_default_instance();
}


void LocalizationStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:civ.localization.LocalizationStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      state_message_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(header_ != nullptr);
      header_->Clear();
    }
  }
  if (cached_has_bits & 0x0000003cu) {
    ::memset(&fusion_status_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&lidar_status_) -
        reinterpret_cast<char*>(&fusion_status_)) + sizeof(lidar_status_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LocalizationStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .civ.common.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .civ.localization.MeasureState fusion_status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::civ::localization::MeasureState_IsValid(val))) {
            _internal_set_fusion_status(static_cast<::civ::localization::MeasureState>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .civ.localization.MeasureState gnss_status = 3 [deprecated = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::civ::localization::MeasureState_IsValid(val))) {
            _internal_set_gnss_status(static_cast<::civ::localization::MeasureState>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .civ.localization.MeasureState lidar_status = 4 [deprecated = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::civ::localization::MeasureState_IsValid(val))) {
            _internal_set_lidar_status(static_cast<::civ::localization::MeasureState>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional double measurement_time = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_measurement_time(&has_bits);
          measurement_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional string state_message = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_state_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "civ.localization.LocalizationStatus.state_message");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LocalizationStatus::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:civ.localization.LocalizationStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .civ.common.Header header = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // optional .civ.localization.MeasureState fusion_status = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_fusion_status(), target);
  }

  // optional .civ.localization.MeasureState gnss_status = 3 [deprecated = true];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_gnss_status(), target);
  }

  // optional .civ.localization.MeasureState lidar_status = 4 [deprecated = true];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_lidar_status(), target);
  }

  // optional double measurement_time = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_measurement_time(), target);
  }

  // optional string state_message = 6;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_state_message().data(), static_cast<int>(this->_internal_state_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "civ.localization.LocalizationStatus.state_message");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_state_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:civ.localization.LocalizationStatus)
  return target;
}

size_t LocalizationStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:civ.localization.LocalizationStatus)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string state_message = 6;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_state_message());
    }

    // optional .civ.common.Header header = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *header_);
    }

    // optional .civ.localization.MeasureState fusion_status = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_fusion_status());
    }

    // optional .civ.localization.MeasureState gnss_status = 3 [deprecated = true];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_gnss_status());
    }

    // optional double measurement_time = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional .civ.localization.MeasureState lidar_status = 4 [deprecated = true];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_lidar_status());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LocalizationStatus::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:civ.localization.LocalizationStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const LocalizationStatus* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LocalizationStatus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:civ.localization.LocalizationStatus)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:civ.localization.LocalizationStatus)
    MergeFrom(*source);
  }
}

void LocalizationStatus::MergeFrom(const LocalizationStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:civ.localization.LocalizationStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_state_message(from._internal_state_message());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_header()->::civ::common::Header::MergeFrom(from._internal_header());
    }
    if (cached_has_bits & 0x00000004u) {
      fusion_status_ = from.fusion_status_;
    }
    if (cached_has_bits & 0x00000008u) {
      gnss_status_ = from.gnss_status_;
    }
    if (cached_has_bits & 0x00000010u) {
      measurement_time_ = from.measurement_time_;
    }
    if (cached_has_bits & 0x00000020u) {
      lidar_status_ = from.lidar_status_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LocalizationStatus::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:civ.localization.LocalizationStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LocalizationStatus::CopyFrom(const LocalizationStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:civ.localization.LocalizationStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocalizationStatus::IsInitialized() const {
  return true;
}

void LocalizationStatus::InternalSwap(LocalizationStatus* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  state_message_.Swap(&other->state_message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LocalizationStatus, lidar_status_)
      + sizeof(LocalizationStatus::lidar_status_)
      - PROTOBUF_FIELD_OFFSET(LocalizationStatus, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LocalizationStatus::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace localization
}  // namespace civ
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::civ::localization::Uncertainty* Arena::CreateMaybeMessage< ::civ::localization::Uncertainty >(Arena* arena) {
  return Arena::CreateMessageInternal< ::civ::localization::Uncertainty >(arena);
}
template<> PROTOBUF_NOINLINE ::civ::localization::LocalizationEstimate* Arena::CreateMaybeMessage< ::civ::localization::LocalizationEstimate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::civ::localization::LocalizationEstimate >(arena);
}
template<> PROTOBUF_NOINLINE ::civ::localization::LocalizationEstimateVec* Arena::CreateMaybeMessage< ::civ::localization::LocalizationEstimateVec >(Arena* arena) {
  return Arena::CreateMessageInternal< ::civ::localization::LocalizationEstimateVec >(arena);
}
template<> PROTOBUF_NOINLINE ::civ::localization::LocalizationStatus* Arena::CreateMaybeMessage< ::civ::localization::LocalizationStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::civ::localization::LocalizationStatus >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
